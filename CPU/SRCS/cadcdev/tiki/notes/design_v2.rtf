{\rtf1\mac\ansicpg10000\cocoartf824
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs34 \cf0 Tiki V2
\f1\b0\fs24 \
by Dan Potter\
May 11, 2005\
\
This was originally written for a new Obj-C toolkit, but I'm re-purposing this to upgrade Tiki in C++. A later version might be written in Obj-C with the Python bridge, etc.\
\
\

\f0\b \ul General Idea
\f1\b0 \ulnone \
\
The whole scene graph system in Tsunami/Tiki is a nice concept. You can basically build up a whole micro-threaded application with it by constructing drawables (nouns) and animations (verbs) as well as triggers to connect it all together. The triggers can spawn more micro-threads and incredibly complex animations can be built up relatively simply.\
\
But the code to create these programs is very ugly. It is also very drawing-specific, where it should be possible to use similar concepts to do things like build game physics systems. Pretty much anything event driven or time driven with distinct entities should be able to be modeled this way.\
\
To this end, a rewrite based on the concept of Objective-C objects and the standard paradigms used in Interface Builder (outlets and actions) can be harnessed to make an event-driven framework to do the same sorts of things that Tiki's old scene graph system handles. This is done by a simple RTTI-type system built into a universal base class (Tiki::Object). This object encompasses the old ref counting plus some new introspection, message passing, and event plugging methods.\
\
Careful dis-attention to canvas size in the drawing-related objects can make the whole system work much more nicely with different resolutions.\
\
\

\f0\b \ul Definitions
\f1\b0 \ulnone \
\
Upper case terms are class names.\
\
- "Object" is the universal base class that provides Obj-C like capabilities to C++.\
\
- An "Entity" is a "model" item, a noun, which can be modified, drawn, and otherwise dealt with in the scene graph.\
\
- An "Activity" is a "controller" item which modifies Entity objects, generally based on the inputs from a Timeline. It is usually continuous over a time span (as opposed to happening once, quickly, like Triggers).\
\
- A "Drawable" is a type of Entity which has a matching view component that displays it. It has some well-defined characteristics like a position, scaling factor, and color tint. Drawables can also have a parent object to which they behave relatively.\
\
- An "Animation" is a type of Activity which is specialized for dealing with Drawables.\
\
- An "event" is a notification of something happening. It is emitted by some object and (potentially) consumed by the same or another object. Events can be connected to more than one output. An event is identified by an Objective-C method selector, even in C++.\
\
- A "trigger" is a selector/target pair representing a potential event target, something that can happen on a one-shot, discrete basis. These are generally attached to a Timeline in the form of a Timepoint object.\
\
- An "asset" is a piece of data like a texture, sound effect, shader program, etc, which can be accessed by a Drawable to display itself. It may also refer to arbitrary data used by any Entity/Activity/etc, but it's most often used in the described manner. These are generally of type Object.\
\
- A "Timeline" is an object which manages a time coordinate and drives Activity objects and Animations to do their thing.\
\
- A "Timepoint" is a trigger on a Timeline at a pre-determined time offset. When the Timeline passes the Timepoint, it will be triggered.\
\
\
Examples of definitions, in an actual scene:\
\
- A logo texture is loaded as an "asset".\
\
- A square that displays the logo on the screen is a "Drawable", which is also an "Entity".\
\
- A program snippet describing how to move the logo from off-screen to the center of the screen over time is an "Animation", which is also an "Activity".\
\
- A program snippet describing how to fade the logo out is also an "Animation".\
\
- The completion of the movement animation is an "event".\
\
- A coupling connecting the end of the movement animation with starting the fade-out animation is a "trigger" (though internally Object stores these pairs without the need for a separate object).\
\
- The measurement of time passing per frame is handled by a "Timeline". The creation of the logo square might be done with a Timepoint attached to the beginning of the Timeline.\
\
\

\f0\b \ul Timelines
\f1\b0 \ulnone \
\
One thing that was very implicit and mostly missing from Tsunami/Tiki is the idea of a timeline. Tiki started to realize this by moving away from a per-frame animation system toward a time-based system, but that still left a lot of management overhead with having to figure out what the current time is, how long it's been since the last update, shifting events around if you want to delay them, etc. Ugly.\
\
Tiki V2 introduces the concept of a first-class Timeline object. Timelines drive all animation work in Tiki V2. They generally will be tied to a real timer (like a system timer or other periodic timer) but they can also be tied to any arbitrary time source which may move forward or backward (e.g. a scrubber bar). [Note: I don't really plan to implement anything with the backward-moving time possibilities; but it's nice to put it in consideration for things which can work with an absolute time value. For the rest of this doc, I will assume "timeline" to imply a monotonically increasing one such as a system-clock-driven timeline.] One other interesting type of Timeline is a localized one which has its zero point at a non-zero point of a parent Timeline.\
\
Every Activity object (by default) has one Timeline, which will drive its changes of the Entity to which it's attached. The Activity can query the Timeline and figure out what the absolute time is since the beginning of the Timeline, or the amount of time that's passed since the last update, or even the amount of time passed since a certain Timepoint (or until a Timepoint).\
\
Timepoint objects can be attached to the Timeline at various points. When the Timeline reaches the given point (or rather, since a Timeline is usually updated in discrete intervals, once it gets past the given point), the Timepoint will be triggered.\
\
Every object dealing with a Timeline can attach new Timepoints to it and move around existing ones. For example a periodic Timepoint might re-instantiate itself (or move itself) on the Timeline at a later time. Some other object might cause a future Timepoint to move forward or backward, delaying or speeding up its occurrence.\
\
\

\f0\b \ul Scenes
\f1\b0 \ulnone \
\
A "Scene" is a collection of all objects involved in a Tiki V2 application at a given time. This will include any Entity objects, Timeline(s), assets, etc. Some of these objects may be named for later lookup. Others will be anonymous and simply part of a chain of objects.\
\
A "Layer" is a Drawable which does nothing but contain other Drawables, a sort of sub-scene. The Layer can be repositioned, tinted, etc, and affect all the contained Drawables. Every Scene contains at least one top-level Layer, and that top-level Layer can contain others as well. Z-ordering of Drawables is independent of Layer ordering (except of course that Drawables contained in a Layer are offset by the Layer's Z value).\
\
\

\f0\b \ul Event System
\f1\b0 \ulnone \
\
Tiki V2 is based around the idea of events. Every thing that happens in a Tiki V2 program is driven by an event. The most common type of event in an animation-based scene will be timepoints on a timeline, but events can also be user key presses, mouse movements, etc. They could (and often would be) user defined occurrences as well.\
\
Events are described by Objective-C selectors.\
\
\

\f0\b \ul Marbol, as a Tiki V2 App
\f1\b0 \ulnone \
\
To show that this system works for real-life applications, I will describe how Marbol would be written with it, as it's currently written.\
\
First a static scene would be created with the background image (Drawable), playing board (Drawable), score and level display (Drawables), next-marble indicator (Drawable), and "beta" text (Drawable). Some other random assets would also be loaded: textures for the background and marbles, a font for the text drawables, the background music, and sound effects. All the Drawables would be added to the main scene Layer. A second Layer would be created to put marbles into.\
\
A music player Entity in the scene would be hooked up to the audio track asset and be set to start playing by a Timepoint at time zero.\
\
A model object Entity containing a diagram of how to move around the board (as it currently does), would be in the scene. It would also contain things like the player's score, level, the list of active marbles, etc.\
\
The Scene object's keyPress event output is attached to the model (or perhaps a separate controller object that interfaces the two for a cleaner design).\
\
A Timepoint placed at time zero in the Timeline would trigger a newPlayerPiece event on the model, which would in turn twiddle a couple of random things:\
\
- Create a new marble drawable with the right texture asset, and add it to the marble Layer.\
\
- Update the next-marble indicator with the next 3 marbles (event to next-marble indicator)\
\
- Set a Timepoint N millis later that will trigger a checkPieceFall event on itself.\
\
When pieceFall is triggered, the player piece will be moved downwards unless it's stuck where it is, in which case the appropriate things happen (score changes, etc).\
\
The model would set various other Timepoints on itself like checking for unsupported pieces falling, etc. These Timepoints would be moved up to the next interval as needed. If an actual piece fall was detected, the marbles in question would get movement animations added to them. And e.g. if a fall was detected then the user piece moving downwards would be shifted up by an interval, to avoid confusing the player.\
\
Key presses cause events to be sent to the model, where the appropriate actions will take place (moving the user piece back and forth or dropping it, etc).\
\
There's a little more to it, but it's all just more of the same.\
\
\

\f0\b \ul Build Plan (aka Rome wasn't built in a day, how do I keep from getting bored)
\f1\b0 \ulnone \
\
1. Verification that all this stuff would actually work and isn't pie in the sky BS. Message passing, at least basically, seems to be working. Should be all good.\
\
2. Verification that it's possible to port this stuff to Win32 and Linux later, at least for beta build testing. This isn't 100% yet but looks good based on quick tests.\
\
3. Basic design overview (this document). Need specifics now.\
\
4. Make basic Entity, Activity, Drawable, and Animation classes. These would be modeled on Tiki V1. Make sure it still works to build up a scene out of these.\
\
5. Make the basic Timeline class and modify the existing Tiki objects to use it. Make the basic Scene object which can emit keypress/mousemove events.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
-- EOF --\
}