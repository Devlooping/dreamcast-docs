{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fnil\fcharset2\fprq2 Wingdings;}{\f15\fmodern\fcharset0\fprq1 Fixedsys;}
{\f16\fmodern\fcharset255\fprq1 Terminal;}{\f17\froman\fcharset255\fprq2 Roman;}{\f18\fscript\fcharset255\fprq2 Script;}{\f19\fmodern\fcharset255\fprq2 Modern;}{\f20\fswiss\fcharset0\fprq2 Small Fonts;}{\f21\fswiss\fcharset0\fprq2 MS Dialog;}
{\f22\fswiss\fcharset0\fprq2 MS Dialog Light;}{\f23\fswiss\fcharset0\fprq2 MS SystemEx;}{\f24\fmodern\fcharset0\fprq1 Lucida Console;}{\f25\fswiss\fcharset0\fprq2 Arial Narrow;}{\f26\fnil\fcharset2\fprq2 Monotype Sorts;}
{\f27\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f28\froman\fcharset0\fprq2 Garamond;}{\f29\fswiss\fcharset0\fprq0  ;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\sl240\slmult0\widctlpar \f7\fs20 \snext0 Normal;}{\s1\sb240\sl240\slmult0\widctlpar \b\f7\ul \sbasedon0\snext0 heading 1;}{\s2\sb120\sl240\slmult0\widctlpar \b\f7 \sbasedon0\snext0 heading 2;}{\s3\li360\sl240\slmult0\widctlpar \b\f7 
\sbasedon0\snext17 heading 3;}{\s4\li360\sl240\slmult0\widctlpar \f7\ul \sbasedon0\snext17 heading 4;}{\s5\li720\sl240\slmult0\widctlpar \b\f7\fs20 \sbasedon0\snext17 heading 5;}{\s6\li720\sl240\slmult0\widctlpar \f7\fs20\ul \sbasedon0\snext17 heading 6;}
{\s7\li720\sl240\slmult0\widctlpar \i\f7\fs20 \sbasedon0\snext17 heading 7;}{\s8\li720\sl240\slmult0\widctlpar \i\f7\fs20 \sbasedon0\snext17 heading 8;}{\s9\li720\sl240\slmult0\widctlpar \i\f7\fs20 \sbasedon0\snext17 heading 9;}{\*\cs10 \additive 
Default Paragraph Font;}{\*\cs15 \additive\f0\fs16\up6\lang1033 \sbasedon10 footnote reference;}{\s16\sl240\slmult0\widctlpar \f7\fs20 \sbasedon0\snext16 footnote text;}{\s17\li720\sl240\slmult0\widctlpar \f7\fs20 \sbasedon0\snext17 Normal Indent;}{
\s18\fi-240\li480\sb80\sl240\slmult0\widctlpar\tx480 \f9 \sbasedon0\snext18 nscba;}{\s19\fi-240\li240\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext19 j;}{\s20\li480\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext20 ij;}{\s21\sb80\sa20\sl240\slmult0
\widctlpar \f9 \sbasedon0\snext21 btb;}{\s22\fi-240\li2400\sb20\sa20\sl240\slmult0\widctlpar \f9\fs20 \sbasedon0\snext22 ctcb;}{\s23\fi-240\li480\sa40\sl240\slmult0\widctlpar\tx480 \f9 \sbasedon0\snext23 ns;}{\s24\sa120\sl240\slmult0\widctlpar \f9\fs28 
\sbasedon0\snext24 TT;}{\s25\fi-240\li2400\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext25 crtj;}{\s26\fi-240\li480\sl240\slmult0\widctlpar\tx480 \f9 \sbasedon0\snext26 nsca;}{\s27\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext27 bt;}{
\s28\li240\sb120\sa40\sl240\slmult0\widctlpar \f9 \sbasedon0\snext28 Hf;}{\s29\li240\sb120\sa40\sl240\slmult0\widctlpar \f9 \sbasedon0\snext29 Hs;}{\s30\li480\sb120\sa40\sl240\slmult0\widctlpar \f9 \sbasedon0\snext30 RT;}{
\s31\fi-2160\li2160\sb240\sa80\sl240\slmult0\widctlpar\tx2160 \f9 \sbasedon0\snext31 c;}{\s32\li2160\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext32 ct;}{\s33\li240\sa20\sl240\slmult0\widctlpar \f9 \sbasedon0\snext33 it;}{\s34\li480\sl240\slmult0
\widctlpar \f9\fs20 \sbasedon0\snext34 nsct;}{\s35\fi-160\li400\sb80\sa40\sl240\slmult0\widctlpar \f9 \sbasedon0\snext35 nscb;}{\s36\fi-2640\li2880\sb120\sa40\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \tx2880 \f9 
\sbasedon0\snext36 HC2;}{\s37\fi-2640\li2880\sb120\sa20\sl240\slmult0\widctlpar\tx2880 \f9 \sbasedon0\snext37 C2;}{\s38\fi-240\li2400\sa20\sl240\slmult0\widctlpar \f7\fs20 \sbasedon0\snext38 ctc;}{\s39\li2160\sb160\sl240\slmult0\widctlpar \f9 
\sbasedon0\snext39 crt;}{\s40\li480\sb20\sa40\sl240\slmult0\widctlpar \f9 \sbasedon0\snext40 or;}{\s41\fi-259\li360\sb40\sa40\sl240\slmult0\widctlpar\tx360 \f7\fs20 \sbasedon0\snext41 Ln1;}{\s42\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 
\sbasedon0\snext0 *Intro;}{\s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \sbasedon3\snext42 *Title;}{\s44\fi-245\li360\sb80\nowidctlpar \f7\fs20 \snext44 *Jl;}{\s45\li360\sb40\sa40\nowidctlpar \f7\fs20 \snext0 Lp1;}{\s46\fi-1800\li1915\sb60\sl-240\slmult0
\widctlpar\tx1915 \f7\fs20 \sbasedon0\snext46 Tph;}{\s47\li115\sb120\sa80\nowidctlpar \b\f7\fs20 \snext41 Proch;}{\*\cs48 \additive\super \sbasedon10 endnote reference;}{\s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 \sbasedon0\snext49 h1;}{
\s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 \sbasedon0\snext50 Body Text;}{\s51\li115\sl-240\slmult0\widctlpar \f7\fs20 \sbasedon50\snext51 Popup Text;}{\s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 
\tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 \sbasedon50\snext53 th;}{\s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 \sbasedon0\snext53 tr;}{\s54\li115\sl240\slmult0\widctlpar \f3\fs20 \sbasedon50\snext54 Code;}{
\s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 \sbasedon50\snext56 nh;}{\s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 \sbasedon50\snext57 nb;}{\s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\sbasedon56\snext50 ne;}{\s58\fi-3600\li3715\sa80\sl240\slmult0\widctlpar\tx2995\tx3715 \f7\fs20 \sbasedon53\snext58 trl;}}{\*\revtbl {Unknown;}}{\info{\title AFXCORE}{\subject MFC Core RTF Help}{\author AFX}{\operator Mauricio Ordonez}{\creatim\yr1992\mo10\dy7\hr11\min4}
{\revtim\yr1996\mo6\dy7\hr22\min43}{\version3}{\edmins3}{\nofpages61}{\nofwords4485}{\nofchars25567}{\*\company Microsoft}{\vern57431}}\widowctrl\ftnbj\aenddoc\hyphcaps0 \fet0\sectd \linex576\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}
{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} main_index}}{\fs16  }NT Service {
\f5 Control}
\par \trowd \trgaph108\trleft-108 \cellx1663\cellx3434\cellx5205\cellx6976 \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\f5\fs18\uldb Properties}{\v  }{\v\f5\fs18 properties}{\fs18 \cell }{\fs18\uldb Methods}{\v  }{\v\fs18 methods}
{\fs18 \cell }{\fs18\uldb Events}{\v  }{\v\fs18 events}{\fs18 \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The {\b NTService}
 control enables an application to run as a Windows NT service. 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b NTService}
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The {\b NTService} control, invisible to the user, enables communications with the Windows NT services controller that is necessary for running as a service. The application can process {
\b Start}  and {\b Stop} events in response to system startup or administrator actions.
\par The control also provides functions for installing, uninstalling, event logging, and registry management.
\par Because Windows NT services can run without access to the desktop, you should ensure that the application does not require user input. You should detect all error conditions by placing {\b On Error} handlers in every event procedure.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} HID_HT_NOWHERE}}{\b No Help Available}
\par 
\par No help is available for this area of the window.
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} AFX_HIDP_default}} {\b No Help Available
\par }
\par No help is available for this message box.
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} properties}}NT Service Control Properties
\par \pard\plain \s38\fi-240\li2400\sa20\sl240\slmult0\widctlpar\intbl \f7\fs20 \cell \pard \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl {\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain 
\s45\li360\sb40\sa40\nowidctlpar \f7\fs20 {\b\uldb Account }{\uldb Property}{\v  Account}{\b\uldb 
\par ControlsAccepted }{\uldb Property}{\v  }{\v\uldb ControlsAccepted}
\par {\b\uldb Debug }{\uldb Property}{\v  Debug}
\par {\b\uldb Dependencies }{\uldb Property}{\v  Dependencies}
\par {\b\uldb DisplayName }{\uldb Property}{\v  DisplayName}
\par {\b\uldb Interactive }{\uldb Property}{\v  Interactive}{\b\uldb 
\par LoadOrderGroup }{\uldb Property}{\v  LoadOrderGroup}
\par {\b\uldb Password }{\uldb Property}{\v  Password}
\par {\b\uldb ServiceName }{\uldb Property}{\v  ServiceName}
\par {\b\uldb StartMode }{\uldb Property}{\v  StartMode}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} methods}}NT Service Control Methods
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18 \cell \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain \s45\li360\sb40\sa40\nowidctlpar \f7\fs20 {\b\uldb DeleteSetting }{\uldb Method}{\v 
 DeleteSetting}
\par {\b\uldb GetAllSettings }{\uldb Method}{\v  GetAllSettings}
\par {\b\uldb GetSetting }{\uldb Method}{\v  GetSetting}
\par {\b\uldb Install }{\uldb Method}{\v  Install}
\par {\b\uldb LogEvent }{\uldb Method}{\v  LogEvent}
\par {\b\uldb SaveSetting }{\uldb Method}{\v  SaveSetting}
\par {\b\uldb StartService }{\uldb Method}{\v  StartService}
\par {\b\uldb StopService }{\uldb Method}{\v  StopService}
\par {\b\uldb Uninstall }{\uldb Method}{\v  Uninstall}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} events}}NT Service Control Events
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18 \cell \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain \s45\li360\sb40\sa40\nowidctlpar \f7\fs20 {\b\uldb Continue }{\uldb Event}{\v 
 Continue}
\par {\b\uldb Control }{\uldb Event}{\v  Control}
\par {\b\uldb Pause }{\uldb Event}{\v  Pause}
\par {\b\uldb Start }{\uldb Event}{\v  Start}
\par {\b\uldb Stop }{\uldb Event}{\v  Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Account}}Account Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  AccountSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExAccount}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns or sets the account name which the service will be logged on when it runs.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.Account [= {\i account}]
\par The {\b Account} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i account}\tab a string expression specifying a domain account name
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i account} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 (None)\tab (Default) "LocalSystem" account.
\par (Account)\tab Specifies a domain account  name in the form of "DomainName\\Username"
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Services run in security contexts that are defined by domain accounts. If your service needs to access resources on the network or usses integrated security, you must specify an account.

\par Although you can set the {\b Account} property at design time, you typically would use it at run-time prior to installation. Typically, you present the user with form that lets them enter the account name and password.
\par If the account belongs to the built-in domain, ".\\Username" can be specified. If no account is specified, the service will be logged on as the "LocalSystem" account, in which case, the {\b Password} property must be blank.
\par If the service has a visible interface, you must leave {\b Account} empty and set {\b Interactive} to True.
\par \pard\plain \s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 {\b Note}\tab 
Once the service is installed, this property may not reflect the actual account being used by the service if the user manually changed the startup options in the Services Control Panel.
\par \pard\plain \s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} AccountSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Install}{\uldb  Method}{\v  Install}
\par {\b\uldb Interactive}{\uldb  Property}{\v  Interactive}{\uldb 
\par }{\b\uldb Password}{\uldb  Property}{\v  Password}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ControlsAccepted}}ControlsAccepted Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  ControlsAcceptedSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 
\row }\pard \sl240\slmult0\widctlpar 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Enables the service to process additional control signals like {\b Pause} and {\b Continue}.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.ControlsAccepted [= {\i controls}]
\par The {\b ControlsAccepted} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i controls}\tab Numeric expression that is the sum of values specifying control events that the service can process. If ommitted, the default value for {\i 
controls} is 0.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i controls} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Constant\tab \tab \tab Value\tab Description
\par \pard\plain \s58\fi-3600\li3715\sa80\sl240\slmult0\widctlpar\tx2995\tx3715 \f7\fs20 {\b svcCtrlStartStop}\tab 0\tab Enables {\b Start} and {\b Stop} events.
\par {\b svcCtrlPauseContinue}\tab 2\tab Enables the {\b Pause} and {\b Continue} events.
\par {\b svcCtrlShutdown}\tab 4\tab Enables shutdown events
\par (User Defined)\tab \tab Enables user defined events.
\par \pard\plain \s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 {\b Note}\tab These constants are defined in the {\b NTService} control. As a result, the names can be used in anywhere in you code in place of the actual values.
\par \pard\plain \s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 All services must process {\b Start} and {\b Stop} events, and you cannot disable notification for them. If your service can suspend processing, you can enable {\b Pause} and {\b Continue}
 event notification. Events other than {\b Start}, {\b Stop}, {\b Pause}, and {\b Continue} generate the generic {\b Control} event. The Services Control Panel does not have support for user defined event nofitication.
\par You must set the {\b ControlsAccepted} property prior to calling {\b StartService}. After the service has started, this property has no effect.
\par Shutdown events occurr when the system requests the service to perform cleanup tasks, because the system is shutting down. Due to extremely limited time available for shutdown, this control should only be used by services that absolutely need to shut down
. The system gives the services controller a limited amount of time (about 20 seconds) to complete service shutdown, after which time system shutdown proceeds regardless of whether service shutdown is complete.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} ControlsAcceptedSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Control}{\uldb  Event}{\v  Control}
\par {\b\uldb Pause}{\uldb  Event}{\v  Pause}
\par {\b\uldb Continue}{\uldb  Event}{\v  Continue}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Debug}}Debug Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  DebugSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStartService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Enables the service to run in the development environment or from the console.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Syntax
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b Debug} [= {\i boolean} ]
\par The {\b Debug} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i boolean}\tab A Boolean expression that specifies whether {\i object} should avoid initiating communication with the services controller.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Settings
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i boolean} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 True\tab Prevents {\i object} to communicate with the services controller.
\par False\tab (Default) Allows {\i object} to communicate with the services controller.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Remarks
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 To debug an application that uses the {\b NTService} control, you must set the {\b Debug} property to {\b True}
. On start-up, a Windows NT service communicates with the services controller to report its status, but when editing, the services controller is not available. 
\par If {\b Debug} is not set when running from the development environment, {\b StartService} will succeed, but the {\b Start} event will not fire.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} DebugSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Start}{\uldb  Event}{\v  Start}
\par {\b\uldb StartService}{\uldb  Method}{\v  StartService}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} LoadOrderGroup}}LoadOrderGroup Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  LoadOrderGroupSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExDependencies}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 
\row }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Names the load ordering group of which the service is a member{\b  
\par }\pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.LoadOrderGroup [= {\i group}]
\par The {\b LoadOrderGroup} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i group}\tab a string expression specifying the load order group.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i group} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 (None)\tab (Default) The service does not belong to a group.
\par (Group)\tab Load ordering group of which this service is a member. The registry has a list of load ordering groups located at: \line HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\ServiceGroupOrder.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The startup program uses this prop
erty to load groups of services in a specified order with respect to the other groups in the list. You can place a service in a group so that another service can depend on the group. 
\par The order in which a service starts is determined by the following criteria: 
\par {\pntext\pard\plain\f7\fs20 1.\tab}\pard \s50\fi-360\li475\sb80\sa80\sl240\slmult0\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}
The order of groups in the registry's load-ordering group list. Services in groups in the load-ordering group list are started first, followed by services in groups not in the load-ordering group list and then services that do not belong to a group. 

\par {\pntext\pard\plain\f7\fs20 2.\tab}The service's dependencies listed in the {\b Dependencies} property and the dependencies of other services dependent on the service. 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} LoadOrderGroupSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Dependencies}{\uldb  Property}{\v  Dependencies}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Dependencies}}Dependencies Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18 See Also\cell }{\fs18\uldb Example}{\v\fs18  ExDependencies}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain 
\s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Names services or load ordering groups that must start before this service.{\b 
\par }\pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.Dependencies [= {\i dependencies}]
\par The {\b Dependencies} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i dependencies}\tab A string expression containing names of services or load ordering groups.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i dependencies} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 (None)\tab (Default) The service does depend on any service or load order group.
\par (List)\tab Specifies the dependency list. The list must be a string expression of null-separated names of services or load ordering groups that must start before this service. The array is double null-terminated.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The startup program uses this list to load gro
ups of services in a specified order with respect to the other groups in the list. If your service depends on another service or group, you instruct the startup program to load those before loading your service. 
\par The order in which a service starts is determined by the following criteria: 
\par {\pntext\pard\plain\f7\fs20 1.\tab}\pard \s50\fi-360\li475\sb80\sa80\sl240\slmult0\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}
The order of groups in the registry's load-ordering group list. Services in groups in the load-ordering group list are started first, followed by services in groups not in the load-ordering group list and then services that do not belong to a group. 

\par {\pntext\pard\plain\f7\fs20 2.\tab}The service's dependencies listed in the {\b Dependencies} property and the dependencies of other services dependent on the service. 
\par \pard \s50\li115\sb80\sa80\sl240\slmult0\widctlpar If a group name is specified, it must be prefixed by the SC_GROUP_IDENTIFIER character ('+') to differentiate it from a service n
ame, because services and service groups share the same name space. Dependency on a service means that this service can only run if the service it depends on is running. Dependency on a group means that this service can run if at least one member of the g
roup is running after an attempt to start all members of the group.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} DependenciesSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb LoadOrderGroup}{\uldb  Property}{\v  LoadOrderGroup}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} DisplayName}}DisplayName Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  DisplayNameSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns or sets the string that is to be used by user interface programs to identify the service.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.DisplayName [= {\i name}]
\par The {\b DisplayName} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i name}\tab a string expression specifying the name to be displayed by user interface programs. This string has a maximum length of 255 characters.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 All services must include a {\b DisplayName}. 
\par The name is case-preserved in the service control manager. Display name comparisons are always case-insensitive.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} DisplayNameSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ServiceName}{\uldb  Property}{\v  ServiceName}
\par {\b\uldb Install}{\uldb  Method}{\v  Install}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Interactive}}Interactive Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  InteractiveSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExAccount}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Enables the service to interact with the desktop.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Syntax
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b Interactive} [= {\i boolean} ]
\par The {\b Interactive} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i boolean}\tab A Boolean expression that specifies whether {\i object} is allowed to interact with the desktop.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Settings
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i boolean} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 True\tab Allows the service to interact with the desktop.
\par False\tab (Default) Does not allow the service to interact with the desktop.
\par \pard\plain \s49\sb80\sl240\slmult0\widctlpar \b\f7\fs20 Remarks
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Only services that in the "LocalSystem" account are allowed to interact with the desktop.
\par You cannot depend on the service having access to the desktop because the user can prevent it by changing the startup setting in the Services Control Panel. As a general rule, services s
hould not depend on any user interaction. This includes handling all error conditions with {\b On Error} blocks to prevent error message boxes.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} InteractiveSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Account}{\uldb  Property}{\v  Account}
\par {\b\uldb Password}{\uldb  Property}{\v  Password}
\par {\b\uldb Install}{\uldb  Method}{\v  Install}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Password}}Password Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  PasswordSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExAccount}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns or sets the password for the account which the service will be logged on when it runs.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.Password [= {\i password}]
\par The {\b Password} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i password}\tab a string expression specifying the account password.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i password} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Setting\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 (None)\tab (Default) The service has no passoword.
\par (Password)\tab A password to the account specified in the {\b Account} property.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Although you can set the {\b Password}
 property at design time, you typically would use it at run-time prior to installation. Typically, you present the user with form that lets them enter the account name and password.
\par If the account is empty or it is set to "LocalSystem", you should leave {\b Password} empty.
\par \pard\plain \s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 {\b Note}\tab 
Once the service is installed, this property may not reflect the actual account being used by the service if the user manually changed the startup options in the Services Control Panel.
\par \pard\plain \s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} PasswordSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Account}{\uldb  Property}{\v  Account}
\par {\b\uldb Password}{\uldb  Property}{\v  Password}
\par {\b\uldb Install}{\uldb  Method}{\v  Install}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ServiceName}}ServiceName Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  ServiceNameSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns or sets the name of the service.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.ServiceName [= {\i name}]
\par The {\b ServiceName} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i name}\tab a string expression that names the service to install. This string has a maximum length of 255 characters. Forward-slash (/) and back-slash (\\
) are invalid service name characters.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 All services must include a {\b ServiceName}. 
\par The name is case-preserved in the service control manager. Display name comparisons are always case-insensitive.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} ServiceNameSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb DisplayName}{\uldb  Property}{\v  DisplayName}
\par {\b\uldb Install}{\uldb  Method}{\v  Install}
\par {\b\uldb LogEvent}{\uldb  Method}{\v  LogEvent}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} StartMode}}StartMode Property
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  StartModeSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns or sets when to start the service.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.StartMode [= {\i mode}]
\par The {\b StartMode} property syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715\tx8856 {\i mode}\tab Numeric expression that indicates when to start the service. If ommitted, the default value for {\i mode} is 2.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i mode} are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Constant\tab \tab \tab Value\tab Description
\par \pard\plain \s58\fi-3600\li3715\sa80\sl240\slmult0\widctlpar\tx2995\tx3715 \f7\fs20 {\b svcStartAutomatic}\tab 2\tab The service starts automatically during system startup
\par {\b svcStartManual}\tab 3\tab The serivice can be started on demand.
\par {\b svcStartDisabled}\tab 4\tab The {\f5 service that cannot be started.}
\par \pard\plain \s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 {\b Note}\tab These constants are defined in the {\b NTService} control. As a result, the names can be used in anywhere in you code in place of the actual values.
\par \pard\plain \s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Once the service has been installed, changing the {\b StartMode} property will have no effect on when the service is started.
\par 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} StartModeSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Install}{\uldb  Method}{\v  Install}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} DeleteSetting}}DeleteSetting Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  DeleteSettingSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExSettings}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Deletes a section or key setting from the Windows registry entry.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax} 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b DeleteSetting(}{\b\i section}[{\b , }{\b\i key}]{\b )
\par }The {\b DeleteSetting} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i section}\tab String expression containing the name of the section where the key setting is being deleted.  If only the section is provided, the specified section is deleted along with all related key settings.
\par {\i key}\tab String expression containing the name of the key setting being deleted.
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }If all arguments are provided, the specified key setting is deleted.  However, the DeleteSetting statement does nothing if the specified section or key setting does not exist.
\par This method differs form the {\b DeleteSetting} statement in Visual Basic because settings are saved in the registstry under:
\par HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\{\i ServiceName}. 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} DeleteSettingSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb GetAllSettings}{\uldb  Method}{\v  GetAllSettings}
\par {\b\uldb GetSetting}{\uldb  Method}{\v  GetSetting}
\par {\b\uldb SaveSetting}{\uldb  Method}{\v  SaveSetting}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} GetAllSettings}}GetAllSettings Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  GetAllSettingsSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExSettings}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns a list of key settings and their respective values from an application's Windows registry entry.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object}.{\b GetAllSettings(}{\b\i section}{\b )
\par }The {\b GetAllSettings} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i section}\tab 
String expression containing the name of the section whose key settings are requested.  GetAllSettings returns a Variant whose contents is a two-dimensional array of strings containing all the key settings in the specified section and their corresponding
 values.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 GetAllSettings returns an uninitialized Variant if either appname or section do not exist.
\par This method differs form the {\b GetAllSettings} statement in Visual Basic because settings are saved in the registstry under:
\par HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\{\i ServiceName}. 
\par 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} GetAllSettingsSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb DeleteSetting}{\uldb  Method}{\v  DeleteSetting}
\par {\b\uldb GetSetting}{\uldb  Method}{\v  GetSetting}
\par {\b\uldb SaveSetting}{\uldb  Method}{\v  SaveSetting}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} GetSetting}}GetSetting Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  GetSettingSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExSettings}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Returns a key setting value from an application's Windows registry entry.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b GetSetting(}{\b\i section}{\b , }{\b\i key}[{\b , }{\b\i default}]{\b )}
\par The {\b GetSetting} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i section}\tab String expression containing the name of the section where the key setting is found.
\par {\i key}\tab String expression containing the name of the key setting to return.
\par {\i default}\tab Expression containing the value to return if no value is set in the key setting.  If omitted, default is assumed to be a zero-length string ("").
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 If any of the items named in the GetSetting arguments do not exist, GetSetting returns the value of default.
\par This method differs form the {\b GetSetting} statement in Visual Basic because settings are saved in the registstry under:
\par HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\{\i ServiceName}. 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} GetSettingSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb DeleteSetting}{\uldb  Method}{\v  DeleteSetting}
\par {\b\uldb GetAllSettings}{\uldb  Method}{\v  GetAllSettings}
\par {\b\uldb SaveSetting}{\uldb  Method}{\v  SaveSetting}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Install}}Install Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  InstallSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Installs a service and adds it to the services controller database
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b Install}
\par The {\b Install} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Prior to installing the service, you should set properties that define how the service is configured. At a minimum, these are: {\b DisplayName}, {\b ServiceName}, {\b ControlsAccepted}
, and {\b StartMode}.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} InstallSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Account }{\uldb Property}{\v  Account}
\par {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Debug }{\uldb Property}{\v  Debug}
\par {\b\uldb Dependencies }{\uldb Property}{\v  Dependencies}
\par {\b\uldb DisplayName }{\uldb Property}{\v  DisplayName}
\par {\b\uldb Interactive }{\uldb Property}{\v  Interactive}
\par {\b\uldb LoadOrderGroup }{\uldb Property}{\v  LoadOrderGroup}
\par {\b\uldb Password }{\uldb Property}{\v  Password}
\par {\b\uldb ServiceName }{\uldb Property}{\v  ServiceName}
\par {\b\uldb StartMode }{\uldb Property}{\v  StartMode}
\par {\b\uldb Uninstall }{\uldb Method}{\v  Uninstall}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} LogEvent}}LogEvent Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  LogEventSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStopService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Writes an entry at the end of the application event log. {\fs24 
\par }\pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b LogEvent (}{\b\i event}{\b , }{\b\i id}{\b , }{\b\i message}{\b )}
\par The {\b Install} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i event}\tab The type of event being logged.
\par {\i id}\tab The event identifier. The identifier specifies the message asociated with the event
\par {\i message}\tab Additional message information that is written with the event.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Settings}
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i event} {\i  }are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Constant\tab \tab \tab Value\tab Description
\par \pard\plain \s58\fi-3600\li3715\sa80\sl240\slmult0\widctlpar\tx2995\tx3715 \f7\fs20 {\b svcEventError}\tab 1\tab Error event.
\par {\b svcEventWarning}\tab 2\tab Warning event.{\f5 
\par }{\b svcEventInformation}\tab 4\tab Information event{\f5 .
\par }{\b svcEventAuditSuccess}\tab 8\tab Audit success event{\f5 .
\par }{\b svcEventAuditFailure}\tab 10\tab Audit failure event{\f5 .
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The settings for {\i id }are:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Constant\tab \tab \tab Value\tab Description
\par \pard\plain \s58\fi-3600\li3715\sa80\sl240\slmult0\widctlpar\tx2995\tx3715 \f7\fs20 {\b svcMessageDebug}\tab 108\tab Debugging message
\par {\b svcMessageError}\tab 109\tab Error message{\f5 
\par }{\b svcMessageInfo}\tab 110\tab Information message{\f5 
\par }\pard\plain \s55\li115\sa80\sl-80\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \s56\li115\sa80\sl40\slmult0\widctlpar \f7\fs20 {\b Note}\tab These constants are defined in the {\b NTService} control. As a result, the names can be used in anywhere in you code in place of the actual values.
\par \pard\plain \s57\li115\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f7\fs20 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This method is used to log an event. The entry is written to the end of the application logfile with the {\b ServiceName} as the source. The {\b LogEvent}
 method adds the time, the user name before storing the entry in the log.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} LogEventSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ServiceName }{\uldb Property}{\v  ServiceName}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} SaveSetting}}SaveSetting Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  SaveSettingSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExSettings}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Saves or creates an application entry in the Windows registry entry.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b SaveSetting(}{\b\i section}{\b , }{\b\i key}{\b , }{\b\i setting}{\b )
\par }The {\b SaveSetting} statement syntax has these named arguments:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i section}\tab String expression containing the name of the section where the key setting is being saved.
\par {\i key}\tab String expression containing the name of the key setting being saved.
\par {\i setting}\tab Expression containing the value that key is being set to.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 An error occurs if the key setting could not be saved for any reason.
\par This method differs form the {\b SaveSetting} statement in Visual Basic because settings are saved in the registstry under:
\par HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\{\i ServiceName}. 
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} SaveSettingSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb DeleteSetting }{\uldb Method}{\v\uldb  }{\v DeleteSetting}
\par {\b\uldb GetAllSettings }{\uldb Method}{\v\uldb  }{\v GetAllSettings}
\par {\b\uldb GetSetting }{\uldb Method}{\v\uldb  }{\v GetSetting}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} StartService}}StartService Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  StartServiceSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStartService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 
\row }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Connects the service to the services controller.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b StartService}
\par The {\b StartService} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 When the services controller starts a service process, it waits for the process to connect back to it.The service control manager uses this connection to send control and service {\b Start
} requests to the the service process.
\par When running in the development environment or from the console, the services controller will not be available. In those situations, you must set the {\b Debug} property to enable firing of the {\b Start} event
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} StartServiceSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Debug }{\uldb Property}{\v  Debug}
\par {\b\uldb StopService }{\uldb Method}{\v\uldb  }{\v StopService}
\par {\b\uldb Pause }{\uldb Event}{\v\uldb  }{\v Pause}
\par {\b\uldb Start }{\uldb Event}{\v\uldb  }{\v Start}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} StopService}}StopService Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  StopServiceSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStopService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Stops a running service and notifies the services controller.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b StopService}
\par The {\b StopService} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 To programatically stop a service, you can call the {\b StopService}
 method. The user can also stop the service manually with the Services Control Panel. In that case, you do not need to call this method.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} StopServiceSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb StartService }{\uldb Method}{\v\uldb  }{\v StartService}
\par {\b\uldb Stop }{\uldb Event}{\v\uldb  }{\v Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Uninstall}}Uninstall Method
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  UninstallSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStartService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Uninstalls a service and removes it from the services controller database
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax 
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\i object.}{\b Uninstall}
\par The {\b Uninstall} method syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 The database entry is not removed until the service is not running. A running service is stopped with the
 stop control code. If the service cannot be stopped, the database entry is removed when the system is restarted. {\fs24 
\par }The service controller deletes the service by deleting the service key and its subkeys from the registry. {\fs24 
\par }\pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} UninstallSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb Install }{\uldb Method}{\v\uldb  }{\v Install}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Continue}}Continue Event
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  ContinueSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Occurs when the services controller notifies the service that the user or another program has requested the service to continue processing.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Private Sub }{\i object}{\b _Continue(}{\i success}{\b  as Boolean)
\par }The {\b Continue} event syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i success}\tab A boolean. Setting this argument to any value other than 0 informs the services controller that the event was handled successfully.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Use this event procedure to resume processing by your service. To enable receiving {\b Continue} events, the {\b ControlsAccepted} property must include {\b svcCtrlPauseContinue}
 as one of the composite values.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} ContinueSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Continue }{\uldb Event}{\v\uldb  }{\v Continue}
\par {\b\uldb Pause }{\uldb Event}{\v\uldb  }{\v Pause}
\par {\b\uldb Start }{\uldb Event}{\v\uldb  }{\v Start}
\par {\b\uldb Stop }{\uldb Event}{\v\uldb  }{\v Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Control}}Control Event
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  ControlSee}{\fs18 \cell Example\cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0
\widctlpar \f7\fs20 Occurs when the services controller notifies the service of shutdown or user defined events.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Private Sub }{\i object}{\b _Control(}{\i event}{\b  as Long)
\par }The {\b Control} event syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i event}\tab A long integer. This parameter specifies the event that occurred.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Use this event procedure to recive user defined event notifications. To enable receiving {\b Control} events, the {\b ControlsAccepted} property must include a value that corresponds to {
\i event} as one of the composite values.
\par Other than {\b svcCtrlShutdown}, there is support for generating the events in the Services Control Panel or in the {\b NTService} control. Signaling these events would have to be peformed by a custom program.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} ControlSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Continue }{\uldb Event}{\v\uldb  }{\v Continue}
\par {\b\uldb Control }{\uldb Event}{\v\uldb  }{\v Control}
\par {\b\uldb Pause }{\uldb Event}{\v\uldb  }{\v Pause}
\par {\b\uldb Start }{\uldb Event}{\v\uldb  }{\v Start}
\par {\b\uldb Stop }{\uldb Event}{\v\uldb  }{\v Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Pause}}Pause Event
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  PauseSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExInstallation}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Occurs when the services controller notifies the service that the user or another program has requested the service to suspend processing.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Private Sub }{\i object}{\b _Pause(}{\i success}{\b  as Boolean)
\par }The {\b Pause} event syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i success}\tab A boolean. Setting this argument to any value other than 0 informs the services controller that the event was handled successfully.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Use this event procedure to suspend processing by your service. To enable receiving {\b Pause} events, the {\b ControlsAccepted} property must include {\b svcCtrlPauseContinue}
 as one of the composite values.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} PauseSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Continue }{\uldb Event}{\v\uldb  }{\v Continue}
\par {\b\uldb Start }{\uldb Event}{\v\uldb  }{\v Start}
\par {\b\uldb Stop }{\uldb Event}{\v\uldb  }{\v Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Start}}Start Event
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  StartSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStartService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Occurs when the services controller notifies the service that the user or another program has requested the service to start.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Private Sub }{\i object}{\b _Start(}{\i success}{\b  as Boolean)
\par }The {\b Start} event syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par {\i success}\tab A boolean. Setting this argument to any value other than 0 informs the services controller that the event was handled successfully.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Use this event procedure to initiate processing by your service. If your service was able to perform its intialization operation, you must set the {\i success}
 parameter to True. Otherwise, the services controller will report an error.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} StartSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb Debug }{\uldb Property}{\v  Debug}
\par {\b\uldb StartService }{\uldb Method}{\v\uldb  }{\v StartService}
\par {\b\uldb Stop }{\uldb Event}{\v\uldb  }{\v Stop}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} Stop}}Stop Event
\par \pard\plain \s38\li115\sa20\sl240\slmult0\keepn\widctlpar\intbl \f7\fs20 {\fs18\ul See Also}{\v\fs18  StopSee}{\fs18 \cell }{\fs18\uldb Example}{\v\fs18  ExStartService}{\fs18 \cell \cell \cell }\pard\plain \widctlpar\intbl \f7\fs20 {\f9\fs18 \row 
}\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Occurs when the services controller notifies the service that the user or another program has requested the service to stop.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Syntax
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 {\b Private Sub }{\i object}{\b _Stop()
\par }The {\b Stop} event syntax has these parts:
\par \pard\plain \s52\li115\sb80\sa80\sl240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1555\tx2275\tx2995\tx3715 \b\f7\fs20 Part\tab Description
\par \pard\plain \s53\fi-1440\li1555\sa80\sl240\slmult0\widctlpar\tx1555\tx2275\tx2995\tx3715 \f7\fs20 {\i object}\tab An object expression that evaluates to an {\b NTService} object.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\b Remarks
\par }\pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 Use this event procedure to close your service.
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \s16\sl240\slmult0\widctlpar \f7\fs20 {\cs15\f0\fs16\up6 #} StopSee}}{\b See Also}
\par \pard\plain \s51\li115\sl-240\slmult0\widctlpar \f7\fs20 {\b\uldb ControlsAccepted }{\uldb Property}{\v  ControlsAccepted}
\par {\b\uldb StopService }{\uldb Method}{\v\uldb  }{\v StopService}
\par {\b\uldb Start }{\uldb Event}{\v\uldb  }{\v Start}
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExStartService}}StartService Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example starts the service and shows trivial start and stop event handlers.
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 
\par Private Sub Form_Load()
\par     Dim bStarted As Boolean
\par 
\par     If Command = "-install" Then
\par         If NTService1.{\cf6 Install} Then
\par             ' Save default service settings in registry
\par             NTService1.SaveSetting "Parameters", "Interval", "1000"
\par             MsgBox NTService1.DisplayName & " installed successfully"
\par         Else
\par             MsgBox NTService1.DisplayName & " failed to install"
\par         End If
\par         End
\par 
\par     ElseIf Command = "-uninstall" Then
\par         If NTService1.{\cf6 Uninstall} Then
\par             MsgBox NTService1.DisplayName & " uninstalled successfully"
\par         Else
\par             MsgBox NTService1.DisplayName & " failed to uninstall"
\par         End If
\par         End
\par 
\par     ElseIf Command = "-debug" Then
\par         NTService1.{\cf6 Debug} = True
\par 
\par     ElseIf Command <> "" Then
\par         MsgBox "Invalid command option"
\par         End
\par     End If
\par     
\par     ' Get service settings from registry
\par     Timer.Interval = CInt(NTService1.GetSetting("Parameters", _
\par         "Interval", "2000"))
\par 
\par     NTService1.{\cf6 StartService}
\par     
\par End Sub
\par 
\par 
\par Private Sub NTService1_Start(Success As Boolean)
\par     Success = True
\par End Sub
\par 
\par 
\par Private Sub NTService1_Stop()
\par     Unload Me
\par End Sub
\par 
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExInstallation}}Installation Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example installs a service that starts automatically and supports of Pause and Continue events
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 
\par Private Function InstallService() as Boolean
\par 
\par     NTService1.{\cf6 ServiceName} = "MyService"
\par     NTService1.{\cf6 DisplayName} = "My Service"
\par     NTService1.{\cf6 StartMode} = 2          'svcStartAutomatic
\par     NTService1.{\cf6 ControlsAccepted} = 2   'svcCtrlPauseContinue
\par 
\par     If NTService1.{\cf6 Install} Then
\par         ' Save default service settings in registry
\par         NTService1.SaveSetting "Parameters", "Interval", "1000"
\par         InstallService = True
\par     Else
\par         InstallService = False
\par     End If
\par End Function
\par 
\par 
\par Private Sub NTService1_Continue(Success As Boolean)
\par     Timer.Enabled = True
\par     Success = True
\par End Sub
\par 
\par 
\par Private Sub NTService1_Pause(Success As Boolean)
\par     Timer.Enabled = False
\par     Success = True
\par End Sub
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExAccount}}Account Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example installs a service to log on as an account or interactively.
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 
\par Private Function InstallService(Interactive as Boolean) as Boolean
\par     Dim sAccount as String
\par     Dim sPassword as String
\par     
\par 
\par     If Interactive Then
\par         ' Prompt user for account and password
\par         Call GetAccountAndPassword (sAccount, sPassword)
\par         NTService1.{\cf6 Account} = sAccount
\par         NTService1.{\cf6 Password} = sPassword
\par         NTService1.{\cf6 Interactive} = False
\par     Else
\par         NTService1.{\cf6 Interactive} = True
\par     End If
\par 
\par     If NTService1.{\cf6 Install} Then
\par         InstallService = True
\par     Else
\par         InstallService = False
\par     End If
\par End Function
\par 
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExDependencies}}Dependencies Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example installs a service with dependencies.
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 
\par Private Function InstallService() as Boolean
\par     Dim sDepend as String
\par     
\par     sDepend = "OLE" + Chr(0)                    'depends on OLE
\par     sDepend = sDepend + "MSSQLServer" + Chr(0)  'depends on SQL
\par     sDepend = sDepend + Chr(0)                  'terminates list
\par 
\par     NTService1.{\cf6 LoadOrderGroup} = ""   'does not belong to a group
\par     NTService1.{\cf6 Dependencies} = sDepend
\par 
\par     If NTService1.{\cf6 Install} Then
\par         InstallService = True
\par     Else
\par         InstallService = False
\par     End If
\par End Function
\par 
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExSettings}}Settings Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example saves and gets registry settings.
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 
\par ' Variant to hold 2-dimensional array returned by GetAllSettings.
\par Dim Folders As Variant
\par 
\par ' Place some settings in the registry.
\par NTService1.{\cf6 SaveSetting}("Parameters", "TimerInterval", 1000)
\par NTService1.SaveSetting("Parameters\\Folders", "hr", 50)
\par NTService1.SaveSetting("Parameters\\Folders", "finance", 45)
\par NTService1.SaveSetting("Parameters\\Folders", "is", 60)
\par 
\par Debug.Print NTService1.{\cf6 GetSetting}("Parameters", _
\par                 "TimerInterval", "2000")
\par Folders = NTService1.{\cf6 GetAllSettings}("Parameters\\Foldes")
\par 
\par NTService1.{\cf6 DeleteSetting}("Parameters")
\par \pard\plain \s43\sb80\sl240\slmult0\keepn\widctlpar \b\f7 \page {\cs15\f0\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \f7\fs20 {\cs15\b\f0\fs16\up6 #} ExStopService}}Stop Service Example
\par \pard\plain \sl240\slmult0\widctlpar \f7\fs20 
\par \pard\plain \s50\li115\sb80\sa80\sl240\slmult0\widctlpar \f7\fs20 This example stops the service on a fatal error and logs the error to the event log.
\par 
\par \pard\plain \s54\li115\sl240\slmult0\widctlpar \f3\fs20 Private Sub NTService1_Continue(Success As Boolean)
\par On Error Goto Err_Continue
\par    'Continue the service
\par    ...
\par 
\par Err_Continue:
\par     Success = False
\par     NTService1.{\cf6 LogEvent}(svcEventError, svcMessageError, _
\par        "A fatal error occurred")
\par     NTService1.{\cf6 StopService}
\par End Sub
\par }