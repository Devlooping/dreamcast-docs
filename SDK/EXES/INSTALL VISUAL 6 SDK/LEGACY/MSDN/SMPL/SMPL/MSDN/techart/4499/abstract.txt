HOTEL: Demonstrates an OLE Callback Model in Visual 
Basic
The HOTEL sample demonstrates an OLE callback model. The negotiative or callback model 
provides a way of refreshing data in a control on a form when a function is called in an OLE 
object. Using Microsoft(R) Visual Basic(R) version 4.0, HOTEL compiles the ROOMMGR and 
REGISTER executable files.
This sample is modeled on the concept of a hotel registration desk. There may be any number 
of registration clerks checking in guests at individual workstations. If a room is not available 
because of maintenance, for example, this information needs to be conveyed to all registration 
clerks to ensure that no guests are placed in this room.
In HOTEL's callback model, each workstation provides a centralized Room Manager server 
component with its callback interface, Notify. The interface is nothing more than a specification 
of usage and behavior--a predefined set of methods or properties. In the Register application, 
the Notify class consists of two member methods that make up its contract, or operating 
agreement, with the Room Manager.
The Room Manager server uses the Shutdown method to tell clients to shut down in a given 
number of seconds. The real work in the Notify interface is done by the Refresh method, which 
takes two arguments: a type specification for the data it receives, and a generic variant 
containing the data. The variant can contain either a single value or an array of values, known in 
the OLE world as a SAFEARRAY. The type argument is used to determine what format is 
contained in the variant structure and to process it accordingly. When the Register application 
connects to the Room Manager server, it uses the Notify.Refresh method to tell the client about 
each of the rooms sequentially.
HOTEL also embodies a simple example of the mechanics of the run-time binding model within 
the Room Manager server. You can select the Prime Hours in Effect check box in the Room 
Manager interface to change the logic that the Room Manager applies whenever any client 
updates the status of a room. In fact, a notification interface can be a very useful, reusable 
design for easily exchanging information between any two components.
To run the HOTEL sample, you must first run the ROOMMGR.EXE server to allow it to register 
itself. You will also need to do this on the server if you are using OLE remote automation, and 
you must configure ROOMMGR at each client, using the remote automation Connection 
Manager utility that comes with the Enterprise Edition of Visual Basic.
After ROOMMGR has registered itself, it can either be left running, or it will be automatically 
started when the first REGISTER.EXE client attaches to it.
To fully appreciate the value of the interactive model in HOTEL, you should run multiple 
REGISTER clients and note how changing the status on any given room is automatically 
reflected across all other running clients simultaneously. For comprehensive information about 
the OLE callback model, see the "Building OLE Automation Service Components in Visual 
Basic and Visual C++" technical article by David George, also available in the Microsoft 
Development Library.
The HOTEL sample was built with the Enterprise Edition of Microsoft Visual Basic version 4.0 
and tested on Microsoft Windows NT(TM) version 3.51.
KEYWORDS: CD14; callback; OLE



