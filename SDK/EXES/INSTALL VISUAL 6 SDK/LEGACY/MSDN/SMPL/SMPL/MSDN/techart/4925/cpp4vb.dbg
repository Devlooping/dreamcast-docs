Before: 
   In parameter: Send me in
   In/Out parameter: I'm going in...
   Out parameter: 
   Return value: 
After: 
   In parameter: Send me in
   In/Out parameter: ...send me back
   Out parameter: Out of the fire
   Return value: 
Test length and resize:
sTmp = _W("Yo!"); // sTmp=="Yo!", sTmp.Length()==3
sTmp.Resize(20);  // sTmp=="Yo!", sTmp.Length()==20, sTmp.LengthZ()==3
sTmp.ResizeZ();   // sTmp=="Yo!", sTmp.Length()==3

Test Empty, Nullify, IsEmpty, and IsNull:
sTmp = "Empty";   // sTmp=="Empty",sTmp.IsEmpty==0, sTmp.IsNull==0
sTmp.Empty();     // sTmp=="",sTmp.IsEmpty==1, sTmp.IsNull==0
sTmp.Nullify();   // sTmp=="",sTmp.IsEmpty==1, sTmp.IsNull==1

Test logical operators:
sTmp=="", sNarrow=="Narrow", sWide=="Wide"
(sTmp == BNULL)==1
(sTmp == _B(""))==1
(sNarrow == sWide)==0
(sNarrow == _B("Narrow"))==1
(_B("Narrow") == sNarrow)==1
(sNarrow != sWide)==1
(sNarrow < sWide)==1
(sNarrow <= sWide)==1
(sNarrow > sWide)==0
(sNarrow >= sWide)==0

Test indexing:
sWide=="Wide", i==2, wch=='n'
sWide[i] = wch;     // sWide=="Wine"
wch = sWide[i - 1]; // wch=='i'
sWide[0] = 'F';     // sWide=="Fine"

Test concatenation:
sChar=="A", sIn=="Send me in"
sChar += sIn;        // sChar=="ASend me in"
sChar += WCHAR('F'); // sChar=="ASend me inF"
sChar += 'G';        // sChar=="ASend me inFG"
sChar += _W("Wide"); // sChar=="ASend me inFGWide"
sChar += "Narrow";   // sChar=="ASend me inFGWideNarrow"
sTmp = sNarrow + sNative + _W("Slow") + "Fast" + WCHAR('C') + 'D'
// sTmp=="NarrowNativeSlowFastCD"

Test substrings:
sChar = sTmp.Mid(7, 6); // sChar=="Native"
sChar = sTmp.Mid(7);    // sChar=="NativeSlowFastCD"
sChar = sTmp.Left(6);   // sChar=="Narrow"
sChar = sTmp.Right(6);  // sChar=="FastCD"

Test transformations:
sWide=="Fine"
sWide.UCase();          // sWide=="FINE"
sWide.LCase();          // sWide=="fine"
sWide.Reverse();        // sWide=="enif"
sChar = UCase(sWide);   // sChar=="ENIF", sWide=="enif"
sChar = LCase(sWide);   // sChar=="enif", sWide=="enif"
sChar = Reverse(sWide); // sChar=="fine", sWide=="enif"

Test trimming:
sChar = Trim(sTmp);     // sChar=="Stuff", sTmp=="   	 Stuff  	 "
sTmp.Trim();            // sTmp=="Stuff"

Test character and string find:
// sTmp="A string In a String in a String in a string."
//      "12345678901234567890123456789012345678901234567890"
i = sTmp.Find('S');                                // Found at position: 15
i = sTmp.Find('S', ffReverse);                     // Found at position: 27
i = sTmp.Find('S', ffIgnoreCase);                  // Found at position: 3
i = sTmp.Find('S', ffReverse | ffIgnoreCase);      // Found at position: 39
i = sTmp.Find('Z');                                // Found at position: 0
i = sTmp.Find("String");                           // Found at position: 15
i = sTmp.Find("String", ffReverse);                // Found at position: 27
i = sTmp.Find("String", ffIgnoreCase);             // Found at position: 3
i = sTmp.Find("String", ffIgnoreCase | ffReverse); // Found at position: 39
i = sTmp.Find("Ztring");                           // Found at position: 0


