VTBLBIND: Implements VTBL Binding by OLE Automation 
Interfaces
The VTBLBIND sample illustrates how to create a Component Object Model (COM) interface 
that uses OLE Automation standard marshalling. The sample also illustrates how to create a 
type library that describes the COM interface, and how to register that interface so that OLE 
Automation will marshal it. VTBLBIND also compiles the CLIENT and SERVER executables. 
These programs use the OLE Automation marshaller to package method arguments for 
transmission to a remote process.
A COM interface can be marshalled using the standard marshaller provided by OLE 
Automation. This OLE Automation marshaller can marshal any custom interface described by a 
type library that uses OLE Automation-compatible data types. The type library implements OLE 
Automation's VTBL binding. VTBL binding is the mechanism that a COM interface client uses to 
bind to the implementation of the COM interface in the server.
To run the sample, you need to first register the server by running SERVER.EXE 
/REGSERVER. Running CLIENT.EXE creates the SERVER instance, which will display the 
string "Hello Universe" seven times at coordinates specified by the client. The client will then 
pause for 10 seconds, shutting down the server when it releases its last reference. The client 
will then shut down.
Note that you must have the Microsoft(R) Win32(R) Software Development Kit (SDK) installed 
on your computer to build the VTBLBIND sample. To build this sample, follow these steps:
1.  Ensure that your MSTOOLS environment variable points to the root of your Win32 SDK 
directory (typically C:\MSTOOLS).
2.  Compile COMMON first, because VTBLBIND relies on the COMMON sample found in the 
SAMPLES\OLE\COMMON directory of the Win32 SDK.
3.  Build the makefile in the SERVER directory. This will run the MKTYPLIB.EXE tool and 
compile SERVER.ODL in the SERVER.TLB type library. MKTYPLIB will also generate the 
IVTBLSERVER.H file that will contain a C/C++ declaration of the custom interface and the 
globally unique identifiers (GUIDs) of the interface and the server. The makefile will then 
compile SERVER.EXE.
4.  After you have built SERVER.EXE, copy IVTBLSERVER.H to the CLIENT directory. The 
client will use the information in IVTBLSERVER.H to create the server instance and call 
methods in the IVTBLSERVER interface.
5.  Build the makefile in the CLIENT directory to compile CLIENT.EXE.
Note that NMAKE with no options will build a 32-bit ANSI sample that will run on Microsoft 
Windows(R) 95 or Windows NT(TM) version 3.5x, whereas NMAKE HOST=NT will build a 32-
bit Unicode(TM) sample that will run only on Windows NT.
For comprehensive information about VTBLBIND, see the "Taking Advantage of the OLE 
Automation Marshaller" technical article by Vinoo Cherian in the Microsoft Development Library.
The VTBLBIND sample was built with Microsoft Visual C++(TM) version 2.2 and the Microsoft 
Win32 SDK, and tested on Windows 95 and Windows NT version 3.51.
CLIENT KEYWORDS: CD14; CoCreateInstance; OleInitialize; OleUninitialize; Sleep; memcpy; 
printf
SERVER KEYWORDS: CD14; CoLockObjectExternal; CoRegisterClassObject; 
CoRevokeClassObject; DispatchMessage; GetMessage; GetModuleFileName; 
GetModuleHandle; GetStdHandle; IClassFactory::CreateInstance; IClassFactory::LockServer; 
IUnknown::AddRef; IUnknown::QueryInterface; LoadString; MultiByteToWideChar; OleInitialize; 
OleUninitialize; PostQuitMessage; RegCreateKey; RegSetValue; SetConsoleCursorPosition; 
TranslateMessage; WideCharToMultiByte; WriteConsole; lstrlen; memcpy; printf; wsprintf



