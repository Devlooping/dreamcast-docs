
PORTTOOL: Ports Applications to Win32
PORTTOOL version 2.2 is a 32-bit application for
Microsoft(R) Windows(R) that helps developers port their
existing applications to Win32(R). PORTTOOL's primary
interface closely resembles the Windows Notepad applet. As
with Notepad, this interface can be used to edit files, one
file at a time.
PORTTOOL also lets you select any available system font for
the edit environment. For example, you can select a
monospaced font to edit source code.
To port a file using PORTTOOL, choose Interactive from the
Port menu. Starting from the top of the current file,
PORTTOOL searches each line for substrings that match the
predefined port tokens. When it finds a token in a line,
PORTTOOL pauses, displays the line with the offending token
highlighted, and offers an explanation of the porting
problem.
At this point, you can choose one of the following options:
>  Edit the source file in the editor environment
immediately. Notice that the offending line is automatically
scrolled into view at the top of the editor window behind
the porting dialog box.
>  Call context-sensitive Help on this porting issue.
>  Change one or more porting options.
>  Restart the port from the top of the file, using the
appropriate options.
>  Resume porting the file where it left off.
>  Exit the porting process.
PORTTOOL also lets you port one or more files in the
background while you work on something else. You can call
this feature either from the PORTTOOL editor or directly
from the command line by using the /B (or /b) switch. When
PORTTOOL finds a token while porting in the background, it
inserts comments into the source code at the token location.
These comments identify the token, describe the porting
issue, and suggest a possible fix, if available.
PORTTOOL reads in a data file (WIN32API.DAT) to initialize
its porting information. This data file looks like a
standard Windows .INI file and can be customized. You can
add, delete, or modify specific porting issues. You can also
add tokens to the file to search for other substrings.
PORTTOOL consists of an executable and a dynamic-link
library (DLL) called PORT.DLL. You must build the .DLL file
before building the .EXE file. Any application can call the
DLL to perform porting, so a developer can make this
functionality available from within another editor on a line-
by-line basis. The PORT.H file documents the exported
CheckString function and its parameters. This function is
the single entry point necessary to port a given string.
For more information on PORTTOOL, see the "Porting 16-Bit
Windows Applications to Win32"msdn_porting technical article
in the Microsoft Development Library.
PORTTOOL is a Microsoft(R) Win32(R) Software Development Kit
(SDK) sample. It was built with this SDK and Microsoft
Visual C++(TM) version 2.1, and tested under Microsoft
Windows NT(TM) version 3.51.
KEYWORDS: CD12; AbortProc; AttachThreadInput; CharLower;
CheckDlgButton; CheckMenuItem; ChooseFont; CloseClipboard;
CloseHandle; CommDlgExtendedError; CreateDialog;
CreateDialogParam; CreateEvent; CreateFile;
CreateFileMapping; CreateFont; CreateFontIndirect;
CreateThread; CreateWindow; DebugBreak; DefWindowProc;
DeleteDC; DeleteObject; DestroyWindow; DialogBox;
DialogBoxParam; DispatchMessage; EnableMenuItem;
EnableWindow; EndDialog; EndDoc; EndPage; ExitProcess;
FindText; GetClassLong; GetClientRect; GetCurrentDirectory;
GetCurrentThread; GetCurrentThreadId; GetDeviceCaps;
GetDlgItem; GetFileSize; GetFocus; GetLastError; GetMenu;
GetModuleFileName; GetModuleHandle; GetObject;
GetOpenFileName; GetParent; GetPrivateProfileString;
GetSaveFileName; GetStockObject; GetSystemMetrics;
GetSystemTime; GetTextExtentPoint; GetWindowLong;
GetWindowRect; GetWindowText; GetWindowTextLength;
GetWindowThreadProcessId; GetWindowWord;
GetWindowsDirectory; GlobalAlloc; GlobalFree; GlobalLock;
GlobalMemoryStatus; GlobalReAlloc; GlobalUnlock; HIBYTE;
HIWORD; HeapAlloc; HeapCreate; HeapDestroy; HeapFree;
InvalidateRect; IsClipboardFormatAvailable; IsDialogMessage;
IsDlgButtonChecked; IsWindow; IsWindowVisible; LOBYTE;
LOWORD; LoadCursor; LoadIcon; LoadString; LocalAlloc;
LocalFree; LocalLock; LocalReAlloc; LocalUnlock; MAKELONG;
MapViewOfFile; MessageBox; MoveWindow; OpenClipboard;
OpenFile; OpenFileMapping; PeekMessage; PostMessage;
PostQuitMessage; PrintDlg; ReadFile; RegisterClass;
RegisterWindowMessage; ResetEvent; ScreenToClient;
SendMessage; SetAbortProc; SetClassLong; SetCursor;
SetDlgItemText; SetEndOfFile; SetEvent; SetFilePointer;
SetFocus; SetScrollRange; SetThreadPriority; SetWindowLong;
SetWindowPos; SetWindowText; SetWindowWord; ShowWindow;
StartDoc; TextOut; TranslateAccelerator; TranslateMessage;
UnmapViewOfFile; UpdateWindow; WaitForMultipleObjects;
WaitForSingleObject; WinHelp; WriteFile; _llseek; _lread;
memset; strcat; strcmp; strcpy; strlen; strncmp; strncpy;
strtok; wsprintf
