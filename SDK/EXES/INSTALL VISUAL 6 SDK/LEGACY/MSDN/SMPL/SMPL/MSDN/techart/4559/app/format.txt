#define AC_NOTHREADS 0
#define AC_NODELAY 1
#define AC_ELAPSED 2
#define AC_RESPONSE 3
#define NUMBERITEMS AC_RESPONSE+1
#define AC_IOBOUND 0
#define AC_CPUBOUND 1
#define BOUNDTYPES AC_CPUBOUND+1
#define AC_SERIAL 0
#define AC_CONCURRENT 1
#define COMPTYPES AC_CONCURRENT+1

#define INITIALTHREADCT 2
#define ENDTHREADCT 20
#define THREADOFFSET 3

#define INITIALBIAS 10
#define ENDBIAS 5000
#define BIASOFFSET 3

#define NUMBERLOOPS (ENDTHREADCT/THREADOFFSET)*(ENDBIAS/BIASOFFSET)



#define CT_SERIAL 0
#define CT_CONCURRENT 1
#define CT_CPUBOUND 0
#define CT_IOBOUND 2

// NUMBERLOOPS: For each number of threads
// (eg if range is from 1 to 20, and the increment is 3,
// there will be 1,4,7,10,13,16,19 = 7 entries)

// COMPTYPES: Can either be 0 (serial) or 1 (concurrent)

// NUMBERITEMS: Can be 0 (#Threads), 1 (delay),
// 2 (elapsed time) or 3 (response).
// Note: This selects the "real output value"

// BOUNDTYPES: Can be 0 (I/O bound) or 1 (CPU-bound)

float m_iValues[NUMBERLOOPS][COMPTYPES][NUMBERITEMS][BOUNDTYPES];

Format:

Heading:Threadno/Bias/Elapsed/Response (1A-D)
Concurrent (2A)
I/O  (2B)
 <values> (3:x+3)A-D (x must be computed dynamically)
CPU  ((x+4)A)
 <values> (x+5:2x+5)A-D
Serial (2x+6A)
I/O (2x+6B)
 <values> (2x+6:3x+6)A-D 
CPU (3x+7)B
 <values> (3x+8:4x+8)A-D

 <values>:
  Threadno/Bias/Elapsed/Response