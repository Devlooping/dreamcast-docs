
PICKLE: Demonstrates Serialization Procedures
PICKLE contains two samples, PICKLP AND PICKLT, that
demonstrate procedure and data type serialization,
respectively. This is also known as “pickling."
Just as a remote procedure must use a binding handle to make
a remote call, a serialization procedure must use an
encoding handle to use encoding services. If an encoding
handle is not specified, a default implicit encoding handle
is used to direct the call. On the other hand, if the
encoding handle is specified, either as an explicit handle_t
argument of the routine, or by using the explicit_handle
attribute, you must pass a valid handle as an argument to
the call. Microsoft(R) remote procedure calls (RPC) allow
remote and serialization procedures to be mixed in one
interface. Use caution when doing so, however. For implicit
handles, the global implicit handle must be set to a valid
binding handle before a remote call, and to a valid encoding
or decoding handle before a serialization call.
Both samples demonstrate a fixed-buffer--style pickling or
an incremental-style pickling, depending on the switches
being used. The implicit primitive handle is used as the
pickling handle. There is no server side in this sample,
because the concept of a server is not relevant to pickling.
The default setting for this application is to encode data
to the PICKLE.DAT file. To decode data from the file, use
the -d command-line switch. To use these sample
applications:
1.  Type:
     [picklpc|pickltc]
2. To decode data that has been encoded, type:
     [picklpc -d|pickltc -d]
Several other command-line switches are available to change
settings for this program. For a listing of the switches
available from the client, type:
   [picklpc -?|pickltc -?]
PICKLE is a Microsoft Win32(R) Software Development Kit
(SDK) RPC sample. It was built with Microsoft Visual C++(TM)
version 2.1, the 32-bit development system for Microsoft
Windows(R), Windows 95, and Windows NT(TM), and was tested
under Windows 95 and Windows NT version 3.51.
KEYWORDS: CD12; exit; fclose; fopen; fprintf; fread; free;
fwrite; malloc; memset; printf; tolower
