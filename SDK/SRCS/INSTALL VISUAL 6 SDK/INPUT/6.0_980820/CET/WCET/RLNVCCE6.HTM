<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Windows CE Toolkit for Visual C++, Version 6.0, Release Notes</TITLE>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>


<H2>
<A NAME="_rlnvcce_windows_ce_toolkit_for_visual_c_version_6.0_release_notes"></A>Windows CE Toolkit for Visual C++, Version 6.0 Release Notes</H2>

<P>December 1998</P>

<P>These release notes include updated information about the Microsoft® Windows® CE Toolkit for Visual C++® 6.0, including important setup and system requirement information, as well as a description of known issues. Many of the issues outlined in this document will be corrected in upcoming releases.</P>

<H4>Contents</H4>

<UL>
	<LI><A HREF="#_rlnvcce_legal_requirements">Legal Requirements</A></li>

	<LI><A HREF="#_rlnvcce_system_requirements">System Requirements</A></li>

	<LI><A HREF="#_rlnvcce_important_setup_information">Important Setup Information</A></li>

	<LI><A HREF="#_rlnvcce_windows_ce_toolkit_for_visual_c_">Windows CE Toolkit for Visual C++</A></li>

	<LI><A HREF="#_rlnvcce_debugging_issues">Debugging Issues</A></li>

	<LI><A HREF="#_rlnvcce_compiler_issues">Compiler Issues</A></li>

	<LI><A HREF="#_rlnvcce_mfc_for_windows_ce">MFC for Windows CE</A></li>

	<LI><A HREF="#_rlnvcce_atl_for_windows_ce">ATL for Windows CE</A></li>

	<LI><A HREF="#_rlnvcce_activex_issues">ActiveX Issues</A></li>

	<LI><A HREF="#_rlnvcce_viewing_the_online_documentation">Viewing the Online Documentation</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_legal_requirements"></A>Legal Requirements</H2>

<P>Information in this document is subject to change without notice and is provided for informational purposes only. The entire risk of the use or results of the use of this document remains with the user, and Microsoft Corporation makes no warranties, either express or implied. The example companies, organizations, products, people, and events depicted herein are fictitious. No association with any real company, organization, product, person, or event is intended or should be inferred. Complying with all applicable copyright laws is the responsibility of the user. Without limiting the rights under copyright, no part of this document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical, photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation. </P>

<P>Microsoft may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document. Except as expressly provided in any written license agreement from Microsoft, the furnishing of this document does not give you any license to these patents, trademarks, copyrights, or other intellectual property.</P>

<P><font face="Symbol">Ó</FONT> 1998 Microsoft Corporation. All rights reserved.</P>

<P>Microsoft, MS, MS-DOS, Visual Basic, Visual C++, Windows, Win32, Windows NT, and Visual Studio are either registered trademarks or trademarks of Microsoft Corporation in the U.S.A. and/or other countries. </P>

<P>The names of actual companies and products mentioned herein may be the trademarks of their respective owners.</P>


<H2>
<A NAME="_rlnvcce_system_requirements"></A>System Requirements</H2>

<P>To use Microsoft Windows CE Toolkit for Visual C++ 6.0, you need the following:

<UL>
	<LI>A desktop computer with a Pentium class processor. A Pentium 90-MHz or higher processor is recommended. </li>

	<LI>Microsoft® Windows NT® Workstation 4.0, Microsoft® Windows® 95, or Microsoft® Windows® 98. </li>

	<LI>Microsoft Windows Visual C++ 6.0 Professional Edition or Enterprise Edition.</li>

	<LI>32 MB for Windows NT Workstation 4.0 (48 MB recommended); 24 MB for Windows 95/98 (48 MB recommended).</li>

	<LI>Hard disk space requirements (at least one software development kit, or SDK, must be installed):
<UL>
	<LI>Minimum installation: Microsoft Windows CE Platform SDK for the Handheld PC (H/PC) and the toolkit (excluding remote tools), ActiveX® support, Help files, and debugger tools: 189 MB</li>

	<LI>Complete toolkit and H/PC SDK: 288 MB</li>

	<LI>Complete toolkit, H/PC SDK, and Palm-size PC SDK: 415 MB</li>

	<LI>Complete toolkit, H/PC SDK, Palm-size PC SDK, and an H/PC SDK that uses Microsoft Windows CE, Handheld PC Professional Edition, Version 3.0: 610 MB</li>
</UL>
</li>

	<LI>CD-ROM drive compatible with multimedia desktop computer specification. </li>

	<LI>VGA or higher-resolution monitor required. A Super VGA monitor is recommended. </li>

	<LI>Mouse device or compatible pointing device.</li>
</UL>

<P><B>Note</B>  Microsoft Windows NT Workstation 4.0 is the recommended debug host for your development environment. The toolkit can be installed on Windows 95/98, and you can build your application from there. However, emulation will not work on Windows 95/98; instead use Windows NT as your host machine.</P>


<H2>
<A NAME="_rlnvcce_important_setup_information"></A>Important Setup Information</H2>

<P>Uninstall any previous versions of the Windows CE Toolkit for Visual C++ before installing the current toolkit. </P>

<P>You must install the toolkit to install the following items:

<UL>
	<LI>Microsoft Windows CE Toolkit for Visual C++ 6.0 </li>

	<LI>MFC for Windows CE 2.10</li>

	<LI>ATL for Windows CE 2.10</li>

	<LI>Chipset Reference</li>
</UL>

<P>You must install the Windows CE SDKs to install the following items:

<UL>
	<LI>Microsoft® Windows® CE Platform SDK for the Handheld PC</li>

	<LI>Microsoft® Windows® CE Platform SDK for the Palm-size PC</li>

	<LI>Microsoft® Windows® CE Device Driver Kit </li>
</UL>

<P>The Windows CE Toolkit for Visual C++ is add-on software for Microsoft® Visual C++®, which is part of the Microsoft® Visual Studio™ 6.0 family. Because the toolkit is an add-on product, you must install it after you install Visual C++. </P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To install the Microsoft Windows CE Toolkit for Visual C++</H4>

<OL>
	<LI>Confirm Visual C++ has been previously installed, then insert the Microsoft Windows CE Toolkit for Visual C++ compact disc into the CD-ROM drive. The installation program (setup.exe from the /vcce directory) runs automatically and installs the Microsoft Windows CE Toolkit for Visual C++. </li>

	<LI>After the installation of the toolkit is complete, a dialog box prompts you to install the SDKs for the H/PC and the Palm-size PC. Choose <B>Yes</B> to install these SDKs at this time. </li>
</OL>

<P>This launches the toolkit setup program, which in turn launches the setup program for the Windows CE SDKs for the H/PC and Palm-size PC. All three setup programs must be completed to ensure a properly working installation. You must install these SDKs if you want to use MFC for Windows CE or ATL for Windows CE.</P>

<P><B>Note</B>  You must install at least one Windows CE SDK in order for the Windows CE Toolkit for Visual C++ to function correctly.</P>


<H2>
<A NAME="_rlnvcce_windows_ce_toolkit_for_visual_c_"></A>Windows CE Toolkit for Visual C++</H2>

<UL>
	<LI><A HREF="#_rlnvcce_visual_c_profiling_is_not_supported_for_windows_ce">Visual C++ Profiling is Not Supported for Windows CE</A></li>

	<LI><A HREF="#_rlnvcce_malfunctioning_combo_box_on_the_project_settings_dialog">Malfunctioning Combo Box on the Project Settings Dialog</A></li>

	<LI><A HREF="#_rlnvcce_interaction_between_the_windows_ce_toolkits_for_visual_c_and_visual_basic_6.0">Interaction Between the Windows CE Toolkits for Visual C++ and Visual Basic 6.0</A></li>

	<LI><A HREF="#_rlnvcce_joint_win32_windows_ce_projects_are_not_supported">Joint Win32 Windows CE Projects Are Not Supported</A></li>

	<LI><A HREF="#_rlnvcce_resource_editor_may_corrupt_executable_files">Resource Editor may Corrupt Executable Files</A></li>

	<LI><A HREF="#_rlnvcce_toolkit_does_not_automatically_locate_dependent_dlls">Toolkit Does not Automatically Locate Dependent DLLs</A></li>

	<LI><A HREF="#_rlnvcce_invalid_commands_in_macro_files_cause_visual_studio_to_exit_with_an_exception">Invalid Commands in Macro Files Cause Visual Studio to Exit With an Exception</A></li>

	<LI><A HREF="#_rlnvcce_windows_ce_specific_c_run_time_functions">Windows CE-Specific C Run-Time Functions</A></li>

	<LI><A HREF="#_rlnvcce_emulation">Emulation</A></li>

	<LI><A HREF="#_rlnvcce_batch_files">Batch Files</A></li>

	<LI><A HREF="#_rlnvcce_project_directory_issues">Project Directory Issues</A></li>

	<LI><A HREF="#_rlnvcce_remote_executable_path_and_file_name_limitations">Remote Executable Path and File Name Limitations</A></li>

	<LI><A HREF="#_rlnvcce_makefile_and_directories_with_spaces_in_the_directory_name">Makefile and Directories with Spaces in the Directory Name</A></li>

	<LI><A HREF="#_rlnvcce_no_simultaneous_multiplatform_emulation">No Simultaneous Multiplatform Emulation</A></li>

	<LI><A HREF="#_rlnvcce_execute_and_start_debug_commands_do_not_update_application">Execute and Start Debug Commands do not Update Application</A></li>

	<LI><A HREF="#_rlnvcce_opening_windows_ce_files_from_windows_explorer">Opening Windows CE Files from Windows Explorer</A></li>

	<LI><A HREF="#_rlnvcce_minimizing_and_maximizing_dialog_boxes">Minimizing and Maximizing Dialog Boxes</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_visual_c_profiling_is_not_supported_for_windows_ce"></A>Visual C++ Profiling is Not Supported for Windows CE</H2>

<P>The Windows CE Toolkit for Visual C++ does not support Visual C++ profiling. Although selecting <B>Emulation</B> in the <B>WCE Configuration</B> toolbar enables the <B>Profile</B> command on the <B>Build</B> menu, choosing <B>Profile</B> results in an error. You also cannot enable profiling by choosing <B>Settings</B> from the <B>Project</B> menu, because the <B>Enable profiling</B> check box on the <B>Link</B> tab in the <B>Project Settings</B> dialog box is unavailable for Windows CE-based projects.</P>


<H2>
<A NAME="_rlnvcce_malfunctioning_combo_box_on_the_project_settings_dialog"></A>Malfunctioning Combo Box on the Project Settings Dialog</H2>

<P>The <B>Settings For</B> combo box on the <B>Project Settings</B> dialog does not operate correctly. Using arrow keys to navigate through the list box causes items to be selected. While moving the selection around, the combo box list closes, selecting whatever item you had highlighted at the time.</P>


<H2>
<A NAME="_rlnvcce_interaction_between_the_windows_ce_toolkits_for_visual_c_and_visual_basic_6.0"></A>Interaction Between the Windows CE Toolkits for Visual C++ and Visual Basic 6.0</H2>

<P>If you installed the Windows CE Toolkit for Visual Basic 6.0, before you installed the Windows CE Toolkit for Visual C++, the later toolkit will include configuration information for the H/PC running H/PC Pro Edition software even if you did not install the H/PC Pro SDK. However, you must install the H/PC SDK that uses H/PC Pro Edition software in order to build applications for it.</P>


<H2>
<A NAME="_rlnvcce_joint_win32_windows_ce_projects_are_not_supported"></A>Joint Win32/Windows CE Projects Are Not Supported</H2>

<P>The toolkit does not support joint Win32/Windows CE projects. If you have a joint Win32/Windows CE .dsp file that was created with version 5.0 or earlier of the Windows CE Toolkit for Visual C++, you will need to separate it into two separate projects. You can do this by creating a new .dsp file and copying the relevant files into it. Alternatively, you can modify your .dsp file so that it supports either Win32 or Windows CE.</P>


<H2>
<A NAME="_rlnvcce_resource_editor_may_corrupt_executable_files"></A>Resource Editor may Corrupt Executable Files</H2>

<P>Executable files can be corrupted if you edit them with the Resource Editor. </P>


<H2>
<A NAME="_rlnvcce_toolkit_does_not_automatically_locate_dependent_dlls"></A>Toolkit Does not Automatically Locate Dependent DLLs</H2>

<P>When you attempt to debug a Windows CE application that has a DLL dependency, the toolkit does not automatically find the DLL. When you select <B>Debug</B>, the <B>Map Remote File to Local File </B>dialog box appears. Enter the path of the DLL.</P>


<H2>
<A NAME="_rlnvcce_invalid_commands_in_macro_files_cause_visual_studio_to_exit_with_an_exception"></A>Invalid Commands in Macro Files Cause Visual Studio to Exit With an Exception</H2>

<P>If you run a macro in Visual Studio that contains an invalid command, a dialog box appears that contains the following text: </P>

<P>"This macro file contained the following error and will be unloaded. Line <I>xx</I>: The specified command line name is not the name of an existing macro, nor provided by any of the currently loaded packages. Would you like to edit the file?"</P>

<P>If you run the macro again without editing it, Visual Studio exits with an exception.</P>


<H2>
<A NAME="_rlnvcce_windows_ce_specific_c_run_time_functions"></A>Windows CE-Specific C Run-Time Functions</H2>

<P>For Windows CE, some C run-time functions differ, as follows:

<UL>
	<LI>The <B>wsprintf</B> function does not support the display of floating point numbers. Use the <B>swprintf</B> function to display floating point numbers.</li>

	<LI>Windows CE does not support the <B>swscanf</B> function. </li>

	<LI>Windows CE, version 2.0 does not support the <B>atof </B>function.</li>
</UL>


<H2>
<A NAME="_rlnvcce_emulation"></A>Emulation</H2>

<P>Using the <B>Go</B> button on the <B>Build</B> toolbar or the <B>Build MiniBar</B> toolbar while running emulation may lead to an error condition. Use CTRL+F5 from the keyboard or use the <B>Go</B> menu item. If the <B>Error Failure –</B><B> Connecting to Shell Emulation</B> dialog box appears, select <B>Cancel</B> and use the <B>Build/Update Emulation Output Files</B> menu item to reset emulation to a working state.</P>

<P>For more information about emulation issues, see the following topics:

<UL>
	<LI><A HREF="#_rlnvcce_no_simultaneous_multiplatform_emulation">No Simultaneous Multiplatform Emulation</A></li>

	<LI><A HREF="#_rlnvcce_handheld_pc_and_palm_size_pc_emulation">Handheld PC and Palm-size PC Emulation</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_batch_files"></A>Batch Files</H2>

<P>Batch file templates are now in the Wce211\bin directory. Batch file shortcuts are no longer available on the <B>Start</B> menu. These batch files create build environments only for H/PC 2.0 targets, and only if you installed the H/PC SDK in the default directories. Otherwise, these batch files serve only as templates, and you must modify them before using them.</P>


<H2>
<A NAME="_rlnvcce_project_directory_issues"></A>Project Directory Issues</H2>

<P>If a project executable file is in the top level of the project directory, the debugger will treat it as a source file for debugging information. The debugger will generate a warning in the output window. </P>

<P>To avoid this problem, delete the executable from the upper directory.</P>


<H2>
<A NAME="_rlnvcce_remote_executable_path_and_file_name_limitations"></A>Remote Executable Path and File Name Limitations</H2>

<P>You cannot use the <B>Remote executable path and file name</B> field in the Debug setting for a Windows CE project to specify the name of a file on the device. If you have a DLL project, you cannot use this field to rename your DLL.</P>

<P><B>Note</B>  If you are using a DLL project, do not put the name of the .exe file in this field.</P>


<H2>
<A NAME="_rlnvcce_makefile_and_directories_with_spaces_in_the_directory_name"></A>Makefile and Directories with Spaces in the Directory Name</H2>

<P>Makefiles that utilize rules such as the following do not work on directories that contain spaces in their names.</P>

<PRE><CODE>"$(OUTDIR)\$(TARGETNAME).lib" : "$(OUTDIR)" $(LINK32_OBJS)
    $(LINK32) @&lt;&lt;
  $(LINK32_FLAGS: =^
)
  $(LINK32_OBJS: =^
)
  $(LINK32_LIBS: =^
)
&lt;&lt;
</CODE></PRE>

<P>The following code example shows how to modify the rules to avoid the problem.</P>

<PRE><CODE>"$(OUTDIR)\$(TARGETNAME).lib" : "$(OUTDIR)" $(LINK32_OBJS)
    $(LINK32) @&lt;&lt;
  $(LINK32_FLAGS)
  $(LINK32_OBJS)
  $(LINK32_LIBS)
&lt;&lt;
</CODE></PRE>


<H2>
<A NAME="_rlnvcce_no_simultaneous_multiplatform_emulation"></A>No Simultaneous Multiplatform Emulation</H2>

<P>If you build and run an application for H/PC emulation and then attempt to rebuild it for Palm-size PC emulation while H/PC emulation is running, you will get an error message. The toolkit will not run Palm-size PC emulation and H/PC emulation at the same time. Discontinue Palm-size PC emulation before starting H/PC emulation and vice versa. </P>


<H2>
<A NAME="_rlnvcce_execute_and_start_debug_commands_do_not_update_application"></A>Execute and Start Debug Commands do not Update Application</H2>

<P>When you build a project by selecting <B>Build</B> on the Visual Studio <B>Build </B>menu, the toolkit will check to see if the executable on the Windows CE device needs updating. However, when you select <B>Execute</B> or<B> Start Debug</B> on the <B>Build</B> menu, the toolkit will not check to see if the executable on the device needs updating or even if it exists; it will simply attempt to launch the current executable on the device.</P>

<P>You can avoid these problems by selecting <B>Build</B>, <B>Rebuild</B> <B>All</B>, or <B>Update Remote Output File</B> before you select <B>Execute</B> or <B>Start Debug</B>. </P>


<H2>
<A NAME="_rlnvcce_opening_windows_ce_files_from_windows_explorer"></A>Opening Windows CE Files from Windows Explorer</H2>

<P>You cannot open a Windows CE .dsp file from a Windows Explorer directory unless Visual Studio is already running. If you open a .dsp file without launching Visual Studio, the project will not be loaded correctly.</P>


<H2>
<A NAME="_rlnvcce_minimizing_and_maximizing_dialog_boxes"></A>Minimizing and Maximizing Dialog Boxes</H2>

<P>When you create a dialog box under Windows CE without specifying the styles for the <B>Minimize box</B> and <B>Maximize box</B>, the <B>Minimize</B> and <B>Maximize</B> commands appear in the system menu for the dialog box. However, if you choose <B>Minimize </B>from the<B> </B>system menu, your application stops functioning or closes. </P>

<P>To avoid this problem, either specify the styles for the <B>Minimize box</B> and <B>Maximize box</B>, or do not choose <B>Minimize</B> or <B>Maximize</B> from the system menu if you did not specify the corresponding styles.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To specify the Minimize box or Maximize box styles</H4>

<OL>
	<LI>Click the right mouse button on the dialog box in the Resource Editor.</li>

	<LI>Choose <B>Properties</B> from the menu that appears.</li>

	<LI>Choose the <B>Style</B> tab.</li>

	<LI>Select either the <B>Minimize box</B> check box or the <B>Maximize box</B> check box.</li>
</OL>


<H2>
<A NAME="_rlnvcce_debugging_issues"></A>Debugging Issues</H2>

<UL>
	<LI><A HREF="#_rlnvcce_no_dialog_box_when_the_debugger_steps_over_debugbreak">No Dialog Box When the Debugger Steps Over Debugbreak</A></li>

	<LI><A HREF="#_rlnvcce_cemon_debugger_problems">CEMON Debugger Problems</A></li>

	<LI><A HREF="#_rlnvcce_adding_dlls_during_debugging">Adding DLLs during Debugging</A></li>

	<LI><A HREF="#_rlnvcce_debugging_applications_that_consist_of_only_a_dll">Debugging Applications That Consist of Only a DLL</A></li>

	<LI><A HREF="#_rlnvcce_debugging_an_application_on_a_mips_windows_ce_based_device">Debugging an Application on a MIPS Windows CE-based Device</A></li>

	<LI><A HREF="#_rlnvcce_handheld_pc_and_palm_size_pc_emulation">Handheld PC and Palm-size PC Emulation</A></li>

	<LI><A HREF="#_rlnvcce_debugging_an_application_before_downloading_to_the_target_device">Debugging an Application Before Downloading to the Target Device</A></li>

	<LI><A HREF="#_rlnvcce_attach_to_process_debugging_is_not_supported">Attach to Process Debugging is Not Supported</A></li>

	<LI><A HREF="#_rlnvcce_invalid_request_for_pegwmain.c_file">Invalid Request for Pegwmain.c File</A></li>

	<LI><A HREF="#_rlnvcce_setting_breakpoints_on_a_mips_processor">Setting Breakpoints on a MIPS Processor</A></li>

	<LI><A HREF="#_rlnvcce_tracking_the_value_of_unreferenced_variables_in_sh3">Tracking the Value of Unreferenced Variables in SH3</A></li>

	<LI><A HREF="#_rlnvcce_palm_size_pc_debugging_problems">Palm-size PC Debugging Problems</A></li>

	<LI><A HREF="#_rlnvcce_incorrect_window_display_during_debugging">Incorrect Window Display During Debugging</A></li>

	<LI><A HREF="#_rlnvcce_breakpoint_issues">Breakpoint Issues</A></li>

	<LI><A HREF="#_rlnvcce_data_breakpoints_on_an_sh_processor">Data Breakpoints on an SH Processor</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_no_dialog_box_when_the_debugger_steps_over_debugbreak"></A>No Dialog Box When the Debugger Steps Over Debugbreak</H2>

<P>If you step over a routine that contains the <B>DebugBreak </B>function, the debugger stops executing when it encounters <B>DebugBreak</B>. The <B>Breakpoint</B> dialog box, which indicates where the breakpoint was hit, will not appear. </P>


<H2>
<A NAME="_rlnvcce_cemon_debugger_problems"></A>CEMON Debugger Problems</H2>

<P>If two copies of an executable file exist and one of them is in the same directory as the CEMON debugger, CEMON always debugs the file in its directory, no matter which file you specify. To avoid this problem, be sure that the directory that contains CEMON (usually the <B>Windows</B> directory) does not contain a copy of your executable file. </P>


<H2>
<A NAME="_rlnvcce_adding_dlls_during_debugging"></A>Adding DLLs during Debugging</H2>

<P>If you add a DLL to a project during debugging, the debugger will not load the debug symbols for the new DLL. To avoid this problem, map all DLLs to your project before debugging. </P>


<H2>
<A NAME="_rlnvcce_debugging_applications_that_consist_of_only_a_dll"></A>Debugging Applications That Consist of Only a DLL</H2>

<P>You cannot directly debug a project that consists of only a DLL. To debug a DLL, open up Pvbload.exe as a project on the desktop. This .exe does not need to have symbols, nor does it need to be the same as Pvbload.exe on the Windows CE-based device. Because you open Pvbload.exe as an .exe project, the integrated development environment (IDE) does not copy Pvbload.exe to the Windows CE-based device. Use one of the following procedures to then debug the DLL.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To debug a DLL by using an additional DLL</H4>

<OL>
	<LI>Specify the DLL with symbols that you want to debug in an additional DLL.</li>

	<LI>Insert the initial breakpoints in the source files of the DLL that you want to debug. </li>

	<LI>Point to <B>Start Debug</B> on the <B>Build</B> menu, then choose <B>Go</B>. The debugger stops at the breakpoints that you set.</li>
</OL>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To debug a DLL by letting Pvbload.exe load the DLL</H4>

<OL>
	<LI>Point to <B>Start Debug</B> on the <B>Build</B> menu, then choose <B>Go</B>. Pvbload.exe loads the DLL that you want to debug.</li>

	<LI>Insert breakpoints in the source files of the DLL that you want to debug.
<P>Because the .exe does not have symbols and the debugger does not initially load the breakpoints, the debugger stops at the first instruction. Press F5 to continue.
</li>
</OL>


<H2>
<A NAME="_rlnvcce_debugging_an_application_on_a_mips_windows_ce_based_device"></A>Debugging an Application on a MIPS Windows CE-based Device</H2>

<P>If you are debugging an application on a MIPS Windows CE-based device, you cannot use the Watch window to evaluate a function with a character string as a parameter. You can, however, evaluate a function with a character pointer as a parameter.</P>

<P>For example, you cannot use the Watch window to evaluate the expression f("abc"), but you can evaluate the expression f(<I>str</I>), where <I>str</I> is a string defined in the application.</P>

<P>If you try to evaluate a function with a character string as a parameter in the Watch window, you will receive a data type misalignment exception. If you leave the offending expression in the Watch window, every time you step or hit a breakpoint it will be evaluated and will generate the exception.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp; To remove an illegal string evaluation from the Watch window</H4>

<OL>
	<LI>When you attempt to evaluate the function, an error box informs you that a data type misalignment exception has occurred. Choose <B>OK</B>.</li>

	<LI>Remove the function from the Watch window causing the error, then continue debugging the application by pressing F5. <BR>
–Or–<BR>
From the <B>Debug</B> menu, choose <B>Go</B>.</li>

	<LI>A dialog box appears asking if you would like to pass the exception back to the application. Choose <B>No</B>. The debugger will then run normally in the Watch window.</li>
</OL>


<H2>
<A NAME="_rlnvcce_handheld_pc_and_palm_size_pc_emulation"></A>Handheld PC and Palm-size PC Emulation</H2>

<P>The debugger goes to disassembly when hitting a memory breakpoint for x86 emulation, and you cannot go back to source code. Emulation applications are multithreaded, even if they are written with a single thread. In baseline, memory breakpoints make multithreaded applications react irregularly.</P>


<H2>
<A NAME="_rlnvcce_debugging_an_application_before_downloading_to_the_target_device"></A>Debugging an Application Before Downloading to the Target Device</H2>

<P>If you attempt to debug the application before you have downloaded the application to the target device, you will get a message box that states that the executable file is not found on the device. Choose <B>OK</B>, and then either choose the <B>Build All</B> command from the <B>Build</B> menu or choose <B>Update Remote Output File</B> from the <B>Build</B> menu. Then you can start debugging.</P>


<H2>
<A NAME="_rlnvcce_attach_to_process_debugging_is_not_supported"></A>Attach to Process Debugging is Not Supported</H2>

<P>The current version of the toolkit does not support attach to process debugging.</P>


<H2>
<A NAME="_rlnvcce_invalid_request_for_pegwmain.c_file"></A>Invalid Request for Pegwmain.c File</H2>

<P>Sometimes a dialog box will appear at the beginning of a debugging session asking you to locate the Pegwmain.c file. Select <B>Cancel </B>and the debugging session will begin normally.</P>


<H2>
<A NAME="_rlnvcce_setting_breakpoints_on_a_mips_processor"></A>Setting Breakpoints on a MIPS Processor</H2>

<P>If you try to set a breakpoint on the name of a function that is in a DLL that has not yet been executed, you may hit that breakpoint in assembly code, instead of in the DLL. If this happens, repeatedly select <B>Step Over </B>until you arrive at the function in the DLL. You can avoid this situation by using one of the following procedures:

<UL>
	<LI>Set a breakpoint at the call to the function, then step into the function and set a breakpoint there;</li>

	<LI>Set a breakpoint in the source window at the start of the function; or</li>

	<LI>Step into any function in the DLL, and then set the breakpoint.</li>
</UL>

<P>Once you hit any breakpoint in the DLL, you will have no trouble hitting other breakpoints in the DLL.</P>


<H2>
<A NAME="_rlnvcce_tracking_the_value_of_unreferenced_variables_in_sh3"></A>Tracking the Value of Unreferenced Variables in SH3</H2>

<P>If an SH3 application contains an unreferenced variable, the debugger will not be able to show you the value of that variable. If you wish to see the value of the variable, rewrite your code to reference the variable. For example, use the variable on the rightmost side of an expression.</P>


<H2>
<A NAME="_rlnvcce_palm_size_pc_debugging_problems"></A>Palm-size PC Debugging Problems</H2>

<P>Debugging applications on a Palm-size PC occasionally results in the debug monitor still running when debugging is complete. To workaround this problem, terminate the process on the device.</P>


<H2>
<A NAME="_rlnvcce_incorrect_window_display_during_debugging"></A>Incorrect Window Display During Debugging</H2>

<P>The debugger sometimes will display the disassembly window instead of a source window when it hits a breakpoint in a secondary thread.</P>


<H2>
<A NAME="_rlnvcce_breakpoint_issues"></A>Breakpoint Issues</H2>

<P>Breakpoints set in functions called from more than one thread simultaneously do not always work correctly.</P>


<H2>
<A NAME="_rlnvcce_data_breakpoints_on_an_sh_processor"></A>Data Breakpoints on an SH Processor</H2>

<P>On SH processors, if a data breakpoint is set on a variable and that variable is assigned a value, but the variable is not used before it is assigned another value, the data breakpoint may not be hit. For example, if a data breakpoint is set on a loop index variable and that loop index variable is not used in the loop, then the data breakpoint will not be hit until the loop is terminated. The problem will arise in the following case:</P>

<PRE><CODE>        for(i=0; i&lt;10; i++) {
count++; 
}
</CODE></PRE>

<P>To work around this problem, be sure that the variable is used between assignments.</P>

<PRE><CODE>    for(i=0; i&lt;10; i++) {
            j = i;
count++; 
}
</CODE></PRE>

<P>Also, the bug will arise in the following situation.</P>

<PRE><CODE>        i = 0;
        i = 1;
</CODE></PRE>

<P>Simply put a statement, such as j=i, between the statements and the data breakpoint will be hit.</P>


<H2>
<A NAME="_rlnvcce_compiler_issues"></A>Compiler Issues</H2>

<UL>
	<LI><A HREF="#_rlnvcce_windows_ce_1.0_compiler_definition_changes">Windows CE 1.0 Compiler Definition Changes</A></li>

	<LI><A HREF="#_rlnvcce_arm_compiler_passing_an_unaligned_structure_as_a_parameter">ARM Compiler Passing an Unaligned Structure as a Parameter</A></li>

	<LI><A HREF="#_rlnvcce_arm_compiler_does_not_support___asm_keyword">ARM Compiler Does Not Support <B>__asm</B> Keyword</A></li>

	<LI><A HREF="#_rlnvcce_compiler_generates_an_error_for_inline_functions_that_return_pointers">Compiler Generates an Error for Inline Functions that Return Pointers</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_windows_ce_1.0_compiler_definition_changes"></A>Windows CE 1.0 Compiler Definition Changes</H2>

<P>To convert a Windows CE version 1.0 project to a more current version of Windows CE, first change the _WIN32_WCE compiler definition to _WIN32_WCE=$(CEVersion).</P>


<H2>
<A NAME="_rlnvcce_arm_compiler_passing_an_unaligned_structure_as_a_parameter"></A>ARM Compiler: Passing an Unaligned Structure as a Parameter</H2>

<P>A fatal exception occurs if both of the following conditions are met:

<UL>
	<LI>An unaligned structure is passed as a parameter.</li>

	<LI>The structure is one of the first few parameters to a function call.</li>
</UL>

<P>To work around this problem, change the function to pass a pointer to a structure rather than passing the structure itself. </P>

<P>As another option, copy the structure to an aligned location, such as a global variable, before making the function call. This causes the structure to align, which in turn enables the function call to work properly.</P>


<H2>
<A NAME="_rlnvcce_arm_compiler_does_not_support___asm_keyword"></A>ARM Compiler Does Not Support __asm Keyword</H2>

<P>For Windows CE, if you use the <B>__asm</B> keyword, the ARM compiler will generate a nonstandard extension error. To avoid this error, use the <B>__emit</B> keyword instead.</P>


<H2>
<A NAME="_rlnvcce_compiler_generates_an_error_for_inline_functions_that_return_pointers"></A>Compiler Generates an Error for Inline Functions that Return Pointers</H2>

<P>Windows CE compilers will generate an error if you attempt to compile code containing an inline function that returns a pointer. The following code example shows how this type of error is generated. </P>

<PRE><CODE>DISPE* inline 
CWin::PdispeForWm(UINT wm, const DISPLIST * pdl) {.....} 
</CODE></PRE>

<P>where <B>DISPE</B> is defined as a structure. </P>

<P>The following code example shows how to correct this problem by rewriting the function so that it does not return a pointer.</P>

<PRE><CODE>DISPE inline 
*CWin::PdispeForWm(UINT wm, const DISPLIST * pdl) {.....}
</CODE></PRE>


<H2>
<A NAME="_rlnvcce_mfc_for_windows_ce"></A>MFC for Windows CE</H2>

<UL>
	<LI><A HREF="#_rlnvcce_help_topics_menu_item_fails_in_a_windows_ce_mfc_application">Help Topics Menu Item Fails in a Windows CE MFC Application</A></li>

	<LI><A HREF="#_rlnvcce_message_maps_in_help_for_windows_ce">Message Maps in Help for Windows CE</A></li>

	<LI><A HREF="#_rlnvcce_windows_ce_help_system">Windows CE Help System</A></li>

	<LI><A HREF="#_rlnvcce_mfc_application_wizards_create_only_english_resource_strings">MFC Application Wizards Create Only English Resource Strings</A></li>

	<LI><A HREF="#_rlnvcce_mfc_sample_problems_on_hp_c_2.0_devices">MFC Sample Problems on HP/C 2.0 Devices</A></li>

	<LI><A HREF="#_rlnvcce_static_debug_version_of_http_on_sh3_processor_requires_excess_memory">Static Debug Version of HTTP on SH3 Processor Requires Excess Memory</A></li>

	<LI><A HREF="#_rlnvcce_support_for_methods_of_the_cwnd_class_in_windows_ce_mfc">Support for Methods of the <B>CWnd </B>Class in Windows CE MFC</A></li>

	<LI><A HREF="#_rlnvcce_subclassed_mfc_activex_controls_may_not_work_properly">Subclassed MFC ActiveX Controls May Not Work Properly</A></li>

	<LI><A HREF="#_rlnvcce_mfc_active_x_controls_should_not_use_the_stock_font_property_for_the_h_pc_2.0">MFC Active X Controls Should Not Use the Stock Font Property for the H/PC 2.0</A></li>

	<LI><A HREF="#_rlnvcce_using_the_find_replace_dialog_box_on_an_h_pc_2.0_when_statically_linking_with_mfc">Using the Find/Replace Dialog Box on an H/PC 2.0 When Statically Linking with MFC</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_help_topics_menu_item_fails_in_a_windows_ce_mfc_application"></A>Help Topics Menu Item Fails in a Windows CE MFC Application</H2>

<P>The <B>Help Topics</B> menu item under the <B>Help</B> menu in a Windows CE MFC application does not work. A workaround is provided below to fix the problem.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To fix a Help Topics menu Item</H4>

<OL>
	<LI>Use <B>ClassWizard</B> to add <B>CMainFrame::OnHelp</B> based on ID_HELP.
<PRE><CODE>//*On_COMMAND(ID_HELP,OnHelp)  //in the message map
</CODE></PRE>
</li>

	<LI>Insert the following codes to <B>OnHelp</B>.
<PRE><CODE>CWinApp* pApp = Afx GetApp();
ASSERT_VALID(pApp);
TCHAR szHelpFileName[_MAX_PATH];
lstrcpy(szHelpFileName,_T("\\"));
::PegHelp(szHelpFileName);
</CODE></PRE>
</li>

	<LI>In stdafx.h, add the following code. 
<PRE><CODE>#include "wcextrn.h"
</CODE></PRE>
</li>
</OL>


<H2>
<A NAME="_rlnvcce_message_maps_in_help_for_windows_ce"></A>Message Maps in Help for Windows CE</H2>

<P>The following table shows messages related to Help in MFC and shows whether the messages are supported by the Windows desktop or the Windows CE environment.</P>

<TABLE cellspacing=4 cols=4 width=464>

<TR VALIGN="top">
<TD width=27%>
<H5>Message</H5>
</TD>
<TD width=40%>
<H5>Message Handler</H5>
</TD>
<TD width=16%>
<H5>Desktop</H5>
</TD>
<TD width=17%>
<H5>Windows CE</H5>
</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>WM_HELP</TD>
<TD width=40%>CWnd::OnHelpInfo(</TD>
<TD width=16%>Yes</TD>
<TD width=17%>Yes</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>WM_COMMAND + ID_HELP</TD>
<TD width=40%>CWnd::OnHelp(</TD>
<TD width=16%>Yes</TD>
<TD width=17%>Yes</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>WM_COMMAND + ID_HELP_FINDER</TD>
<TD width=40%>CWnd::OnHelpFinder(</TD>
<TD width=16%>Yes</TD>
<TD width=17%>No</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>WM_COMMAND + ID_CONTEXT_HELP</TD>
<TD width=40%>CFrameWnd::OnContextHelp(</TD>
<TD width=16%>Yes</TD>
<TD width=17%>No</TD>
</TR>
</TABLE><BR>

<P>For more information about creating Help systems in Windows CE, see <A HREF="#_rlnvcce_windows_ce_help_system">Windows CE Help System</A>.</P>


<H2>
<A NAME="_rlnvcce_windows_ce_help_system"></A>Windows CE Help System</H2>

<P>Much like the Microsoft Foundation Classes for the Windows desktop operating system, MFC for Windows CE has inherent functionality to help you design user Help systems. The following list summarizes the differences in Help for Windows CE:

<UL>
	<LI><B>Help Topics</B> command on the <B>Help</B> menu
<P>In Help for Windows CE, the identifier is <B>ID_HELP</B>. The message handler is <B>CWnd::OnHelp</B>, which sends <B>WM_COMMAND</B> and <B>ID_HELP</B>.
</li>

	<LI>F1 shortcut key
<P>F1 might not be supported on some Windows CE-based devices.
</li>

	<LI>Context-sensitive <B>Help</B> button (<B>?</B>) on the command bar
<P>Unavailable in the Windows CE operating system.
</li>

	<LI><B>Help</B> button (<B>?</B>) on the command bar 
<P>While unavailable on the Windows desktop, activating this button in Help for Windows CE sends <B>WM_HELP</B>.
</li>
</UL>


<H2>
<A NAME="_rlnvcce_mfc_application_wizards_create_only_english_resource_strings"></A>MFC Application Wizards Create Only English Resource Strings</H2>

<P>The MFC Application Wizards create only English strings in a project's resource files. Install the Japanese code page and select the Japanese resources in the Application Wizard or use the resource editors to manually convert the strings to Japanese.</P>


<H2>
<A NAME="_rlnvcce_mfc_sample_problems_on_hp_c_2.0_devices"></A>MFC Sample Problems on HP/C 2.0 Devices</H2>

<P>The MFC samples discussed in the following sections do not function correctly on an H/PC device using version 2.0 of the Windows CE operating system. The samples run correctly on a Palm-size PC, an H/PC running H/PC Pro Edition software, or on any other device using version 2.10 or later of the Windows CE operating system. </P>

<H2>CMNCTRLS Sample</H2>

<P>The <B>CListCtrl</B> portion of the CMNCTRL sample does not sort properly in either ascending or descending order. </P>

<P>Because an H/PC using 2.0 does not support the<B> CProgressCtrl::GetPos</B>, the progress control does not update the current position box as you step through the control. Every time you choose <B>Step</B> the progress control advances, but the current position value remains unchanged. </P>

<P>You will get an error message if you attempt to check <B>UDS_WRAP</B> on the <B>SpinButtonCtrl</B> tab.</P>

<H2>NPP Sample</H2>

<P>If you select <B>Find Next</B> in the <B>Replace</B> dialog box, the application searches for the previous, rather than the next, occurrence of the specified term. </P>

<P>This sample fails if you choose <B>Find </B>or <B>Replace</B> and choose <B>Replace</B> or <B>Replace</B> <B>all</B> without first entering text in the <B>Find what</B> or <B>Replace</B> <B>with</B> edit boxes.</P>

<H2>Regsvrce.exe Sample</H2>

<P>If you attempt to remove the registration from an OCX by using regsvrce.exe on an H/PC device using version 2.0 of the Windows CE operating system, you receive a failed action message.</P>

<H2>Chatter Sample</H2>

<P>The Chatter MFC sample application may exhibit instability and cause application errors in certain situations. Turn off the auto chat feature of this sample before exiting the application to avoid errors.</P>


<H2>
<A NAME="_rlnvcce_static_debug_version_of_http_on_sh3_processor_requires_excess_memory"></A>Static Debug Version of HTTP on SH3 Processor Requires Excess Memory</H2>

<P>When running Windows CE version 2.11, the Static Debug build of HTTP on the SH3 processor requires much more application memory than should be necessary. To run without failing, the SH3 Static Debug requires about 3,800 KB of free application memory to run without failing. In contrast, the Dynamic Debug on SH3 runs with about 600 KB of free application memory, and the Static Debug build for the SH4 runs with only about 500 KB of free application memory.</P>


<H2>
<A NAME="_rlnvcce_support_for_methods_of_the_cwnd_class_in_windows_ce_mfc"></A>Support for Methods of the CWnd Class in Windows CE MFC</H2>

<P>MFC for Windows CE supports only the <B>OnHelp</B> method of <B>CWnd</B> class. <B>CWnd::OnHelp</B> is a handler for <B>COMMAND + ID_HELP</B>, which calls <B>PegHelp</B> using <B>pApp&gt;m_pszHelpFilePath</B>.</P>


<H2>
<A NAME="_rlnvcce_subclassed_mfc_activex_controls_may_not_work_properly"></A>Subclassed MFC ActiveX Controls May Not Work Properly</H2>

<P>If you use the subclassing feature of the MFC ActiveX Control wizard, your controls may not perform properly. MFC for Windows CE does not currently support subclassing.</P>


<H2>
<A NAME="_rlnvcce_mfc_active_x_controls_should_not_use_the_stock_font_property_for_the_h_pc_2.0"></A>MFC Active X Controls Should Not Use the Stock Font Property for the H/PC 2.0</H2>

<P>When using MFC for Windows CE for the H/PC 2.0, your ActiveX controls should not contain the stock font property, because the font data does not persist correctly in streams. This problem does not occur for an H/PC running H/PC Pro Edition software. </P>

<P>To work around the problem, remove the stock font property from the control project by using the ClassWizard or by manually editing the .odl and .cpp files. You can set the control font by using <B>COleControl::SetFont</B>.</P>


<H2>
<A NAME="_rlnvcce_using_the_find_replace_dialog_box_on_an_h_pc_2.0_when_statically_linking_with_mfc"></A>Using the Find/Replace Dialog Box on an H/PC 2.0 When Statically Linking with MFC</H2>

<P>On an H/PC using version 2.0 of the Windows CE operating system, the <B>Find/Replace</B> dialog boxes are implemented in a resource file that needs to be included by your MFC application when linking statically (using Uafxwce.lib or Uafxwced.lib). </P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To include the resource file to implement Find/Replace dialog boxes</H4>

<OL>
	<LI>View the resources for your application in the Visual Studio project workspace.</li>

	<LI>Select your application's resources folder.</li>

	<LI>Choose <B>Resource Includes…</B> on the <B>View </B>menu.</li>

	<LI>In <B>Read-only symbol directives</B>, add the following code.
<PRE><CODE>#include "wceres.rc"</CODE></PRE>
</li>
</OL>


<H2>
<A NAME="_rlnvcce_atl_for_windows_ce"></A>ATL for Windows CE</H2>

<UL>
	<LI><A HREF="#_rlnvcce_failure_of_remote_registration_of_an_atl_control">Failure of Remote Registration of an ATL Control</A></li>

	<LI><A HREF="#_rlnvcce_ole_control_with_variant_method_parameters_on_an_h_pc_using_2.0">OLE Control with VARIANT Method Parameters on an H/PC Using 2.0</A></li>

	<LI><A HREF="#_rlnvcce_loading_activex_controls">Loading ActiveX Controls</A></li>

	<LI><A HREF="#_rlnvcce_registering_atl_controls_built_with_release_min_dependency_configuration">Registering ATL Controls Built with Release Min Dependency Configuration</A></li>

	<LI><A HREF="#_rlnvcce_composite_control_and_lite_composite_control_atl_objects_not_supported_for_the_h_pc">Composite Control and Lite Composite Control ATL Objects Not Supported for the H/PC</A></li>

	<LI><A HREF="#_rlnvcce_atl_sample_sketch_on_h_pc_version_2.0_sh3_causes_an_error_when_changing_penwidth_in_vb_script">ATL Sample Sketch on H/PC version 2.0 SH3 Causes an Error When Changing PenWidth in VB Script</A></li>

	<LI><A HREF="#_rlnvcce_painting_a_cscrollview_s_client_area">Painting a CScrollView's Client Area</A></li>

	<LI><A HREF="#_rlnvcce_incorrect_information_in_atl_object_wizard_pop_up_window">Incorrect Information in ATL Object Wizard Pop-Up Window</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_failure_of_remote_registration_of_an_atl_control"></A>Failure of Remote Registration of an ATL Control</H2>

<P>If remote registration of an ATL control fails, it may be necessary to copy ATLCE200.dll or ATLCE210.dll to the Windows directory on the device or, in emulation, to use REGSVRCE to register the DLL.</P>

<P>You can use the Windows CE Toolkit for Visual C++ to register ActiveX controls on a Windows CE-based device. To confirm that your control registered successfully, look at the dialog box that appears on the device interface. </P>

<P>For more information about registering controls, see the following topics:

<UL>
	<LI><A HREF="#_rlnvcce_registering_atl_controls_built_with_release_min_dependency_configuration">Registering ATL Controls Built with Release Min Dependency Configuration</A></li>

	<LI><A HREF="#_rlnvcce_registering_activex_controls_for_a_windows_ce_based_application">Registering ActiveX Controls for a Windows CE-Based Application</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_ole_control_with_variant_method_parameters_on_an_h_pc_using_2.0"></A>OLE Control with VARIANT Method Parameters on an H/PC Using 2.0</H2>

<P>An H/PC using version 2.0 of the Windows CE operating system does not support <B>VARIANT</B> method parameters in objects called using OLE automation; for example, using <B>IDispatch</B>. If you are creating a COM server with a method that takes a <B>VARIANT </B>parameter on an H/PC version 2.0, you must define and call the method using <B>VARIANT*</B>, or alternatively use a specific non-<B>VARIANT</B> type, such <B>BSTR</B>. </P>

<P>This change must be made in all files that define the method. This includes an .idl file, a .cpp file, and an .h file.</P>


<H2>
<A NAME="_rlnvcce_loading_activex_controls"></A>Loading ActiveX Controls</H2>

<P>The Visual Basic for Windows CE <B>CreateObject</B> function cannot load ActiveX controls that were created with MFC for Windows CE. <B>CreateObject</B> can load ActiveX controls that were created with ATL for Windows CE. </P>


<H2>
<A NAME="_rlnvcce_registering_atl_controls_built_with_release_min_dependency_configuration"></A>Registering ATL Controls Built with Release Min Dependency Configuration</H2>

<P>Although controls built this way are able to execute without ATLCE200.dll or ATLCE211.dll, it is still necessary to have ATLCE*.dll downloaded to the device in order to register the control. Also, ATLCE*.dll itself must be registered.</P>


<H2>
<A NAME="_rlnvcce_composite_control_and_lite_composite_control_atl_objects_not_supported_for_the_h_pc"></A>Composite Control and Lite Composite Control ATL Objects Not Supported for the H/PC</H2>

<P>Projects that contain Composite Control or Lite Composite Control ATL objects do not build or run properly on H/PCs. These types of ATL controls are not supported for the H/PC, but these controls do work properly when H/PC Pro Edition software runs on the device.</P>


<H2>
<A NAME="_rlnvcce_atl_sample_sketch_on_h_pc_version_2.0_sh3_causes_an_error_when_changing_penwidth_in_vb_script"></A>ATL Sample Sketch on H/PC version 2.0 SH3 Causes an Error When Changing PenWidth in VB Script</H2>

<P>On an H/PC using version 2.0 of the Windows CE operating system, changing <B>PenWidth</B> with the <B>Cint</B> command results in an error when using Sketch.dll in a VB script, because <B>PenWidth</B> property has the type short and <B>Cint()</B> constructs the int value.</P>

<P>To work around this problem, change the <B>PenWidth</B> property to type int.</P>


<H2>
<A NAME="_rlnvcce_painting_a_cscrollview_s_client_area"></A>Painting a CScrollView's Client Area</H2>

<P>Windows CE does not implement GDI transformations, which include the ability to set the origin of a window used to implement Window scrolling. It is up to the developer to recalculate the coordinates based on the scroll position when drawing to a view's device context. The WCEDBTST MFC sample illustrates a possible workaround. The following code shows a simple example.</P>

<PRE><CODE>// Draw a black rectangle using the logical coordinates (10,20) to (90,40)
// We are assuming MM_TEXT coordinates (the only coordinate system supported 
// under Windows CE), and we offset manually based on the scrollbar positions.
CMyScrollView::OnDraw(CDC* pDC)
{

// Get the scrollbars. In this sample, we are assuming that the scrollbar ranges 
// are equal to the height and width of the CView client area, in pixels. 
int nOrgX = -GetScrollPosition().x;
int nOrgY = -GetScrollPosition().y;
// Get logical coordinates for rectangle.
CRect wndRect(10,20,90,40);


// Offset using the origin. 
wndRect.OffsetRect(nOrgY,nOrgY);


// Draw it with the color = black. 
pDC-&gt;FillSolidRect(wndRect,RGB(0,0,0));
}
</CODE></PRE>


<H2>
<A NAME="_rlnvcce_incorrect_information_in_atl_object_wizard_pop_up_window"></A>Incorrect Information in ATL Object Wizard Pop-Up Window</H2>

<P>In the <B>ATL Object Wizard</B> dialog box, if you select <B>Objects </B>on the <B>Category </B>screen, select an object on the <B>Object</B> screen, and then press F1, pop-up windows appear that contain incorrect information. Contrary to what is stated in the pop-up windows, the Windows CE Toolkit for Visual C++ does not support the following objects:

<UL>
	<LI>Active server component</li>

	<LI>HTML control</li>

	<LI>Lite HTML control</li>

	<LI>MMC snapin object</li>

	<LI>MS transaction server object</li>
</UL>


<H2>
<A NAME="_rlnvcce_activex_issues"></A>ActiveX Issues</H2>

<UL>
	<LI><A HREF="#_rlnvcce_using_ambient_fonts_and_properties">Using Ambient Fonts and Properties</A></li>

	<LI><A HREF="#_rlnvcce_special_windows_ce_activex_control_test_container_problems_on_h_pc_version_2.0_devices">Special Windows CE ActiveX Control Test Container Problems on H/PC Version 2.0 Devices</A></li>

	<LI><A HREF="#_rlnvcce_converting_a_windows_ce_activex_control_to_a_windows_desktop_version">Converting a Windows CE ActiveX Control to a Windows Desktop Version</A></li>

	<LI><A HREF="#_rlnvcce_registering_activex_controls_for_a_windows_ce_based_application">Registering ActiveX Controls for a Windows CE-Based Application</A></li>

	<LI><A HREF="#_rlnvcce_activex_controls_missing_in_component_gallery">ActiveX Controls Missing in Component Gallery</A></li>

	<LI><A HREF="#_rlnvcce_border_style_and_appearance_properties_for_activex_controls_are_not_supported_for_the_h_pc">Border Style and Appearance Properties for ActiveX Controls are Not Supported for the H/PC</A></li>

	<LI><A HREF="#_rlnvcce_activex_controls_properties_interface_limitations">ActiveX Controls Properties Interface Limitations</A></li>

	<LI><A HREF="#_rlnvcce_inserting_activex_controls_into_dialog_boxes">Inserting ActiveX Controls into Dialog Boxes</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_using_ambient_fonts_and_properties"></A>Using Ambient Fonts and Properties</H2>

<P>The Windows CE ActiveX Control Test Container supports ambient fonts and ambient backcolor properties, but you need to use VB script to set them. For example, you can use the following VB script to set the ambient font property:</P>

<PRE><CODE>Form1.Font="Tahoma"
Form1.Font.Size=12
</CODE></PRE>

<P>You cannot specify font information for an ActiveX Control while in design mode. Use VB script to change or add font information for an ActiveX control. The following example shows how to add font information with VB script.</P>

<PRE><CODE>Form1.Smile1.Font="Tahoma"
Form1.Smile1.Font.Size=14
Form1.Smile1.Font.Italic=TRUE
</CODE></PRE>

<P>The changes you make while in Design mode to the <B>Height</B> and <B>Width</B> properties of an ActiveX control do not appear in Run mode. You can modify the height and width of an ActiveX control during Run mode. </P>


<H2>
<A NAME="_rlnvcce_special_windows_ce_activex_control_test_container_problems_on_h_pc_version_2.0_devices"></A>Special Windows CE ActiveX Control Test Container Problems on H/PC Version 2.0 Devices</H2>

<P>The controls discussed in the following sections do not function correctly on an H/PC using version 2.0 of the Windows CE operating system.</P>

<H2>SMILEY Sample</H2>

<P>On an H/PC using version 2.0 of the Windows CE operating system, the Windows CE ActiveX Control Test Container will stall if you run the <B>SMILEY</B> control after changing its <B>BorderStyle</B> property to 1. If this happens, use the Win32 Task Manager to shut down and restart the Windows CE ActiveX Control Test Container. </P>

<P>If you insert VB script that implements an <B>About</B> box into an ActiveX control and then run the control, the <B>About</B> box will not appear. The <B>About</B> box will appear once the Windows CE ActiveX Control Test Container has lost the focus. You can cause the Windows CE ActiveX Control Test Container to lose the focus by minimizing and maximizing it.</P>

<H2>COUNT Sample</H2>

<P>If you run the <B>COUNT</B> control in the Windows CE ActiveX Control Test Container, and include script that sends a text string to <B>GetInfoFromCounter</B> method, the string will not be displayed. For example, a COUNT sample with the following script will not display the "Testing" string.</P>

<PRE><CODE>form1.counter1.GetInfoFromCounter("Testing")
</CODE></PRE>

<P>The problem is that the <B>CCounter::OnDraw</B> function is called after the <B>GetInfoFromCounter</B> method.</P>

<P>If you run this same script on an H/PC using version 2.0 of the Windows CE operating system, the COUNT sample will not function at all.</P>


<H2>
<A NAME="_rlnvcce_converting_a_windows_ce_activex_control_to_a_windows_desktop_version"></A>Converting a Windows CE ActiveX Control to a Windows Desktop Version</H2>

<P>The Microsoft Windows CE Toolkit for Visual C++ 6.0 no longer enables you to insert Windows CE ActiveX controls into the Resource Editor through emulation. You can now create desktop versions of your controls to insert into the Resource Editor.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To convert a Windows CE ActiveX control to a desktop version</H4>

<OL>
	<LI>Write down the names of the source code files in the original projects. These files should have the following extensions: .cpp, .h, .odl, .idl, .rc, and .def.</li>

	<LI>Create a Win32 version of the control project with the same name as the original control. For MFC controls, use the MFC ActiveX ControlWizard. For ATL controls, use the ATL COM AppWizard.</li>

	<LI>Except for stdafx.cpp, delete all source files, headers, and dependencies from the project and close the project workspace.</li>

	<LI>Because you will need to put the new .dsp and .dsw files in the same directory as the original control project, rename the .dsp and .dsw files. For example, if the original project name is Grid, then rename your files to Grid_win32.dsp and Grid_win32.dsw.</li>

	<LI>With a test editor, open the .dsw file in Visual Studio and then close the .dsw file when finished editing.</li>

	<LI>Copy the .dsp and .dsw files to the original project directory. This directory contains the original .dsp and .dsw files, plus the source files.</li>

	<LI>Open the new .dsw file in Visual Studio as a workspace and add the files from step 1 to this project.</li>

	<LI>Verify that the output control name is the same name as the original project name, such as Grid.ocx rather than Grid_win32.ocx. This control name is specified in Project, Settings, Link, and Output file names.</li>

	<LI>From this point, you may need to make changes to the project source code to account for Unicode and ASCII string usage—Windows CE is Unicode only, and Windows 95/98 is ASCII only—and to account for the differences between the Windows CE operating system and Windows desktop operating systems.</li>
</OL>


<H2>
<A NAME="_rlnvcce_registering_activex_controls_for_a_windows_ce_based_application"></A>Registering ActiveX Controls for a Windows CE-Based Application</H2>

<P>You cannot register an ActiveX control for a Windows CE-based application by choosing <B>Register Control</B> from the <B>Tools</B> menu. When choosing <B>Register Control</B> from the <B>Tools</B> menu, you invoke Regsvr32.exe on the desktop computer rather than on the Windows CE-based device. For a description of how to properly register ActiveX controls, see Registering and Testing ActiveX Controls in the online Help.</P>


<H2>
<A NAME="_rlnvcce_activex_controls_missing_in_component_gallery"></A>ActiveX Controls Missing in Component Gallery</H2>

<P>ActiveX controls in Windows CE are not available in the Component Gallery, because the ActiveX Control Pack is not included in this release of the Windows CE operating system. </P>

<P>See the Windows CE web page for an updated ActiveX Control Pack. </P>


<H2>
<A NAME="_rlnvcce_border_style_and_appearance_properties_for_activex_controls_are_not_supported_for_the_h_pc"></A>Border Style and Appearance Properties for ActiveX Controls are Not Supported for the H/PC</H2>

<P>The <B>Border Style</B> property and <B>Appearance</B> property for ActiveX controls are not supported for the H/PC 2.0. Set both ActiveX control <B>Border Style</B> and <B>Appearance </B>properties equal to 0 when using an MFC ActiveX control on an H/PC 2.0. If you set either of these properties equal to 1, the control is not drawn properly.</P>


<H2>
<A NAME="_rlnvcce_activex_controls_properties_interface_limitations"></A>ActiveX Controls Properties Interface Limitations</H2>

<P>In Visual C++, you can use an ActiveX control's property dialog box to add font and color property pages, which you can then view in the Resource Editor. You cannot do this for Windows CE ActiveX controls. </P>


<H2>
<A NAME="_rlnvcce_inserting_activex_controls_into_dialog_boxes"></A>Inserting ActiveX Controls into Dialog Boxes</H2>

<P>If you insert an ActiveX control into a dialog box by clicking the right mouse button and choosing <B>Insert ActiveX Controls</B>, some events may not work at run time for the control. Use the following procedure to insert ActiveX controls that work properly.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To guarantee that events work for ActiveX controls</H4>

<OL>
	<LI>Insert the desktop version of the control in the dialog box by using the Components and Control gallery.</li>

	<LI>Use the Class Wizard to create a member variable called, for example, <I>m_Polygon</I>.</li>

	<LI>Insert the following code into the <B>OnInitDialog</B> function.
<PRE><CODE>BOOL CPolyCntrDlg::OnInitDialog()
{
...
ATLConnectSinks(&amp;m_Polygon); 
...
}
</CODE></PRE>
</li>
</OL>


<H2>
<A NAME="_rlnvcce_viewing_the_online_documentation"></A>Viewing the Online Documentation</H2>

<UL>
	<LI><A HREF="#_rlnvcce_viewing_the_windows_ce_library">Viewing the Windows CE Library</A></li>

	<LI><A HREF="#_rlnvcce_viewing_atl_and_mfc_for_windows_ce_documentation">Viewing ATL and MFC for Windows CE Documentation</A></li>
</UL>


<H2>
<A NAME="_rlnvcce_viewing_the_windows_ce_library"></A>Viewing the Windows CE Library</H2>

<P>The Windows CE online documentation opens in a different window from the Microsoft® Developer Network (MSDN) online documentation.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To view the Windows CE Library</H4>

<OL>
	<LI>On the taskbar, choose the <B>Start</B> button, choose <B>Programs</B>, and then choose <B>Microsoft Visual C++6.0</B>. A submenu appears.</li>

	<LI>Choose <B>Windows CE Tools</B>, and then choose <B>Windows CE Documentation</B>.</li>
</OL>

<P>You also can open the Windows CE online documentation from within the IDE.</P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To view the Windows CE Library from within the IDE</H4>

<OL>
	<LI>Choose <B>Options</B> from the <B>Tools</B> menu.</li>

	<LI>Choose the <B>Help System</B> tab.</li>

	<LI>Select <B>Windows CE Documentation</B> instead of <B>MSDN Collection</B> in the <B>Preferred Collection</B> drop-down list box. This action establishes the Windows CE Documentation collection as the default collection.</li>

	<LI>Choose <B>OK</B>.</li>

	<LI>Choose <B>Contents</B> from the <B>Help</B> menu to open the Windows CE online documentation.
<P>-Or-

<P>Press the F1 key to open the Windows CE online documentation.
</li>
</OL>


<H2>
<A NAME="_rlnvcce_viewing_atl_and_mfc_for_windows_ce_documentation"></A>Viewing ATL and MFC for Windows CE Documentation</H2>

<P>For your convenience, the Windows CE documentation for ATL and MFC for Windows CE contains links to the standard versions of MFC and ATL topics. However, you will be unable to follow the links that lead from the standard MFC and ATL descriptions to other topics in the MSDN library. While you cannot view these topics in the Windows CE Documentation library, you can view them in the MSDN library. </P>

<H4><IMG SRC="wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To view the MSDN Library</H4>

<OL>
	<LI>Choose <B>Options</B> from the <B>Tools</B> menu.</li>

	<LI>Choose the <B>Help System</B> tab.</li>

	<LI>Select <B>MSDN Collection</B> in the <B>Preferred Collection</B> drop-down list box. This action establishes the MSDN documentation collection as the default collection.</li>

	<LI>Choose <B>OK</B>.</li>

	<LI>Select <B>Contents</B> from the <B>Help</B> menu. </li>
</OL>

<P></P>
<p>&nbsp;</p></body>
</HTML>
