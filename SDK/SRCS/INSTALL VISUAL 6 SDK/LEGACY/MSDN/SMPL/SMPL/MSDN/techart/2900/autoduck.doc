{\rtf1\ansi \deff0\deflang1024

{\fonttbl
{\f0\froman Times New Roman;}
{\f1\froman Symbol;}
{\f2\fswiss Arial;}
{\f3\froman Times Roman;}
{\f4\fnil Univers;}
{\f5\fnil Univers Medium Condensed;}
{\f6\fnil Univers Condensed;}
{\f7\fswiss LetterGothic;}
{\f8\fdecor ZapfDingbats;}
{\f9\fnil Lucida Stars;}
{\f10\fswiss Helvetica-Narrow;}
{\f11\fswiss CB Univers 67 CondensedBold;}
{\f12\froman Times;}
{\f13\fmodern Letter Gothic MS;}
{\f14\fswiss C Univers 57 Condensed;}
{\f15\fnil MSIcons;}
{\f16\fswiss Arial Narrow;}
{\f17\fmodern Lucida Sans Typewriter;}
{\f18\fnil Wingdings;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}

{\stylesheet
{\s243\sl-210\tqr\tx6960 \b\f16\fs19\lang1033 header;}
{\s251\sb60\sa40\sl-280\keepn \b\f16\lang1033 heading 4;}
{\s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 heading 3;}
{\s253\sb140\sa60\sl-380\keepn \b\f16\fs34\lang1033 heading 2;}
{\s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 heading 1;}
{\sa160\sl-240\li720 \fs21\lang1033 Normal;}
{\s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 Rh1;}
{\s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Rmh;}
{\s50\li720\keepn \fs21\lang1033 Term1;}
{\s53\li960\keepn \fs21\lang1033 Term2;}
{\s54\li960\sa80 \fs21\lang1033 Def1;}
{\s55\li1200\sa80 \fs21\lang1033 Def2;}
{\s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 Rule;}
{\s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 Lb1;}
}

\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Autoduck User's Guide\par 
\pard\plain \s93\sl240 \fs21\lang1033 
To display a list of topics by category, click any 
of the contents entries below. To display an alphabetical list of 
topics, choose the Index button.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Basics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topics describe the basic approach of Autoduck:\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
About Autoduck{\v ctx_about}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Features of Autoduck{\v ctx_features}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Autoduck Tags{\v ctx_tags}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Autoduck Comment Blocks{\v ctx_coding}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Source Parsing{\v ctx_sourceparse}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Nesting Topics Inside Topics{\v ctx_nest}\par 

\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Tag Reference\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following topics describe the tagset defined in 
AUTODUCK.FMT:\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
@doc{\v doc}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Topic Tags{\v ctx_topictags}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Paragraph Tags{\v ctx_paragraphtags}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Text Tags{\v ctx_specialtags}\par 

\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Using Autoduck.Exe\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topics describe how to use the application, and 
how to structure your makefile entries:\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
Using AUTODUCK.EXE{\v ctx_autoduckexe}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Makefile Entries for Autoduck{\v ctx_makefile}\par 

\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Customizing Output\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck lets you change the format of output 
produced by Autoduck. You can add tags, change the structure of topic indexes, 
and even define new output file types.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
Creating Links Across Multiple Help Files{\v ctx_xlinks}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Generating Topic Indexes{\v ctx_topicindex}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Conditional Topic and Paragraph Extraction{\v ctx_extract}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Extraction and Filtering Expressions{\v ctx_exexpr}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Topic Logs{\v ctx_topiclogs}\par 

\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Format-File Reference\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Tags and output strings are defined in a format file 
like AUTODUCK.FMT. You can customize AUTODUCK.FMT or define your own format file.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
Defining Tags and RTF Output Strings{\v overview}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[CONSTANT]{\v sect_CONSTANT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[DIAGRAM]{\v sect_DIAGRAM}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[EXTENSION]{\v sect_EXTENSION}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[FILE]{\v sect_FILE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[INDEX]{\v sect_INDEX}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[PARAGRAPH]{\v sect_PARAGRAPH}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TEXT]{\v sect_TEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TOKEN]{\v sect_TOKEN}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
About Autoduck\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 About Autoduck\par 
\pard\plain \s93\sl240 \fs21\lang1033 
The sources for this Help file were generated 
by Autoduck, the source code documentation tool that generates Print or 
Help files from tagged comments in C, C++, Assembly, and Basic source 
files.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For more information, contact Eric Artzt (erica@microsoft.com).\par
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 About Autoduck\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck is a command-line utility that extracts specially tagged 
comment blocks from programming source files and generates rich text 
files containing the contents of those comment blocks. Autoduck has 
traditionally been used to document programming APIs.\par 

Placing API documentation within the source files helps programmers 
disseminate information about a developing codebase. Autoduck can 
generate online Help files containing full hypertext coding with links 
and keyword lists. Typically, Autoduck is integrated into the build 
process, so a new Help database can be automatically generated each 
build.\par 

Integration of documentation with code makes it easier to keep the 
documentation up to date. When developers make changes to APIs, they 
can quickly update the comment blocks at the same time. When APIs are 
released for use by outside customers, User Education personnel can 
edit the comment blocks, add example code, and generate final RTF files 
for inclusion in printed or online documentation.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Autoduck Comment Blocks\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 AUTODUCK.EXE scans through a source file and extracts information 
marked with Autoduck tags. Autoduck information is stored in {\i topics}, 
discrete units of information. For example, a topic might consist of 
a function reference description or a discussion of sample code. The 
following example shows an Autoduck topic:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // CLazyInterface::QueryInterface\par 

//\par 

// @mfunc\tab Implements <om IUnknown.QueryInterface>.\par 

//\par 

// @comm\tab The default implementation delegates to the\par 

//              controlling unknown.\par 

//\par 

HRESULT FAR PASCAL CLazyInterface::QueryInterface(\par 

\par 

REFIID riid,        // @parm Requested interface.\par 

LPVOID FAR *ppv)    // @parm Where to store the returned <f AddRef>'d\par 

\tab \tab \tab \tab \tab //          interface pointer.\par 

\{\par 

\tab DPF3("CLazyInterface::QI('%s')\\n", DebugIIDName(3, riid));\par 

\par 

\tab // delegate to controlling unknown\par 

\tab return m_punkOuter->QueryInterface(riid, ppv);\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The @mfunc tag marks the start of a new topic describing a C++ 
member function. The @comm and @parm tags identify paragraph types 
within the comment blocks (these mark comment and parameter 
descriptions, respectively). The angle bracket codes (<f > and <om >) 
are text tags marking special types of text (functions and object 
methods).\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Autoduck is Free!\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck is free. There is no licensing fee or restriction. 
The application is considered sample code and is not supported by Microsoft Corporation. 
Here's the legalese:\par 

THIS TOOL IS NOT SUPPORTED BY MICROSOFT CORPORATION. IT IS PROVIDED "AS 
IS" BECAUSE WE BELIEVE IT MAY BE USEFUL TO YOU. WE REGRET THAT 
MICROSOFT IS UNABLE TO SUPPORT OR ASSIST YOU SHOULD YOU HAVE PROBLEMS 
USING THIS TOOL.\par 

You are free to use the application, distribute it to others, and/or modify the source code. 
If you make changes, have comments, or find bugs, you can mail them to me, Eric Artzt, at 
my Internet address:\par 

erica@microsoft.com\par 

I can't guarantee that I will fix your bug, or even answer your question right 
away, because regrettably, supporting Autoduck is not what I do for a living - rather, I 
produce children's software products - but I will do what I can as time (and interest) 
permits.\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Features of Autoduck\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following are some interesting features of Autoduck:\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Flexible Tag Definition\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck tags are defined in a text 
file called a formatting file. The formatting file defines which tags 
are recognized as well as the RTF output for a tag. The formatting file 
makes it easy to define your own tags or modify the formatting applied 
to topic text. Autoduck comes with a standard formatting file, 
AUTODUCK.FMT, that defines commonly used tags for C, C++, and the OLE2 
Component Object Model (COM).\par 

For more information, see \ldblquote Defining Tags and RTF Output Strings\rdblquote 
.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Source Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can extract certain information from 
the C/C++ source declarations. For example, developers can type a 
function name in the comment block, or allow Autoduck to extract a 
function name from the function header.\par 

For more information, see \ldblquote Source Parsing\rdblquote 
.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Extraction Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 When performing an Autoduck build, you can use 
extraction tags to specify which Autoduck topics are included. This is 
useful when your codebase has both internal and external APIs, or when 
you want to generate RTF files for a subset of topics.\par 

For more information, see \ldblquote Conditional Topic and Paragraph 
Extraction\rdblquote 
.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Topic Logs\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can reference a topic log file when 
generating hypertext links for RTF. A topic log file lists the set of 
topics available to link to. If a topic is listed in the topic log, 
Autoduck can create a hypertext link to it. If the topic is not listed, 
Autoduck can generate alternate formatting (like bold text).\par 

For more information, see \ldblquote Topic Logs\rdblquote 
.\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Autoduck Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck uses tags to identify what type of information is 
contained in a comment block. For example, a tag might identify 
a paragraph as a description of a parameter or return value of 
a function.\par 

An Autoduck tag consists of an ampersand (@) followed by a tag 
name. Most Autoduck tags are defined in a format-information file, 
which is required by the AUTODUCK.EXE tool. The format-information 
file defines the number of fields within a tag, the formatting 
strings to output for the tag, and extraction information for 
the tag. AUTODUCK.EXE only recognizes tags that appear as the first 
item within a line of comment text.\par 

There are three basic types of Autoduck tags:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab The @DOC tag, which signals the beginning of Autoduck information 
within a source file and defines flags used to determine which Autoduck 
information to extract.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Topic tags that define new Autoduck topics.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Paragraph tags that define new types of paragraphs within Autoduck 
topics.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 All three types of tags must conform to the following 
formatting conventions:\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Tag names must begin with the "@" character.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab White space is not allowed within a tag name.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Tag names are not case-sensitive.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Topic and paragraph tags contain one or more {\i fields} of text. 
Fields are delimited by pipe (|) characters.  A field can contain 
multiple paragraphs of text (paragraphs are delimited by consecutive 
newlines). For example, the following @PARM tag defines information for 
a paragraph about a function parameter:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@parm int | iType | Specifies the type.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck output combines formatting codes stored in the 
formatting specification file with field text parsed from the Autoduck 
comments in the source file. In the above example, the parameter name 
{\i iType} might be output in italics, followed by an indented paragraph 
containing the third (description) field.\par 

In addition, Autoduck provides for text tags that identify special 
types of paragraph text (for example, a function or message name). 
The three types of @ tags, as well as the text tags, are described 
in the following sections.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 @DOC Tag\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The @doc tag must be the first Autoduck tag 
encountered in the source file. The @doc signals the beginning of 
Autoduck information within a source file and identifies 
{\i extraction flags}, tokens used to classify Autoduck topics. For 
example, you can classify Autoduck information as EXTERNAL or INTERNAL, 
then extract only those topics falling under the EXTERNAL category.\par 

For more information on @DOC, see 
\ldblquote Conditional Topic and Paragraph Extraction\rdblquote 
.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Topic Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 An Autoduck topic begins with a topic 
tag. Topic tags are defined in the [TOPIC] section of the 
formatting file.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows a @FUNC tag, which defines a new topic 
describing a function:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@func int | MyFunction | This function performs a useful task.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The function has three fields, for the return value, function 
name, and function description. The text in these fields is written 
to the output file.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Paragraph Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 A paragraph tag defines a paragraph 
within a topic. Paragraph tags are defined in the [PARAGRAPH] section 
of the formatting file.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following @PARM tag defines a topic 
paragraph containing a description of a function parameter:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@parm char *| szText | Specifies a pointer to a text string.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Text Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Text tags can be used within topic and paragraph tags to identify 
references to document elements and to generate special characters such 
as the trademark symbol. Text tags conform to the following guidelines:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab The tag and its fields are enclosed in angle brackets (< >).\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Fields are separated by a period (.) or double colon (::).\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Tag names are not case-sensitive.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 A text tag begins with the opening bracket, followed 
immediately by the tag name. Fields, if present, are placed following a 
single space following the tag name:\par 

<tagname field1.field2.field3>\par 

Text tags are defined in the [TEXT] section of the formatting file.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following @FUNC tag contains the text 
"YourFunction" marked with a function name type:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func int | MyFunction | This function performs a useful task. But\par 

// always be sure to call <f YourFunction> first!\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Autoduck Comment Blocks\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck-tagged text can reside in any text file, as long as it resides 
within a C/C++, Assembler, or BASIC comment block.\par 

Note the following guidelines for Autoduck comment blocks:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Autoduck topics can reside in a single comment block, or they can 
span multiple comment blocks.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Autoduck comment blocks can begin anywhere on a line (they can 
be preceded by source statements).\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab C-language comment blocks can use the slash/asterisk format (/* 
closed by */) or the slash/slash format (//).\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Assembly-language comment blocks must be a series of comment statements 
beginning with semicolon (;) characters.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Basic-language comment blocks must be a series of comment statements 
beginning with apostrophe (') characters.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab A @DOC tag must precede any autoduck tags within the source file. 
The extraction flags established by an @doc tag remain in effect until 
the end of the file, or until the next @doc tag encountered.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Examples of Comment Blocks\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section contains several 
examples of Autoduck blocks.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following comment block includes an @DOC tag and @FUNC tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 /*\par 

  * This text is ignored by Autoduck.\par 

  *\par 

  * @doc\par 

  *\par 

  * @func int | MyFunc | This function performs a useful task.\par 

  */\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Following are other variations, using different types of comment 
delimiters:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // C++ slash-slash comment\par 

//\par 

// This text is ignored by Autoduck.\par 

//\par 

// @doc\par 

//\par 

// @func int | MyFunc | This function performs a useful task.\par 

\par 

; Assembly language comment\par 

;\par 

; This text is ignored by Autoduck.\par 

;\par 

; @doc\par 

;\par 

; @func int | MyFunc | This function performs a useful task.\par 

\par 

' BASIC comment\par 

'\par 

' This text is ignored by Autoduck.\par 

'\par 

' @doc\par 

'\par 

' @func int | MyFunc | This function performs a useful task.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Noise Characters\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following characters are considered to be noise characters 
and are stripped from text before it is output:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Leading white space characters (spaces and tabs).\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Asterisks, semicolons, and apostrophes in the first character 
position, and any similar characters immediately following the first 
character position.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Asterisks in the second character position if the first character 
is a space.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Topics Spanning Multiple Comment Blocks\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck blocks can 
span several comment blocks. The Autoduck-tagged text is appended to 
the preceding Autoduck topic within the source file.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example includes three separate comment blocks. 
The function topic is started in the first comment block, and the 
parameter paragraphs are specified in later comment blocks:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // SetEmptyFields\par 

//\par 

// @func This function sets all empty fields to point to stub text.\par 

//\par 

void SetEmptyFields(\par 

\tab PTAG ptag, \tab   //@parm Specifies the tag to fill.\par 

\tab int nFields)  //@parm Specifies how many fields.\par 

\{\par 

\tab int i;\par 

\par 

\tab for(i = ptag->nNumFields; i < nFields; i++)\par 

\tab \tab ptag->szField[i] = gszEmptyField;\par 

\par 

\tab ptag->nNumFields = nFields;\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This example also shows the source-parsing capability of 
Autoduck; normally, the @FUNC tag requires three fields (return value, 
function name, and description), so Autoduck parses the function header 
immediately following the first comment block to obtain the return 
value and function name.\par
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Source Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck has the capability of extracting tag fields from C/C++ and 
Visual Basic source 
statements. The purpose of this source-parsing capability is to 
eliminate redundant entry of type and variable declarations. To enable 
source parsing for an autoduck tag, you must add a 
\ldblquote .PARSESOURCE\rdblquote 
 entry in the formatting file 
specification for that tag.\par 

If the required source-parsing entry is specified in the formatting 
file, Autoduck attempts to parse the tag fields from the source text if 
the required fields are not present in the tag itself. For example, if 
the @parm tag expects three fields (parameter type, name, and 
description), and only one tag (description) is present, Autoduck will 
check the formatting-file entry to see whether source parsing is 
enabled. If it is, Autoduck will try to extract the missing fields from 
the source text.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Supported Source Parsing Configurations\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can parse 
source text from two locations:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab A source declaration following an Autoduck comment block\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab A source declaration occurring on the same line on which an 
Autoduck comment block begins (comment following the source element)\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Here are examples of both types:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@func This is my function.\par 

//@parm This is a string parameter.\par 

//@parm This is a integer parameter.\par 

\par 

int MyFunction(char *sz, int i)\par 

\{\par 

...\par 

\}\par 

\par 

//@func This is another function.\par 

\par 

int AnotherFunction(\par 

\tab char *sz, //@parm This is a string parameter.\par 

\tab int i)    //@parm This is a integer parameter.\par 

\{\par 

...\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Parameter and Structure Field Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can parse the 
type specifier and variable name from a function parameter or structure 
field. The parameter/field type and name are deposited in the first two 
fields of the tag record.\par 

To enable parameter or field parsing, you must add either the 
statement \ldblquote .PARSESOURCE=parameter\rdblquote 
 or 
\ldblquote .PARSESOURCE=field\rdblquote 
 to the tag definition.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Function and Member Function Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can parse the 
return type, function name, and (if applicable) class name from a 
function or member function definition.\par 

For functions, the return type and function name are deposited 
in the first two fields of the tag structure. For member functions, the 
return type, class name, and function name are deposited in the first 
three fields of the tag structure.\par 

To enable function or member function parsing, you must add 
either the statement \ldblquote .PARSESOURCE=function\rdblquote 
 or 
\ldblquote .PARSESOURCE=memberfunction\rdblquote 
 to the tag definition.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Class Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can parse the class name from a class 
declaration. It does not parse a "const" keyword; to add a "const" 
keyword, use an "@this const" tag within the comment block.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To enable class parsing, you must add the statement 
\ldblquote .PARSESOURCE=class\rdblquote 
 to the tag definition.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Enumeration Member Parsing\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can parse the names of 
enumeration members.\par 

To enable enumeration member parsing, you must add the statement 
\ldblquote .PARSESOURCE=emem\rdblquote 
 to the tag definition.\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Nesting Topics Inside Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To document 
inline member functions, class structures, and class enumeration types, 
you can created nested topics that generate both an Autoduck paragraph 
and a separate Autoduck topic.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, consider the following C++ class declaration:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 class CString \{\par 

\par 

public:\par 

\tab CNested(void) \{ m_szText = NULL; \}\par 

\tab ~CNested(void) \{ Reset(); \}\par 

\par 

\tab void Reset(void) \{ if(m_szText) delete m_szText; m_szText = NULL; \}\par 

\par 

\tab enum CompareFlags \{\par 

\tab \tab compNormal,\par 

\tab \tab compIgnoreCase,\par 

\tab \tab compFuzzy,\par 

\tab \}\par 

\par 

\tab int Compare(const char *szCompText, int nCompFlags = 0);\par 

\par 

\tab void Set(const char *szText);\par 

\par 

private:\par 

\tab char *m_szText;\par 

\};\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The inline constructor and member functions can have their own 
topics, as can the CompareFlags enumeration type.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Tagging Nested Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To generate a topic for nested 
constructs, tag the construct with a paragraph tag, but add a topic tag 
after the paragraph tag.\par 

Also, you can define paragraph tags that only apply to the nested 
topic, and are not picked up as part of the main topic.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, here is the same class Autoduck'ed:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@class A simple string class.\par 

\par 

class CString \{\par 

\par 

public:\par 

\tab //@cmember,mfunc Constructor, initializes string to empty.\par 

\par 

\tab CNested(void) \{ m_szText = NULL; \}\par 

\par 

\tab //@cmember,mfunc Destroys the string, if present.\par 

\par 

\tab ~CNested(void) \{ Reset(); \}\par 

\par 

\tab //@cmember,mfunc Destroys the string, if present.\par 

\par 

\tab void Reset(void) \{ if(m_szText) delete m_szText; m_szText = NULL; \}\par 

\par 

\tab //@cmember,menum Comparison flags for the <mf .Compare> function.\par 

\par 

\tab enum CompareFlags \{\par 

\tab \tab compNormal,             //@@emem Case-sensitive compare.\par 

\tab \tab compIgnoreCase,         //@@emem Case-insensitive compare.\par 

\tab \tab compFuzzy,              //@@emem Fuzzy compare, if words sound\par 

\tab \}                           // alike\par 

\par 

\tab //@cmember Comparison function.\par 

\par 

\tab int Compare(const char *szCompText, int nCompFlags = 0);\par 

\par 

\tab //@cmember Sets the text of the string.\par 

\par 

\tab void Set(const char *szText);\par 

\par 

private:\par 

\tab //@cmember Pointer to string text.\par 

\par 

\tab char *m_szText;\par 

\};\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Format-File Entries for Nested Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To generate the topic 
tag for a nested topic, Autoduck first parses the paragraph tag, then 
copies the paragraph fields over into the topic tag. The {\b .MAP} format-file entry defines how paragraph-tag fields are 
mapped over to the topic tag.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following entry for the {\b @cmember} tag defines 
how fields in that tag are mapped over to topic fields. There are 
{\b .MAP} entries for the {\b @mfunc}, {\b @menum}, and {\b @mstruct} tags.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .tag=cmember, help, 4, 2\par 

.pre=$[classhdr]\par 

.format=$(reset)$(term1)\{\\uldb $1\}\{\\v #1\} \{\\uldb $2\}\{\\v #class.1__#2\}\\par\par 

$(reset)$(def1)$4\\par\par 

\par 

.if=exists($class.1::$<2),fieldempty(3),exists($1)\par 

.parsesource=classmember\par 

.map=mfunc,$1,$t.1,$2,$4\par 

.map=enum,$1,$2,$4\par 

.map=struct,$1,$2,$4\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @mfunc} entry maps four {\b @cmember} fields over to the 
topic tag. The first {\b @mfunc} field receives the first {\b @cmember} 
field; the second {\b @mfunc} field receives the first field of the 
enclosing topic ({\b @class}) tag; and the third and fourth fields 
receive the second and fourth fields, respectively, of the {\b @cmember} 
tag.\par
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Using AUTODUCK.EXE\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 AUTODUCK.EXE is a console application that extracts and formats 
Autoduck source files.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following is the command-line syntax for AUTODUCK.EXE:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 AUTODUCK [/v] [/e] [/n] [/a] [/u] [/r[dh]] [/t[0-9]]\par 

\tab \tab [/o filename] [/l filename]\par 

\tab \tab [/f filename] [/c filename]\par 

\tab \tab [[/x id]...] [[/d name=text]...] files\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\trowd \trgaph108\trleft240 \cellx1980\cellx6840 
\pard\plain \sa60\intbl {\b Option\cell Description} \cell \pard \intbl \row \intbl [/v] \cell Prints detailed status information to the console.\cell \pard \intbl \row \intbl [/e] \cell Suppresses warnings about empty fields.\cell \pard \intbl \row \intbl [/n] \cell Suppresses topic and .HPJ output; only 
creates log file (if specified).\cell \pard \intbl \row \intbl [/a] \cell Appends RTF and log-file output to existing files.\cell \pard \intbl \row \intbl [/u] \cell Suppresses sorting of topics.\cell \pard \intbl \row \intbl [/rd] \cell Generate RTF for Print, using the formatting 
information tagged either as "DOC" or "BOTH". This is the default.\cell \pard \intbl \row \intbl [/rh] \cell Generate RTF for Help, using the formatting 
information tagged either as "HELP" or "BOTH".\cell \pard \intbl \row \intbl [/t[0-9]] \cell Sets the tab size for example tags. Use the same 
setting used in your text editor. The default value is 8.\cell \pard \intbl \row \intbl [/o filename] \cell Use output file <filename>.\par 

If no output file is specified, Autoduck creates an output file with the 
same filename as the first input file, and extension .RTF.\cell \pard \intbl \row \intbl [/l filename] \cell Creates topic log <filename> using the 
topics extracted in the current build. The topic log is a list of topic 
names included in the current build.\cell \pard \intbl \row \intbl [/f filename] \cell Use format file <filename>.\par 

If no format file is specified, Autoduck searches for Autoduck.FMT 
in the directory where AUTODUCK.EXE is stored, and then in the 
directories referenced by the PATH environment variable.\cell \pard \intbl \row \intbl [/s filename] \cell Use supplemental format file <filename>.\par 

You can specify a supplemental format file in addition to the main 
format file. Entries in the supplemental format file override or add to 
the entries in the main format file. Using a supplemental file, you can 
define project- or group-specific variations to the default AUTODUCK.FMT 
file.\par 

Note that you can also insert your additional entries at the beginning 
of the AUTODUCK.FMT file. This way, the local entries will be used in 
place of the standard ones, and you can avoid specify the /S option 
each time you run Autoduck.\cell \pard \intbl \row \intbl [/c filename] \cell Specifies topic log <filename> for the 
build. The topic log specifies a list of topics that can be linked to 
and is generally used to determine what type of formatting information 
to output for a paragraph or text tag (for example, bold if no 
topic is available, and hypertext link if a topic is a available).\cell \pard \intbl \row \intbl [/x id] \cell Specifies an extraction expression for the build. 
Only those topics with {\b @doc} flags matching the expression are 
extracted. If no extraction flags are specified, all topics are extracted.\par 

For more information on extraction expressions, see 
\ldblquote Extraction and Filtering Expressions\rdblquote 
 and 
\ldblquote Conditional Topic and Paragraph Extraction\rdblquote 
.\cell \pard \intbl \row \intbl [/d const_name=const_text] \cell Defines a text constant 
"const_name" as "const_text". Constants can be referenced in the 
format file for RTF output. By defining a constant on the command line, 
you can override a constant defined in the format file.\par 

For more 
information on constants, see the discussion of the {\b [CONSTANT]} 
section.\cell \pard \intbl \row \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Makefile Entries for Autoduck\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The DKOALA example project 
included with Autoduck uses MAKEDOCS.MAK, a Microsoft Visual C++ 
makefile. MAKEDOCS.MAK is a generic Autoduck makefile that generates 
Help and Print documentation files using the set of C/C++ files in the 
current project directory.\par 

You can run it on the command line using:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 NMAKE /f makedocs.mak ProjDir="Project Directory" Project="Project Name"\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can also run it as a Visual C++ "custom build" entry, using 
the following custom build entries:\par
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 Build Command(s):\par 

\tab nmake /f makedocs.mak Project="$(WkspName)" ProjDir="$(ProjDir)"\par 

\par 

Output Files(s):\par 

\tab Autoduck\\$Project.Hlp\par 

\tab Autoduck\\$Project.Doc\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 MAKEDOCS.MAK\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The only entry you need to customize below is the 
ADTOC entry. Make sure it points to the generic Autoduck CONTENTS.D 
file or to a custom contents file you have created specifically for 
your project.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 # Autoduck MAKEFILE\par 

#\par 

# Eric Artzt, Program Manager\par 

# Consumer Division, Kids Software Group\par 

# Internet  :  erica@microsoft.com\par 

#\par 

\par 

\par 

OUTDIR  = $(ProjDir)\\Autoduck\par 

TARGET  = $(Project)\par 

TITLE   = $(TARGET) Help\par 

DOCHDR  = $(TARGET) API Reference\par 

AD      = autoduck.exe\par 

ADTOC   = "C:\\Bin\\Contents.D"\par 

ADHLP   = /RH /O$(OUTDIR)\\$(TARGET).RTF /D "title=$(TITLE)"\par 

ADDOC   = /RD /O$(OUTDIR)\\$(TARGET).DOC /D "doc_header=$(DOCHDR)"\par 

ADTAB   = 8\par 

HC      = hcw /a /e /c\par 

SOURCE  = *.cpp *.h\par 

\par 

# Help and Doc targets\par 

\par 

target ::\par 

!if !EXIST("$(OUTDIR)")\par 

\tab md $(OUTDIR)\par 

! endif\par 

\par 

target :: $(TARGET).hlp $(TARGET).doc\par 

\par 

clean:\par 

\tab if exist $(OUTDIR)\\*.rtf del $(OUTDIR)\\*.rtf\par 

\tab if exist $(OUTDIR)\\*.hpj del $(OUTDIR)\\*.hpj\par 

\tab if exist $(OUTDIR)\\$(TARGET).doc del $(OUTDIR)\\$(TARGET).doc\par 

\tab if exist $(OUTDIR)\\$(TARGET).hlp del $(OUTDIR)\\$(TARGET).hlp\par 

\par 

# Generate a Help file\par 

\par 

$(TARGET).rtf : $(SOURCE) $(ADTOC)\par 

\tab $(AD) $(ADHLP) /t$(ADTAB) $(ADTOC) $(SOURCE)\par 

\par 

$(TARGET).hlp : $(TARGET).rtf\par 

\tab $(HC) $(OUTDIR)\\$(TARGET).HPJ\par 

\par 

# Generate a print documentation file\par 

\par 

$(TARGET).doc :  $(SOURCE)\par 

\tab $(AD) $(ADDOC) /t$(ADTAB) $(SOURCE)\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Creating Links Across Multiple Help Files\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To create hyperlinks across multiple Help 
files, you need the new Win95/Winnt 3.51 Help compiler 
(HCW) and viewer (WinHlp32). You will create a Help Contents file 
that will be referenced by all the help files, and you will edit the 
HPJ files produced by Autoduck to reference the new .CNT file. 
Luckily, you only need to do this once, since the HPJ file is not 
overwritten by Autoduck, and you can save the .CNT file between 
builds. Make sure your makefile is not deleting the HPJ on a cleanup 
pass.\par 

Here's how to do it:\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Step 1: Construct a Cross-Build Log File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Construct a cross-build log file listing all the topics in all the 
help files you wish to link. For example:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 autoduck /n /rh /lproject.log project1\\*.cpp project1\\*.h\par 

autoduck /n /rh  /a /lproject.log project2\\*.cpp project2\\*.h\par 

autoduck /n /rh  /a /lproject.log project3\\*.cpp project3\\*.h\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Step 2: Create the RTF Files\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Build the separate Help RTF files referencing the log file you 
built earlier. For example:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 autoduck /n /rh  /cproject.log project1\\*.cpp project1\\*.h /oproject1.rtf\par 

autoduck /n /rh  /cproject.log project2\\*.cpp project2\\*.h /oproject2.rtf\par 

autoduck /n /rh  /cproject.log project3\\*.cpp project3\\*.h /oproject3.rtf\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Now your Autoduck RTF files are hyperlinked across the various help 
files. If you had not run the log file build in step (1) and 
referenced it in step (2), Autoduck would not have generated 
hyperlinks for the cross-file topic references.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Step 3: Create a Help Contents (.cnt) File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The new Help compiler provides a contents file feature that 
can be used to build 
elaborate tables of contents for Help files. In this case, we are 
only using it to make a list of the Help files we want to associate. 
You can use the HCW application, or you can edit it yourself.\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 1\tab Do File.New to create a new Help Contents file.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 2\tab Click the Index Files button at the bottom of the dialog.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 3\tab In the Index Files dialog, click Add to add a help file to 
your list. You need to type a short descriptive name and the Help 
filename. Do this for each help file you want to reference.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 4\tab Save the .CNT file (e.g., in the above example, you might 
call it "Project.CNT")\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The resulting file contains the following lines:\par
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 :Index Project 1 Help File=project1.hlp\par 

:Index Project 2 Help File=project2.hlp\par 

:Index Project 3 Help File=project3.hlp\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Step 4: Reference the Contents File in the HPJ File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the HCW application to edit the Help project file produced by 
each Autoduck build. Open the .HPJ file generated by Autoduck and make 
the following steps:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 1\tab Click the Options button.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 2\tab Click the Files tab.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 3\tab Type the name of the .CNT file you created in step 3.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Step 5: Build the Help Files\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Build each help file individually using HCW:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 hcw /a /c /e project1.hpj\par 

hcw /a /c /e project2.hpj\par 

hcw /a /c /e project3.hpj\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Generating Topic Indexes\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck 2.0 includes a new {\b @index} tag that lets you generate topic 
indexes like the ones displayed on the table of contents pages of Help 
files. A topic index can appear in any topic.\par 

By default, a topic index lists all topics included in the current 
build. You can filter the set of topics included by specifying filter 
expressions, for the topic type, extraction tag set, or both. For more 
information on extraction expressions, see 
\ldblquote Extraction and Filtering Expressions\rdblquote 
.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following {\b @index} tag displays all {\b @class } 
and {\b @mfunc} topics appearing under the extraction flags PARSE or OUTPUT:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@index Parse and Output | class mfunc | PARSE OUTPUT\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Default Contents File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck includes a sample contents file, 
CONTENTS.D, that you can use as a start. You can place this file in the 
same directory as AUTODUCK.EXE and include it in your Autoduck builds. 
You can also customize it to better suit the needs of your projects.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Creating a Module Table of Contents\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To create a list of all 
programming constructs defined in a certain source module, define a 
unique extraction flag for that module, then include an {\b @index} tag 
in the {\b @module} topic for that module.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @module} comment from the 
DKOALA.CPP file included in the Autoduck example project. The extraction 
flag DKOALA is defined at the top of the file, and the {\b @index} tag 
included in the module comment generates an index with title "DKOALA 
Elements" including all source elements included in the file.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @doc DKOALA\par 

//\par 

// @module DKOALA.CPP - Koala Object DLL Chapter 4 |\par 

//\par 

// Example object implemented in a DLL.  This object supports\par 

// IUnknown and IPersist interfaces, meaning it doesn't know\par 

// anything more than how to return its class ID, but it\par 

// demonstrates a component object in a DLL.\par 

//\par 

// @head3 DKOALA Elements |\par 

// @index | DKOALA\par 

//\par 

// @normal Copyright (c)1993 Microsoft Corporation, All Rights Reserved\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Conditional Topic and Paragraph Extraction\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can limit the set of topics extracted in an Autoduck build. You can 
also code special-case paragraph tags that are only extracted in 
certain conditions. To define which topics or paragraphs are extracted, 
you use extraction tokens. Extraction tokens are words identifying a 
class of topics or paragraphs. For example, you might code some topics 
as INTERNAL (Microsoft only) and others as EXTERNAL (for release in 
external documentation).\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Associating Extraction Tags with Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the @DOC tag to associate extraction tokens with topics. The @DOC 
tag must precede any Autoduck topics in the source file. The @DOC tag 
names a set of extraction tokens to assign to all following topics.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following @DOC tag defines EXTERNAL and WAVE 
tokens for all topics following the tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @doc EXTERNAL WAVE\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The extraction tokens set by an @doc tag remain in effect until the end 
of the source file, or until the next @doc tag. For example, you can 
code a single @doc tag at the beginning of the file, and the extraction 
tokens specified by that tag are used for all Autoduck topics in the 
source file. To reset the extraction tokens, just add another @DOC tag 
where you want the new tokens to take effect.\par
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Associating Extraction Tags with Individual Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can also associate extraction tokens with individual topic or 
paragraph tags. This feature can only be used to exclude topics or 
paragraphs that would otherwise have been included in a build, given 
the {\b @doc} flags set in their area of the source file.\par 

In other words, if you have an entire module labeled as @doc EXTERNAL, 
and you want to exclude a single topic or paragraph as internal, you 
can mark that individual tag as INTERNAL and it will be excluded from 
an EXTERNAL build.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, you might define EXTERNAL and INTERNAL tokens to define 
which topics are for external publication and internal publication. At 
the paragraph level, you might also define tokens for specific API 
variations (for example, WIN4J). To associate extraction tokens with a 
paragraph tag, use the following syntax:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@tagname:(TOKEN [TOKEN...])\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example associates a WIN4J token with an @member 
paragraph tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@flag:(WIN4J) KANJI_ONLY_FLAG | This flag...\par 

//@flag:(WIN4G) GERMAN_ONLY_FLAG | This flag...\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 By specifying WIN4J on the Autoduck command line, you could extract just 
KANJI_ONLY_FLAG and omit GERMAN_ONLY_FLAG.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 In another example, a topic might contain some paragraphs for 
internal consumption only:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @doc EXTERNAL\par 

\par 

// @func int | QuickFixFunc | This function does something...\par 

//\par 

// @rdesc A pointer to something.\par 

//\par 

// @comm:(INTERNAL) This implementation is flawed and needs to be fixed\par 

// for real next time.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Specifying Extraction Tokens on the Command Line\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The /X command line option lets you specify an extraction expression 
defining which topics to extract in the build. For 
example, the following Autoduck command extracts only those topics that 
have both the EXTERNAL and WIN4J tags:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 autoduck /x "EXTERNAL & WIN4J" *.c *.h *.d /okanji.rtf\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 See \ldblquote Extraction and Filtering Expressions\rdblquote 
 for 
details on the expression syntax.\par
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Extraction and Filtering Expressions\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck 2.0 lets you specify topic extraction sets and topic index sets 
using simple boolean expressions. Expressions can be used in the 
following places:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Following the /X command-line option, to specify a subset of 
topics to extract during a build.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab In the $[index] format-file code, to specify a subset of topic 
titles to include in a topic index. The $[index] code is exposed to 
users via the @index tag.\par
\pard\plain \s253\sb140\sa60\sl-380\keepn \b\f16\fs34\lang1033 Expression Syntax\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck filtering expressions use a 
simplified C syntax, using OR and AND operators. You can group 
subexpressions with parentheses.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 OR Operator\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can use three versions of OR operator:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Pipe (|)\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Comma (,)\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Space (no operator, OR is implied)\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The different variants are provided for backwards compatibility 
with version 1x $[index] codes, and to provide for easy expression 
entry within Autoduck tag fields, where the pipe symbol works as a field 
separator.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following expressions all evaluate to TRUE if any 
of the tags ONE, TWO, or THREE are matched:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 ONE TWO THREE\par 

ONE, TWO, THREE\par 

ONE | TWO | THREE\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 AND Operator\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The AND operator uses an ampersand (&).\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following expression evaluates TRUE only if all 
three of the tags ONE, TWO, and THREE are matched:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 ONE & TWO & THREE\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Parenthesized Expressions\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can use parentheses to group 
expressions.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following expression evaluates TRUE only if the 
tag EXTERNAL is present, along with any of ONE, TWO, or THREE:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 EXTERNAL & (ONE TWO THREE)\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Evaluation Order\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Expressions are evaluated from left to right. 
Parenthesized subexpressions are evaluated first. Neither operator has 
precedence.\par 
\pard\plain \s253\sb140\sa60\sl-380\keepn \b\f16\fs34\lang1033 Using Expressions for Topic Extraction\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the /X command-line 
option to specify a subset of topics to extract during a build.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following Autoduck command line extracts only those 
topics with the tag EXTERNAL and any of the tags ONE, TWO, or THREE:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 autoduck /x "EXTERNAL & (ONE TWO THREE)"\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The quotations are required to group the expression as a single 
command-line option.\par
\pard\plain \s253\sb140\sa60\sl-380\keepn \b\f16\fs34\lang1033 Using Expressions for Index Filtering\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the {\b @index} tag 
to specify a topic index. You can filter by tag name and by extraction 
flag. The @index tag has the following syntax:\par 

// @index <index title> | <topic tag expression> | <extraction flag expression>\par 

You can leave off either of the two expressions, but you must include 
the field separators.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following @index tag creates a topic index of @class 
or @mfunc topics residing under the @doc flag NTSECURITY:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @index NT Security Classes | class mfunc | NTSECURITY\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Topic Logs\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck is often used to generate RTF for use in online documentation 
(Help). In help builds, text within paragraph and text tags is often 
used to generate hypertext links. For example, a function name is 
marked with an <f function> text tag, in a Help build, Autoduck 
generates RTF formatting for a hypertext link.\par 

However, a hypertext link needs something to link to, and frequently 
Autoduck topics reference topics that may not be present in the current 
build. For example, an Autoduck topic block might reference a function 
that is part of a standard system API not included in the current Help 
project. If a link target is unavailable, you don't want to create a 
hypertext link, because the link will cause an error in the Help file.\par 

Autoduck provides a topic log feature that lets you test for the 
existence of a link target, then generate the appropriate formatting 
depending on whether the link target exists. 
When you run Autoduck, you can specify a topic log file containing a 
list of topic names. The formatting file specifies alternate formatting 
blocks for paragraph or text tags, one used if the link target exists, 
and the other used if no link target exists.\par 

Autoduck can also generate a topic log file using the topics extracted 
in the current build. This topic log file can be edited and appended to 
other logs, to create a multi-build log file. Thus you can build your 
online documentation files from many different Autoduck builds, each of 
which references a central log file naming all the available link 
targets.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 The Topic Log File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 A topic log is a text file containing a list 
of topic names, each listed on a separate line terminated by a carriage 
return/line feed pair.\par 

To reference a topic log, you use the Autoduck /C option, as follows:\par 

autoduck /c mdatopic.log /rh *.cpp *.h\par 

To build a topic log using the list of topics extracted in the current 
build, you use the Autoduck /L option, as follows:\par 

autoduck /x EXTERNAL /l newfile.log *.cpp *.h\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Linking Formatting Specs to the Log File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 In the formatting 
specification file, you can specify alternate formatting information 
for paragraph and text tags. Autoduck lets you check the log file for a 
topic name, and use different formatting information depending on 
whether the topic name exists in the log.\par 

To specify conditions for Autoduck formatting information, you use the 
tag \ldblquote .IF\rdblquote 
 statement, which can be used in formatting 
blocks for paragraph and text tags and in formatting diagrams.\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Defining Tags and RTF Output Strings\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck draws its tag definitions and RTF formatting information from a 
formatting file. The formatting file defines the autoduck tags used in 
the source files and specifies RTF text output for those tags. See the 
provided AUTODUCK.FMT file for examples.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Locating the Formatting File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Since the formatting file defines 
the complete tagset used within the input files, Autoduck must have 
access to a formatting file. When searching for a formatting file, 
Autoduck looks in the location named by the /F command-line flag, if 
used. Otherwise, Autoduck looks in the current directory; on the search 
path; and then in the directory in which AUTODUCK.EXE is located.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Adding Supplemental Autoduck Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 To 
add new tags to the basic set provided in AUTODUCK.FMT, create your own 
supplemental formatting file.\par 

A supplemental formatting file is organized the same as AUTODUCK.FMT. 
You can copy tags or whole sections from AUTODUCK.FMT and modify them as 
needed. Tags defined in the supplemental formatting file have 
precedence over those in the main formatting file, so you can 
"override" the formatting strings or other attributes of standard tags 
in AUTODUCK.FMT.\par 

Use the /S command option to reference the supplemental formatting file 
when you run Autoduck. You can use multiple supplemental files.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Sections in the Formatting File\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The formatting file is divided 
into a series of sections. Each section has a heading enclosed in 
square brackets (for example, {\b [TOPIC]} or {\b [PARAGRAPH]}). The sections 
contain one or more items describing tags or other Autoduck elements.\par 

Sections may be repeated in the formatting file (e.g., you can have 
multiple {\b [PARAGRAPH]} sections).\par 

The sections are as follows:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Sections\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b [FILE]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines RTF text to insert at the beginning and end of 
the output file.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [TOPIC]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines topic types. A topic is identified by a 
unique type name and generates a single block of reference information 
in the output file. In an Autoduck input file, a topic begins with an @doc 
tag, followed by a topic tag (defined in the {\b [TOPIC]} section) 
identifying the type of information contained in the topic.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [PARAGRAPH]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines paragraph types. Paragraphs appear 
within topics and describe items like function parameters, structure 
fields, and message flags, comments, examples, and other document 
elements.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [TEXT]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines special text used within paragraphs. Special 
text items identify interesting phrases or elements (for example, 
function or structure names) and can have their own formatting 
attributes (such as bold or hypertext).\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [CONSTANT]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines string constants referenced by the 
formatting strings used for file, topic, paragraph, and text elements. 
Constants are useful for storing RTF formatting text in a central 
location; for example, you can define a string constant containing RTF 
formatting codes for an example paragraph and then reference that 
constant wherever you use an example paragraph. In addition, string 
constants can be defined or overridden using the /D command line flag, 
so you can insert build-specific text strings in the RTF output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [INDEX]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines the format of indexes inserted in the 
output file. An index is a list of topics; in Help, indexes can be 
used to create hypertext links to a series of related topics.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b [DIAGRAM]}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines diagrams to insert within topics. Diagrams 
are collections of text drawn from topic paragraphs. You can use 
diagrams to create syntax diagrams for functions, structures, 
enumerations, and other language elements.\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Comments\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can type comments within the formatting file. 
Preface any comment lines with a semicolon typed at the beginning of 
the line.\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Format Strings\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Format strings consist of literal 
output text mixed with special entries that reference fields from the Autoduck 
tags. In any format-string entry in the formatting file, the format string 
begins with the first non-blank character following the equal sign of the entry 
and ends with the first entry, section, or comment found following the formatting 
entry.\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following entry defines a format string that outputs 
the text "Field 1:" followed by the contents of field 1 of a tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .format= Field 1: $1\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following special elements can be present in a format 
string:\par
\pard\plain \s50\li720\keepn \fs21\lang1033 $$\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a dollar sign ($) character.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 ##\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a number (#) character.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $[{\i name}]\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a diagram {\i name} defined in the 
{\b [DIAGRAM]} section of the formatting file. The diagram is output in 
place of the $[{\i name}] code.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $[index{\i :topic_tag_expr:extr_flag_expr}]\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies an index to output. By default, all topic names processed in 
the build are output in the index. By adding the {\i :topic_tag_expr} 
and/or {\i :extr_flag_expr}, you can specify a subset of topics using 
a specified tag name or residing under a specified combination of 
extraction flags. For information on tag or flag expressions, see 
\ldblquote Extraction Expressions\rdblquote 
.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $({\i name})\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a string constant {\i name} 
defined in the {\b [CONSTANT]} section or passed to Autoduck via the 
/D command-line argument. The constant string is output in 
place of the $({\i name}) code.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 ${\i n}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a reference to field number {\i n} from within 
the tag. The contents of field number {\i n} are output in place of the 
${\i n} code. If the source paragraph was identified as an example 
paragraph in the {\b [PARAGRAPH]} section, the field text is output in 
example style.\par 

Field numbers start with 1 and end with the count of fields in the tag.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 ${\i tagname}.{\i n}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a reference to field number {\i n} 
from within tag {\i tagname}. Autoduck searches the topic's tag list for 
a tag matching {\i tagname}. If no matching tag is found, nothing is 
output.\par 

Field numbers start with 1 and end with the count of fields in the 
topic tag.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 #{\i n}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a reference to field number {\i n} from within 
the tag. The contents of field number {\i n} are output as a 
WinHelp/Viewer context string; any non-compliant characters are 
converted to underscores (_).\par 

If the field contains a substring enclosed in angle brackets (e.g., 
TemplateFunc<class b>), Autoduck strips the substring (including 
brackets) from the context string.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!d\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the current date.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!f\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the source filename of the tag. Use uppercase $!F 
to convert the filename to all uppercase; with lowercase $!f, the 
capitalization scheme of the original filename is used.\par 

If referenced in the {\b [FILE]} section, this code produces no output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!p\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the full path name of the source file from which the 
tag was extracted. Use $!P to make the path all uppercase.\par 

If referenced in the {\b [FILE]} section, this code produces no output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!l\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the source-file line number of the tag.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!c\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the topic context string.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 $!n\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Outputs the topic name.\par 

If referenced in the {\b [FILE]} section, this code produces no output.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [CONSTANT] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines constant strings used elsewhere 
in the formatting file. Constants are useful for reducing duplication of RTF strings in 
the formatting file. For example, y\par 

The {\b [CONSTANT]} section can contain one or more of the following 
items:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .OUTPUT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines the output type for the constants 
created in later {\b .DEFINE} statements.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .DEFINE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a constant string.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can use constants to define 
RTF strings for the standard paragraph styles, then refer to those 
constants in your tag format strings. The format for a constant 
reference is as follows:\par 

$(constant_name)\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 For example, the following topic-tag definition references\par 

constants called "reset," "rule", "rh1," and "normal": |\par 

\par 

.tag=struct, doc, 2, 50, $1\par 

.order=field comm ex\par 

.pre=$(reset)$(rule)\\par\par 

$(reset)$(rh1)$1\\par\par 

$[structure]\par 

$(reset)$(normal)$2\\par\par 

$(reset)$(normal)Defined in: $!p\\par\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Also, constants can be overridden by values passed on the command 
line (use the /d option). You can define a constant in the formatting 
file\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[CONSTANT]{\v sect_CONSTANT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DEFINE{\v CONSTANTDEFINE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v CONSTANTOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [DIAGRAM] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines diagrams. Diagrams are elements 
built from lists of paragraph tags defined within a topic. For example, a 
function syntax declaration is a diagram, as is a structure 
declaration.\par 

In the {\b [DIAGRAM]} section, you identify the following diagram items:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TAG\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This required item defines the diagram name 
and specifies the output type.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the 
beginning of the diagram.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the end 
of the diagram.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .FORMATFIRST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to use for 
the first repeating entry in the diagram.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .FORMAT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the default format string to use for 
repeating entries in the diagram. This item is required.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .FORMATLAST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to use for the 
last repeating entry in the diagram.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .CANCELIFPRESENT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a list of tag names that, if 
present in the topic, will prevent the diagram from being generated.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote IF\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies conditions in which this diagram 
formatting entry should be used. You can specify multiple 
\ldblquote IF\rdblquote 
 tags; the conditions specified by the multiple 
.IF tags have an implied OR relationship.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The bracket ([) preceding the {\b [DIAGRAM]} section name must 
appear in the first column (no leading spaces are allowed).\par 

For the .FORMATFIRST, .FORMATLAST, and .FORMAT items, AUTODUCK provides 
the field information for the paragraph corresponding to the current 
entry. For the .PRE and .POST items, AUTODUCK provides field information 
for the topic tag.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example creates a function syntax diagram using @param 
paragraph tags:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [diagram]\par 

\par 

.tag=function, doc, parm\par 

\par 

 Pre-formatting string specifies return value, function name, and\par 

 opening parenthesis\par 

\par 

.pre=\\pard \\plain $(d_normal)\{\\b $1\} \{\\b $2(\}\par 

\par 

 Post-formatting string specifies closing parenthesis and paragraph\par 

 mark.\par 

\par 

.post=\{\\b )\}\\par\par 

.formatfirst=\{\\b $1\} \{\\i $2\}\par 

.format=\{\\b , $1\} \{\\i $2\}\par 

.cancelifpresent=syntax\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[DIAGRAM]{\v sect_DIAGRAM}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CANCELIFPRESENT{\v DIAGRAMCANCELIFPRESENT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v DIAGRAMTAG}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [EXTENSION] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section associates source code language 
types with filename extensions. The source code language type determines 
the format of comment blocks within a source file.\par 

In the {\b [EXTENSION]} section, you identify a series of filename 
extensions using the following item:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote EXT\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a filename extension and associates a language 
type with the extension.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The bracket ([) preceding the EXTENSION section name must appear in the 
first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[EXTENSION]{\v sect_EXTENSION}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
EXT{\v EXTENSIONEXT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [FILE] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines the blocks of text that appear at 
the beginning and end of the output file. This information generally 
consists of the RTF header, including font table, color table, and 
style table, and any standard text. You can also include fields for 
outputting topic indexes.\par 

In the {\b [FILE]} section, you identify the following file attributes:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .OUTPUT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines a new block of file formatting 
information and specifies the output type for the information.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the 
beginning of the output file.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the end 
of the output file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The bracket ([) preceding the FILE section name must appear in the 
first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following {\b [FILE]} section example defines an RTF header used 
in a Help topic file:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [file]\par 

.output=help\par 

.pre=\{\\rtf1\\ansi \\deff0\\deflang1024\par 

\par 

\{\\fonttbl\par 

.\par 

.   // Font definitions\par 

.\par 

\}\par 

\par 

\{\\colortbl;\par 

.\par 

.   // Color definitions\par 

\}\par 

\par 

\{\\stylesheet\par 

.\par 

.   // Stylesheet definitions\par 

.\par 

\}\par 

\par 

\\pard\\plain $(h_heading_1)\par 

$$\{\\footnote $$ Contents\}\par 

\{\\footnote + contents:0000\}\par 

Contents\\par\par 

\par 

\\pard\\plain $(h_indexlink)\{\\uldb Overviews\}\{\\v ctx_overviews\}\\par\par 

\\pard\\plain $(h_indexlink)\{\\uldb Modules\}\{\\v ctx_modules\}\\par\par 

\\pard\\plain $(h_indexlink)\{\\uldb Classes\}\{\\v ctx_classes\}\\par\par 

\\pard\\plain $(h_indexlink)\{\\uldb Functions\}\{\\v ctx_functions\}\\par\par 

\\pard\\plain $(h_indexlink)\{\\uldb Messages\}\{\\v ctx_messages\}\\par\par 

\\pard\\plain $(h_indexlink)\{\\uldb Types\}\{\\v ctx_types\}\\par\par 

\par 

\\page\par 

\par 

\\pard\\plain $(h_heading_1)\par 

#\{\\footnote # ctx_overviews\}\par 

$$\{\\footnote $$ Contents: Overviews\}\par 

\{\\footnote + contents:0010\}\par 

Overviews\\par\par 

\par 

$[index:topic]\par 

\par 

\\page\par 

.\par 

.   // Other header topics\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[FILE]{\v sect_FILE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v FILEOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [INDEX] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines the format of WinHelp-style topic 
indexes. An index consists of a series of topic names. The index can 
list all topics in the build, or it can list a subset of topics by 
topic type (for example, @func or @api topics). Indexes are inserted in 
file formatting strings using the $[INDEX] specifier.\par 

AUTODUCK creates each index entry using the topic name (defined using 
the {\b .TAG} item in the {\b [TOPIC]} section). It also outputs a 
context string derived from the topic name. In the {\b [INDEX]} section, 
you can define the RTF formatting codes surrounding each entry in the 
index.\par 

The {\b [INDEX]} section can contain the following entries:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .OUTPUT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a new block of index formatting information for 
Help or print output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output before the index.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output after the index.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRENAME=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output before each 
topic name.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POSTNAME=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output after each 
topic name.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRECONTEXT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output 
before each context string.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POSTCONTEXT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output 
after each context string.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 All format entries are optional.\par 

Index formatting strings can use the field specifiers used for 
file formatting strings. For more information on formatting 
strings used within indexes as well as the $[INDEX] specifier used to 
insert an index, see \ldblquote Format Strings\rdblquote 
.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows an [INDEX] section that defines basic 
WinHelp links for each index entry. For the printed version, the 
context strings are hidden:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [index]\par 

\par 

 Help index\par 

.output=help\par 

.prename=\\pard\\plain $(h_indexlink)\{\\uldb\par 

.precontext=\}\{\\v\par 

.postcontext=\}\\par\par 

\par 

 Doc index\par 

\par 

.output=doc\par 

.prename=\\pard\\plain $(d_indexlink)\par 

.precontext=\{\\v\par 

.postcontext=\}\\par\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[INDEX]{\v sect_INDEX}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v INDEXOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [PARAGRAPH] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines paragraph tags. These tags 
follow the topic tag and define paragraphs within the 
topic. Paragraph tags are not associated with a specific type of 
topic; once defined, they can be used within any type of topic.\par 

In the {\b [PARAGRAPH]} section, you identify the following paragraph-tag 
attributes:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TAG\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This required item defines the tag name, the number of 
fields in the tag, and other characteristics.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote PARSESOURCE\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines source-parsing 
capabilities for the tag. Autoduck can retrieve source text declared 
outside the comment block, provided it is provided in a standard 
location.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote IF\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies conditions in which this 
paragraph tag entry should be used. You can specify multiple 
\ldblquote IF\rdblquote 
 tags; the conditions specified by the multiple 
.IF tags have an implied OR relationship.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote MAP\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Maps fields in a paragraph tag to a 
topic tag defined in the same Autoduck entry.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the 
beginning of a series of paragraphs of this type. The {\b .PRE} item 
is often used to define a heading for a series of similar paragraphs.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the end 
of a series of paragraphs of this type.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .FORMAT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output for each 
paragraph.  This item is required.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The bracket ([) preceding the {\b [PARAGRAPH]} section name must appear 
in the first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[PARAGRAPH]{\v sect_PARAGRAPH}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAP{\v PARAGRAPHMAP}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v PARAGRAPHPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v PARAGRAPHTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TEXT] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines text tags for use within the 
field of a topic or paragraph tag. Special text types can identify 
interesting elements within text (for example, function or parameter 
names).\par 

In the {\b [TEXT]} section, you identify the following items:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TAG\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a new text tag and specifies basic 
attributes for the tag. This item is required.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .FORMAT=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output for the 
tag. This item is required.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote IF\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies conditions in which this text 
tag entry should be used. You can specify multiple 
\ldblquote IF\rdblquote 
 tags; the conditions specified by the multiple 
.IF tags have an implied OR relationship.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Text formatting strings can use the field specifiers used for 
Format Strings. For more information, see 
\ldblquote Format Strings\rdblquote 
.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following excerpt from a [TEXT] section defines text tags for 
special symbols, for function tags, and message tags:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [text]\par 

\par 

; ******************************************\par 

; Symbols\par 

; ******************************************\par 

\par 

.tag=cp, both, 0\par 

.format=\\'a9\par 

.tag=tm, both, 0\par 

.format=\\'99\par 

.tag=gt, both, 0\par 

.format=>\par 

.tag=lt, both, 0\par 

.format=<\par 

.tag=tab, both, 0\par 

.format=\\tab\par 

.tag=nl, both, 0\par 

.format=\\line\par 

.tag=cmt, both, 0\par 

.format=//\par 

;\par 

; ******************************************\par 

; Functions\par 

; ******************************************\par 

\par 

.tag=f, help, 1\par 

.format=\{\\b $1\}\par 

.if=$1=$func.2\par 

.tag=f, help, 1\par 

.format=\{\\uldb $1\}\{\\v #1\}\par 

.if=exists($1)\par 

.tag=f, both, 1\par 

.format=\{\\b $1\}\par 

;\par 

; ******************************************\par 

; Messages\par 

; ******************************************\par 

\par 

.tag=m, help, 1\par 

.format=$1\par 

.if=$1=$msg.1\par 

.tag=m, help, 1\par 

.format=\{\\uldb $1\}\{\\v #1\}\par 

.if=exists($1)\par 

.tag=m, both, 1\par 

.format=$1\par 

;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TEXT]{\v sect_TEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TEXTTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOKEN] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines formatting codes for special 
characters of a particular output type. Previous versions of Autoduck 
were hard-coded to output Microsoft Rich Text Format (RTF), prefacing 
the special RTF control characters \\, \{, and \} with an escape, and 
outputting \\par and \\tab for the paragraph and tab symbols, 
respectively.\par 

Autoduck 2.0 introduces the {\b [TOKEN]} section, which defines the paragraph, 
tab, and other control characters for a given type of output.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TOKEN\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines the name for the output type, and 
specifies a default filename extension for output files of this type.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TOKEN\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a control character for the output 
type.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TOKEN\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Defines a formatting string to use for 
high-ASCII characters.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines the standard "doc" and "help" output types 
provided in Autoduck 1.x:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [token]\par 

.output=doc,rtf     ; defines "doc" output type, with "rtf" extension\par 

.token=^p,\\par      ; paragraph token\par 

.token=^t,\\tab      ; tab token\par 

.token=\\,\\\\         ; RTF control characters \\, \{, and \}\par 

.token=\{,\\\{\par 

.token=\},\\\}\par 

.highcharmask=\\'%x  ; high ascii characters are mapped to \\'xx\par 

\par 

.output=help,rtf\par 

.token=^p,\\par\par 

.token=^t,\\tab\par 

.token=\\,\\\\\par 

.token=\{,\\\{\par 

.token=\},\\\}\par 

.highcharmask=\\'%x\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TOKEN]{\v sect_TOKEN}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
HIGHCHARMASK{\v TOKENHIGHCHARMASK}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v TOKENOUTPUT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TOKEN{\v TOKENTOKEN}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOPIC] Section\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This section defines topic tags. These tags 
identify a single documentation unit, or topic. For example, the 
standard AUTODUCK.FMT file defines topic tags for functions, 
structures, classes, and other C language elements.\par 

In the {\b [TOPIC]} section, you identify the following topic-tag 
attributes:\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entries\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote TAG\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines the tag name, the number of fields in 
the tag, and other characteristics.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote ORDER\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines the order in which paragraph tags 
are output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote CONTEXT\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines an alternate 
identifier (context string) for use in Help.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .\ldblquote PARSESOURCE\rdblquote 
=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines source-parsing 
capabilities for the tag. Autoduck can retrieve source text declared 
outside the comment block, provided it is provided in a standard 
location.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .PRE=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the 
beginning of the topic.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\b .POST=}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies a format string to output at the end 
of the topic.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The bracket ([) preceding the TOPIC section name must appear in 
the first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following {\b [TOPIC]} section entries define Help and Print 
versions of an @FUNC tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [topic]\par 

.tag=func, doc, 3, 20, $2\par 

.order=syntax rdesc parm comm ex\par 

.parsesource=function\par 

.pre=$(reset)$(rule)\\par\par 

$(reset)$(heading_1)$2\\par\par 

$[function]\par 

$(reset)$(normal)$3\\par\par 

$(reset)$(normal)Defined in: $!p\\par\par 

\par 

.tag=func, help, 3, 20, $2\par 

.order=syntax rdesc parm comm ex\par 

.parsesource=function\par 

.pre=\\page\par 

$(reset)$(heading_1)\par 

##\{\\footnote ## #2\}\par 

$$\{\\footnote $$ $2\}\par 

K\{\\footnote K functions; $2\}\par 

\{\\footnote + functions:0000\}\par 

$2\\par\par 

$[function]\par 

$(reset)$(normal)$3\\par\par 

$(reset)$(normal)Defined in: $!p\\par\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CONTEXT{\v TOPICCONTEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ORDER{\v TOPICORDER}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v TOPICPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TOPICTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [CONSTANT] Section: .DEFINE Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a string constant that can 
be used in any formatting string used in the formatting file. The item 
consists of the following fields:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [CONSTANT]}\line 
{\b .DEFINE} {\i sName}{\b ,} {\i sText}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sName}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the name of the constant. Type any name up to 
63 characters, with no embedded spaces, tabs, commas, or semicolons.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sText}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the string constant.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following item defines a string constant named STYLE50 as the 
text "\\s50 \\sl240":\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .define=style50,\\s50 \\sl240\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Constants can also be defined using the /D command-line argument 
to Autoduck. Constants defined on the command line override constants 
with the same name defined in the format file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[CONSTANT]{\v sect_CONSTANT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DEFINE{\v CONSTANTDEFINE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v CONSTANTOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [CONSTANT] Section: .OUTPUT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines the output type for 
following constant definitions. The {\b .OUTPUT} item has 
the following format:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [CONSTANT]}\line 
{\b .OUTPUT} {\i sOutputType}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the file 
formatting block.  Use one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 doc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for paper (Word 
document) output. The formatting block with this {\i sOutputType} value 
is used if the user specifies the /RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for help 
(WinHelp/Viewer topic file) output. The formatting block with this 
{\i sOutputType} value is used if the user specifies the /RH command-line 
flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for both document 
and help output.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[CONSTANT]{\v sect_CONSTANT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DEFINE{\v CONSTANTDEFINE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v CONSTANTOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [DIAGRAM] Section: .CANCELIFPRESENT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines one or more 
paragraph tags that can cancel the outputting of the diagram.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [DIAGRAM]}\line 
{\b .CANCELIFPRESENT} {\i names}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i names}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies one or more paragraph tag names, with multiple 
names separated by commas.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[DIAGRAM]{\v sect_DIAGRAM}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CANCELIFPRESENT{\v DIAGRAMCANCELIFPRESENT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v DIAGRAMTAG}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [DIAGRAM] Section: .TAG Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new diagram.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [DIAGRAM]}\line 
{\b .TAG} {\i name}{\b ,} {\i sOutputType}
{\b ,} {\i sParaType}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i name}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the name of the diagram. Type any name up to 63 
characters, with no embedded spaces, tabs, commas, or semicolons.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the diagram. Use one 
of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 sDoc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies paper (Word document) output. The formatting 
block with this {\i sOutputType} value is used if the user specifies the 
/RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies Help (WinHelp/Viewer topic file) output. The 
formatting block with this {\i sOutputType} value is used if the user 
specifies the /RH command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies both document and help output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sParaType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This item defines the name of the repeating 
paragraph tag used within the diagram.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
Format Strings{\v ctx_format}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
[DIAGRAM]{\v sect_DIAGRAM}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CANCELIFPRESENT{\v DIAGRAMCANCELIFPRESENT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v DIAGRAMTAG}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [EXTENSION] Section: .EXT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item associates a language type with a 
filename extension.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [EXTENSION]}\line 
{\b .EXT} {\i sExtension}{\b ,} {\i sLangType}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sExtension}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Filename extension (for example, C, CPP, or BAS). Omit 
the period.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sLangType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Language type. Use one of the following:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 C\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 C or C++ comment style (// or /*)\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 ASM\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Assembly language comments (;)\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 BAS\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Basic comments (')\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following {\b [EXTENSION]} section defines a standard set of filename 
extensions:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 [extension]\par 

\par 

; Filename extension types\par 

; .ext=<extension_text>, c|asm|bas\par 

\par 

.ext=c,c\par 

.ext=cpp,c\par 

.ext=cxx,c\par 

.ext=inl,c\par 

.ext=d,c\par 

.ext=h,c\par 

.ext=hpp,c\par 

.ext=hxx,c\par 

.ext=asm,asm\par 

.ext=bas,bas\par 

.ext=mst,bas\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[EXTENSION]{\v sect_EXTENSION}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
EXT{\v EXTENSIONEXT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [FILE] Section: .OUTPUT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new file formatting 
block for a specific type of output. Specific formatting information 
for the output type is specified using {\b .PRE} and {\b .POST} 
items following the {\b .OUTPUT} item. The {\b .OUTPUT} item has 
the following format:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [FILE]}\line 
{\b .OUTPUT} {\i sOutputType}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the file 
formatting block.  Use one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 doc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for paper (Word 
document) output. The formatting block with this {\i sOutputType} value 
is used if the user specifies the /RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for help 
(WinHelp/Viewer topic file) output. The formatting block with this 
{\i sOutputType} value is used if the user specifies the /RH command-line 
flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for both document 
and help output.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The period preceding the {\b .OUTPUT} item text must appear in 
the first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[FILE]{\v sect_FILE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v FILEOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [INDEX] Section: .OUTPUT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new index formatting block 
and identifies the output type. Specific formatting information for the 
output type is specified using the formatting-string entries following 
the {\b .OUTPUT} item.\par 

The {\b .OUTPUT} item has the following field:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [INDEX]}\line 
{\b .OUTPUT} {\i sOutputType}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the index formatting 
block.  Use one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 doc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for paper (Word 
document) output. The formatting block with this {\i sOutputType} value 
is used if the user specifies the /RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for help 
(WinHelp/Viewer topic INDEX) output. The formatting block with this 
{\i sOutputType} value is used if the user specifies the /RH command-line 
flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for both document 
and help output.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The period preceding the {\b .OUTPUT} item text must appear in 
the first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[INDEX]{\v sect_INDEX}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v INDEXOUTPUT}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 .IF Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Specifies one or more statements that 
determine whether a tag should 
be used in a given situation. By defining multiple formatting 
blocks, each of which uses different IF statements, you can create 
variable formatting blocks.\par 

This entry can be used with any tag type, including topic, paragraph, 
text, and diagrams.\par 

For example, a text tag might reference a function name. You might want 
to make the name bold, or you might want to make it a hypertext link. 
If the text tag just references the same function described by the 
enclosing topic, a link would return the user to the same topic, 
so the function name should be set to bold instead. If a link is 
appropriate, you still want to check if there is a destination topic to 
jump to, so you would check the logging file to see if the named 
function is listed there.\par 

The {\b .IF} item can test the following conditions:\par 
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Compare strings in fields: you can check whether a field in a 
paragraph or text tag matches a field in a topic tag.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Log file: you can test to see if a topic name is listed in the log 
file.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Paragraph tag present: you can test to see if a particular 
paragraph tag is present within the topic.\par
\pard\plain \s99\li960\fi-240\sa80\sl-240 \fs21\lang1033 \'95 \tab Field empty: you can test to see if a field in the paragraph or 
text tag is empty.\par
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can combine various tests in a single 
\ldblquote IF\rdblquote 
 statement. The results of all such tests must evaluate 
TRUE (implied AND relationship), otherwise AUTODUCK will not use the 
paragraph-formatting entry, and instead try to use the next formatting 
block for the paragraph tag.\par 

You can include multiple {\b .IF} 
statements within a single tag definition; the statements have an 
implied OR relationship (if any are true, the tag will be used).\par 

The {\b .IF} item specifies the following field:\par
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sConditionals}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies one or more conditional statements, 
separated by commas:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 String Comparison:\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 {\i field-expression1}={\i field-expression2}\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Compares the value of {\i field-expression1} to the value of 
{\i field-expression2}. Field expressions consist of a mixture of 
string constants and field references. See the Comments section for 
details.\par 

For example, you can use a string comparison to check if a function 
name referenced in a text tag is the same as the function named in the 
topic tag; if it is, you can code it as bold instead of creating a 
jump.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 Log File Check:\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 exists({\i field-expression})\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Checks to see if the topic names by {\i field-expression} is listed in 
the log file.\par 

Log file checks are generally used to verify hypertext links: if a 
destination topic is named in the log file, create a link; otherwise, 
don't create a link.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 Paragraph Tag Check:\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 tagexists({\i tagname})\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Checks to see if a tag with the specified name was included 
in the topic. Use this to determine the tag type of the enclosing 
topic, or to check whether a paragraph tag of the specified type is 
included in the topic.\par 

This is generally used within function diagrams, to determine whether 
to output a parameter list or the word "void". It's also used to 
provide an alternate tag definition to use within certain types of 
topics.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 Field Empty:\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 fieldempty({\i fieldnum})\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Checks to see whether a field number {\i fieldnum} is empty. Fields are 
numbered starting at 1.\par 

Used to output an alternative formatting block if a tag field is empty.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 A {\i field expression} is a combination of tag field references and 
text literals. In a field expression, you can include any combination 
of the following constructs (up to six constructs in a field 
expression):\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 $n\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 References field number {\i n} in the tag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 $<n\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 References field number {\i n} in the tag, but strips 
any template parameter entry (enclosed in angle brackets) from 
the end of the field.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 $topictag.n\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 References field number {\i n} in the topic 
tag @{\i topictag}. This construct evaluates to an empty string 
if the paragraph tag is not contained in a topic block of 
type @{\i topictag}.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 literal text\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Any literal text, except for spaces, tabs, 
carriage returns, dollar signs ($), semicolons (;), commas (,), 
closing parentheses ()), and equal signs (=).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Following are two simple examples of {\b .IF} 
statements. For more involved examples, see the AUTODUCK.FMT file and 
refer to the brief comments there for explanations.\par 

The following expression compares the text in the first tag field 
with the text in the second @FUNC topic-tag field:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .if=$1=$func.2\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The right-hand operand evaluates to a blank if the current topic block 
is not a @FUNC topic.\par 

The next expression checks to see if a C++ member function is listed in 
the topic log:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 exists($1::$2)\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [PARAGRAPH] Section: .MAP Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Maps fields in the paragraph tags to fields in 
a topic tag defined within the same Autoduck entry.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [PARAGRAPH]}\line 
{\b .MAP} {\i sTopicTagname}{\b ,} {\i sFieldRef,sFieldRef,...}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sTopicTagname}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Tag name of topic to map.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sFieldRef,sFieldRef,...}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 One or more field references, each 
comma-delimited. Each consecutive field reference identifies how to 
fill in the corresponding field in the topic tag. You can use field 
references from the current tag or field references from the containing 
topic tag:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 $n\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 References paragraph tag field "n", where "n" is 1-6.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 $t.n\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 References topic tag field "n", where "n" is 1-6.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example maps fields of the @cmember tag to the 
three topic types that might be defined in tandem:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .tag=cmember, help, 4, 2\par 

.pre=$[classhdr]\par 

.format=$(reset)$(term1)\{\\uldb $1\}\{\\v #1\} \{\\uldb $2\}\{\\v #class.1__#2\}\\par\par 

$(reset)$(def1)$4\\par\par 

\par 

.if=exists($class.1::$<2),fieldempty(3),exists($1)\par 

.parsesource=classmember\par 

.map=mfunc,$1,$t.1,$2,$4\par 

.map=enum,$2,$4,$t.1\par 

.map=struct,$2,$4,$t.1\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[PARAGRAPH]{\v sect_PARAGRAPH}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAP{\v PARAGRAPHMAP}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v PARAGRAPHPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v PARAGRAPHTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [PARAGRAPH] Section: .PARSESOURCE Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines source-parsing 
capabilities of the Autoduck tag. Autoduck can parse C source information 
to obtain fields such as parameter types and names and enumeration 
types.\par 

When Autoduck determines that fields are missing in a tag, it determines 
whether source parsing is enabled for the tag. If it is enabled, 
Autoduck looks at the text immediately preceding the comment block and 
attempts to parse the missing fields from this text. The missing fields 
are inserted at the beginning of the tag structure.\par 

There's another \ldblquote .PARSESOURCE\rdblquote 
 statement used with 
topic tags. Essentially, the same statement is used for both 
topic and paragraph tags; however, the parsing types described in this 
section apply more closely to paragraph tags.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [PARAGRAPH]}\line 
{\b .PARSESOURCE} {\i sParseType}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sParseType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This field specifies one of the following values 
indicating the type of source parsing:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 parameter\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Parameter type and name inserted into fields 1 and 2.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 field\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Field type and name inserted into fields 1 and 2.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 emem\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Enumeration name inserted into field 1.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 classmember\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Member type, name, and (if present) parameter 
list inserted into fields 1 through 3.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 meth\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Member type and name inserted into fields 1 and 2.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 bparameter\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Parameter passing convention (Optional|ByVal|ByRef) 
inserted into field 1; type and name inserted into fields 2 and 3.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following PARSESOURCE item defines parameter parsing:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .parsesource=parameter\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[PARAGRAPH]{\v sect_PARAGRAPH}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAP{\v PARAGRAPHMAP}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v PARAGRAPHPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v PARAGRAPHTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [PARAGRAPH] Section: .TAG Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new paragraph type and 
includes the following fields:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [PARAGRAPH]}\line 
{\b .TAG} {\i sName}{\b ,} {\i sOutputType}
{\b ,} {\i nFields}
{\b ,} {\i nNestLevel}
{\b ,} {\i nIsExampleTag}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sName}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the name of the paragraph. Type any name up to 63 
characters, with no embedded spaces, tabs, commas, or semicolons.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the paragraph tag. Use 
one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 sDoc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies paper (Word document) output. The formatting 
block with this {\i sOutputType} value is used if the user specifies the 
/RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies Help (WinHelp/Viewer topic file) output. The 
formatting block with this {\i sOutputType} value is used if the user 
specifies the /RH command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies both document and help output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nFields}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the number of fields in the tag. Type a 
number from 1 to 6.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nNestLevel}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the nesting level of the tag. The nesting 
level defines whether the tag is superior or subordinate to other tags 
and is used to determine when a series of like tags has started or 
ended.\par 

Specifically, output text defined by the .PRE item is output when an 
paragraph tag has the same or lower level (higher {\i nNestLevel} value) as 
a preceding tag. Output text defined by the .POST item is output when 
an paragraph tag has a higher level (lower {\i nNestLevel} value) than a 
preceding tag. (In all cases, .PRE or .POST text is only output when a 
new type of tag is encountered, eg. when going from tag "@foo" to tag 
"@bar," not when going from tag "@foo" to tag "@foo."\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nIsExampleTag}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies whether this paragraph contains a code 
example as its last field. With example paragraphs, AUTODUCK treats field 
delimiter (|) characters encountered in the last paragraph as literal 
pipe symbols rather than field delimiters. Also, when inserting the 
contents of the code-fragment field in the output file, AUTODUCK 
includes white space (tabs and spaces).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[PARAGRAPH]{\v sect_PARAGRAPH}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAP{\v PARAGRAPHMAP}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v PARAGRAPHPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v PARAGRAPHTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TEXT] Section: .TAG Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new format tag as well as basic 
attributes for the format tag. The item includes the following fields:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TEXT]}\line 
{\b .TAG} {\i sName}{\b ,} {\i sOutputType}
{\b ,} {\i nFields}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sName}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the name of the format tag. Type any name up to 
63 characters, with no embedded spaces, tabs, commas, or semicolons.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the text tag.  Use 
one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 doc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies paper (Word document) output. The formatting 
block with this {\i sOutputType} value is used if the user specifies the 
/RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies help (WinHelp/Viewer topic file) output. The 
formatting block with this {\i sOutputType} value is used if the user 
specifies the /RH command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies both document and help output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nFields}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the number of fields in the tag. Type a 
number from 1 to 6.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TEXT]{\v sect_TEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TEXTTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOKEN] Section: .HIGHCHARMASK Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Defines a formatting string for a 
high-ASCII character.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOKEN]}\line 
{\b .HIGHCHARMASK} {\i sMask}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sMask}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Formatting mask. Use a C/C++ printf-style formatting 
string.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOKEN]{\v sect_TOKEN}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
HIGHCHARMASK{\v TOKENHIGHCHARMASK}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v TOKENOUTPUT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TOKEN{\v TOKENTOKEN}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOKEN] Section: .OUTPUT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Defines the output type and name.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOKEN]}\line 
{\b .OUTPUT} {\i sName}{\b ,} {\i sExtension}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sName}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Name of the output type, referenced elsewhere in the 
formatting file and in the /R command-line flag. The types "help" and "doc" 
are predefined and map to the /Rh and /Rd command line flags.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sExtension}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Default filename extension for output type. Used if 
no output filename is specified on the command line.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOKEN] Section: .TOKEN Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Defines a control token for the output type, and 
shows how special characters read from an Autoduck comment block are 
translated to control sequences in the output file.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOKEN]}\line 
{\b .TOKEN} {\i chToken}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i chToken}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the token. Type a single character to map to 
the control sequence specified in the second argument, or type one of 
the following special control tokens:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 ^p\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Paragraph token: a paragraph token is inserted in place of a 
a double carriage return found within an Autoduck field, or after every 
line of an Autoduck example field.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 ^t\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Tab token: inserted in place of a tab. Note that leading 
tabs are generally stripped from the field.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOKEN]{\v sect_TOKEN}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
HIGHCHARMASK{\v TOKENHIGHCHARMASK}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OUTPUT{\v TOKENOUTPUT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TOKEN{\v TOKENTOKEN}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOPIC] Section: .CONTEXT Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines an alternate identifier 
(context string) for the topic type. Use the CONTEXT item in cases where 
topics of different tag types might share the same name (for example, 
you have an object of name FOO and a property of name FOO). The CONTEXT 
item lets you define a unique identifier for the topic, usually by 
appending text to the name (for example, FOO_prop).\par 

The context string is used in topic indexes generated for help files 
and in the topic log generated by Autoduck. If no context string is 
defined, the topic name as defined in the \ldblquote TAG\rdblquote 
 item is 
used instead.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOPIC]}\line 
{\b .CONTEXT} {\i sContextNameComponents}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sContextNameComponents}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the composition of the 
context string. The context string consists of static text and text 
drawn from the fields of the topic tag.\par 

The {\i sContextNameComponents} parameter consists of text intermixed with 
field references of the format ${\i n}, where {\i n} is the field number.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following CONTEXT item defines a context string for an @PROPERTY 
tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .context=$1_prop\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CONTEXT{\v TOPICCONTEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ORDER{\v TOPICORDER}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v TOPICPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TOPICTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOPIC] Section: .ORDER Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines the order in which paragraph 
tags are written to the output file.\par 

In the ORDER item, you specify a list of paragraph tag names. 
These named paragraph types are output in the specified order. 
Lower-level tags (for example, a paragraph tag with level 2 following a 
paragraph tag with level 1) are kept together with the higher-level 
tag. For example, a series of @FLAG tags are output along with the @PARM 
tags names in the ORDER item.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOPIC]}\line 
{\b .ORDER} \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following ORDER item might be used for a @FUNC tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .order=rdesc parm ex comm xref\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item specifies that the @RDESC tag be output first 
(including any subordinate tags following @RDESC), followed by @PARM 
tags, following by @EX tags, and so on.\par
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CONTEXT{\v TOPICCONTEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ORDER{\v TOPICORDER}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v TOPICPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TOPICTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOPIC] Section: .PARSESOURCE Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines source-parsing capabilities 
of the Autoduck tag. Autoduck can parse C source information to obtain 
fields such as return type, function name, and class name.\par 

When Autoduck determines that fields are missing in a tag, it 
determines whether source parsing is enabled for the tag. If it is 
enabled, Autoduck looks at the text immediately following the comment 
block and attempts to parse the missing fields from this text. The 
missing fields are inserted at the beginning of the tag structure.\par 

There's another \ldblquote .PARSESOURCE\rdblquote 
 statement used with 
paragraph tags. Essentially, the same statement is used for both 
topic and paragraph tags; however, the parsing types described in this 
section apply more closely to topic tags.\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOPIC]}\line 
{\b .PARSESOURCE} {\i sParseType}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sParseType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 This field specifies one of the following values 
indicating the type of source parsing:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 function\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Autoduck parses the return type and function name from 
the function header immediately following the comment block.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 memberfunction\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Autoduck parses the return type, class name, and 
function name from the function header immediately following the 
comment block.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 class\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Class name inserted into field 1.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 enum\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Enumeration name inserted into field 1.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 const\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Constant type and name inserted into fields 1 and 2.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 struct\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Structure tag name inserted into field 1 
(for C++ style declarations only).\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 bsub\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 "Sub" keyword plus any modifiers (Private, Public, etc.) 
inserted into field 1; subroutine name inserted into field 2.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 bfunc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 "Function" keyword plus any modifiers (Private, Public, etc.) 
inserted into field 1; function name inserted into field 2; function 
return type (if present) inserted into field 3.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 union\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Union name inserted into field 1 (for C++ style declarations 
only).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following PARSESOURCE item defines function parsing:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .parsesource=function\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CONTEXT{\v TOPICCONTEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ORDER{\v TOPICORDER}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v TOPICPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TOPICTAG}\par 


\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 [TOPIC] Section: .TAG Entry\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This item defines a new topic tag as well as basic 
attributes for the topic tag. The tag includes the following fields:\par 
\pard \plain \sa160\sl-240\li720 \fs21\lang1033 {\b [TOPIC]}\line 
{\b .TAG} {\i sName}{\b ,} {\i sOutputType}
{\b ,} {\i nFields}
{\b ,} {\i nSortLevel}
{\b ,} {\i sTopicNameComponents}
\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Entry Fields\par \pard\plain \s50\li720\keepn \fs21\lang1033 {\i sName}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the name of the tag. Type any name up to 63 
characters, with no embedded spaces, tabs, commas, or semicolons.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sOutputType}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the output type for the topic formatting 
block.  Use one of the following strings:\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 doc\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for paper (Word 
document) output. The formatting block with this {\i sOutputType} value 
is used if the user specifies the /RD command-line flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 help\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for help 
(WinHelp/Viewer topic file) output. The formatting block with this 
{\i sOutputType} value is used if the user specifies the /RH command-line 
flag.\par 
\pard\plain \s53\li960\keepn \fs21\lang1033 both\par 
\pard\plain \s55\li1200\sa80 \fs21\lang1033 Specifies the formatting block is used for both document 
and help output.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nFields}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the number of fields in the tag. Type a 
number from 1 to 6.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i nSortLevel}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the sorting level of the topic. This 
number (from -32768 to 32767) determines where topics of this type are 
sorted in relation to other types of topics.\par 

If you specify a negative value, topics of this tag type are sorted in 
a group, but appear in the same order encountered within the source 
files.\par 
\pard\plain \s50\li720\keepn \fs21\lang1033 {\i sTopicNameComponents}\par 
\pard\plain \s54\li960\sa80 \fs21\lang1033 Specifies the composition of the topic 
name. The topic name consists of static text and text drawn from the 
fields of the topic tag. The topic name is used when sorting topics, to 
identify topics in error and warning messages, and for constructing 
unique context strings for topics.\par 

The {\i sTopicNameComponents} parameter consists of text intermixed with 
field references of the format ${\i n}, where {\i n} is the field number. 
You can also use $<{\i n}, which strips a C++ template argument list, 
if present.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following item defines a topic tag "foo" for use in Help 
output.  The topic tag has three fields, a sorting weight of 100, and 
uses the second field as its topic name:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .tag=foo, help, 3, 100, $2\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Given this tag, a valid "foo" topic might be defined as follows:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @doc EXTERNAL\par 

// @foo BAR | MyFoo | This is a foo!\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The topic name for this block is "MyFoo." The next example defines 
a topic for documenting C++ member functions:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 .tag=mfunc, help, 4, 80, $2::$3\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Given this tag, a valid "mfunc" topic with a topic name of 
"ClassName::MemberFunction" might be defined as follows:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @doc EXTERNAL\par 

// @foo int | ClassName | MemberFunction | This function...\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The period preceding the {\b .TAG} text must appear in the 
first column (no leading spaces are allowed).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 \pard\plain \s93\sl240 \fs21\lang1033 
[TOPIC]{\v sect_TOPIC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARAGRAPH-IF{\v PARAGRAPHIF}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CONTEXT{\v TOPICCONTEXT}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ORDER{\v TOPICORDER}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PARSESOURCE{\v TOPICPARSESOURCE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAG{\v TOPICTAG}\par 


\par 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 @doc\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The @doc tag identifies 
a block of Autoduck source. It must be the first Autoduck tag in a comment 
block. Any text preceding the @doc tag is ignored.\par 

The @doc tag notifies the Autoduck parser of the 
presence of Autoduck tag blocks within a source file. The @doc tag 
also defines Autoduck identifiers used to determine which topics to 
extract from the source file. The identifiers established by a @doc 
tag remain in force for all Autoduck topics through the end 
of the source file or the next @doc tag, whichever comes first.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 @doc {\i identifiers}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\i identifiers} field is a block of text consisting of a 
whitespace-separated list of keywords to associate with Autoduck topics 
following the @doc tag. You can use these keywords to determine 
which topics to extract. The /x command-line option identifies which 
keywords to process. If the @doc tag names any of the keywords 
listed in /x command-line option, The topics associated with 
the @doc tag are extracted.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following is an example of the @doc tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@doc EXTERNAL MIDI_INPUT\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 For more information on @DOC, see 
\ldblquote Conditional Topic and Paragraph Extraction\rdblquote 
.\par
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Topic Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Topic tags identify the 
beginning of an Autoduck topic block. Topic blocks are delimited by 
topic tags (beginning a new topic block) or by the end of a 
documentation block.\par 

The following are the standard Autoduck topic tags:\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topic tags are used with C elements:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @enum} \cell Enumeration types\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @func} \cell functions and macros\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @module} \cell Module descriptions\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @msg} \cell Messages\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @struct} \cell Structures\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @type} \cell Typedefs\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C++ Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topic tags are used with C++ elements:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @class} \cell Classes\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @mfunc} \cell Member functions\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @mdata} \cell Data members\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @mstruct} \cell Structure member\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @menum} \cell Enumeration member\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @const} \cell Constants\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 OLE2 Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topic tags are used with OLE2 elements:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @object} \cell OLE objects - use this to document the primary 
interface for an object\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @interface} \cell OLE interfaces\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @method} \cell OLE interface methods\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @property} \cell OLE object properties\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @event} \cell OLE object events\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 BASIC Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topic tags are used with Visual Basic 
elements:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @bsub} \cell Visual Basic subroutine\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @bfunc} \cell Visual Basic function\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @btype} \cell Visual Basic type (structure)\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Table of Contents and Overview Topics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These topic tags are 
used to generate a hierarchical table of contents, and for overviews.\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @contents1} \cell First-level table of contents page\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @contents2} \cell Second-level table of contents page\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @topic} \cell Overview topic\cell \pard \intbl \row 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Paragraph Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Paragraph tags 
identify elements of a topic such as function parameters, structure 
fields, comments, examples, and other document elements.\par 

The following are the standard Autoduck paragraph tags:\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used in topic tags describing 
C constructs (as well as C++ and OLE2 derivatives):\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @emem} \cell Enumeration members\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @field} \cell Structure fields\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @flag} \cell Flags (constants)\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @parm} \cell Parameters\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @parmopt} \cell Parameters with default values\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @parmvar} \cell Variable-length parameter list\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @rdesc} \cell Return values\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @globalv} \cell Global variables (used in @module topic)\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C++ Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used within C++ topics:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @access} \cell Access rights (private, protected, public)\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @base} \cell Base class name\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @cmember} \cell Class members (new auto-parsing tag)\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @member} \cell Class members (old member tag)\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @syntax} \cell Syntax statements for overloaded member functions\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @tcarg} \cell Template class arguments\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @tfarg} \cell Template function arguments\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 OLE2 Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used within OLE2 topics:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @meth} \cell Briefly describes a method within a {\b @object} 
topic.\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @prop} \cell Briefly describes a property within a {\b @object} 
topic.\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @eve} \cell Briefly describes an event within a {\b @object} block\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @rvalue} \cell Describes return values\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @ilist} \cell Lists names of interfaces supported by a property\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @supint} \cell Names an interface within a {\b @object} block and 
identify how that object implements the interface.\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @supby} \cell Used within a {\b @method} or {\b @property} topic to 
identify a list of objects or interfaces that implement the method or 
property.\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @consumes} \cell Used within a {\b @object} topic to 
identify a list of interfaces that the object consumes.\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 BASIC Paragraphs\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used with Visual Basic 
elements:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @bparm} \cell Visual Basic parameter\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @bfield} \cell Visual Basic type field\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Comments and Annotations\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used to 
add various types of comments and notes to topics:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @comm} \cell Comments\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @devnote} \cell Developer notes\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @ex} \cell Examples\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @group} \cell Subheadings\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @todo} \cell Undone work\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @xref} \cell Cross references\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Miscellaneous\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These paragraph tags are used for table of 
contents and other paragraphs:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @index} \cell Creates a topic index.\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @subindex} \cell Links to second-level contents pages\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @normal} \cell Resets formatting to Normal paragraph style\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @head1} \cell Heading level 1\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @head2} \cell Heading level 2\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @head3} \cell Heading level 3\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b @end} \cell Ends Autoduck parsing within the comment block\cell \pard \intbl \row 
\pard\plain \s254\sb200\sa80\sl-440\keepn \b\f16\fs40\lang1033 Text Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Text tags identify 
special text strings within a paragraph, such as function names, class 
names, and special characters.\par 

The following are the text tags:\par 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These tags are used for C constructs:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <f} \cell Functions\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <m} \cell Messages\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <t} \cell Structures and enumeration types\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <p} \cell Parameters\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <e} \cell Structure and enumeration elements\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 C++ Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These tags are used for C++ constructs:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <c} \cell Classes\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <mf} \cell Member functions\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <md} \cell Data members\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 OLE2 Tags\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These tags are used for OLE2 constructs:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <o} \cell OLE COM objects\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <i} \cell OLE COM interfaces\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <om} \cell OLE COM interface methods\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <op} \cell OLE COM object properties\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <oe} \cell OLE COM object events\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Graphics\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 This tag lets you insert a bitmap file:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <bmp} \cell Bitmap graphic file.\cell \pard \intbl \row 
\pard\plain \s252\sb80\sa40\sl-340\keepn \b\f16\fs30\lang1033 Special Characters\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 These tags represent special characters:\par 
\trowd \trgaph108\trleft-108 \cellx4320\cellx8748 \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b Tag} \cell {\b Usage}\cell \pard \intbl \row \pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <cp} \cell Copyright symbol\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <tm} \cell Trademark symbol\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <rtm} \cell Registered trademark symbol\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <en-} \cell En dash character\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <em-} \cell Em dash character\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <gt} \cell Greater than symbol\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <lt} \cell Less than symbol\cell \pard \intbl \row 
\pard\plain \sa80\sl-240\li720 \fs21\lang1033 \intbl {\b <nl} \cell New line character\cell \pard \intbl \row 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @access (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @access} tag is used within the {\b @class} tag to 
create a subheading that identifies the access rights to a group of items.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @access} {\i access_specifier}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example uses two {\b @access} tags as subheadings:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@class This class factory object creates Koala objects.\par 

//\par 

//@base public | IClassFactory\par 

\par 

class __far CKoalaClassFactory : public IClassFactory\par 

\tab \{\par 

\tab //@access Protected Members\par 

\par 

\tab protected:\par 

\tab \tab //@cmember Reference count.\par 

\par 

\tab \tab ULONG           m_cRef;\par 

\par 

\tab //@access Public Members\par 

\par 

\tab public:\par 

\tab \tab //@cmember Constructor.\par 

\par 

\tab \tab CKoalaClassFactory(void);\par 

\par 

\tab \tab //@cmember Destructor.\par 

\par 

\tab \tab ~CKoalaClassFactory(void);\par 

\tab .\par 

\tab .   // More definitions.\par 

\tab .\par 

\tab \}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @base (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @base} tag is a paragraph tag used within {\b @class} 
comment blocks to specify the base class(es) of a C++ class.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @base} {\i access_specifier} | {\i base_classname}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can use as many {\b @base} tags as necessary.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @base} tag in use:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @class This class encapsulates a window.\par 

//\par 

// @base public | CCmdTarget\par 

\par 

class CWnd : public CCmdTarget\par 

\{\par 

public:\par 

\par 

\tab // @cmember This function ...\par 

\par 

\tab HWND GetSafeHwnd() const;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @bfield (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Documents a Basic type field.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bfield} {\i Name} | {\i Type} | {\i Description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples are equivalent:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 '@btype | MyType | Example of User-Defined Type\par 

'@bfield i | Integer | An integer.\par 

'@bfield s | String | A string.\par 

'@bfield myString$ | | A string without explicit type name.\par 

'@bfield myInt | | An integer without explicit type name.\par 

\par 

Type MyType\par 

\tab i as Integer\par 

\tab s as String\par 

\tab myString$\par 

\tab myInt\par 

End Type\par 

\par 

'@btype Example of User-Defined Type\par 

Type MyType\par 

\tab i as Integer  '@bfield An integer.\par 

\tab s as String   '@bfield A string.\par 

\par 

\tab ' @bfield A string without explicit type name.\par 

\tab myString$\par 

\par 

\tab ' @bfield An integer without explicit type name.\par 

\tab myInt\par 

End Type\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @btype}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @bfunc (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @bfunc} topic tag documents a Visual Basic 
function.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bfunc} {\i Modifiers} | {\i Function Name} | 
{\i Return Type} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples are equivalent:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 '@bfunc Public | RegGetXLValue | Variant | Get XL value from registry\par 

'@bparm | szSection$ | | Section name\par 

'@bparm | szKey$ | | Key name\par 

'@bparm Optional | vDefaultValues | Variant | Default value if key is missing\par 

\par 

Public Function RegGetXLValue(szSection$, szKey$, Optional vDefaultValue As Variant) As Variant\par 

...\par 

End Function\par 

\par 

'@bfunc Get XL value from registry\par 

'@bparm Section name\par 

'@bparm Key name\par 

'@bparm Default value if key is missing\par 

\par 

Public Function RegGetXLValue(szSection$, szKey$, Optional vDefaultValue As Variant) As Variant\par 

...\par 

End Function\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can extract all the tag fields (except the description) 
from the subroutine definition in the source file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bparm}, {\b @bsub}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @bparm (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @bparm} paragraph tag documents a Basic subroutine 
or function parameter.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bparm} {\i Decl_Modifiers} | {\i Name} | {\i Type} | {\i Description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples are equivalent:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 '@bfunc Function | RegGetXLValue | Variant | Get XL value from registry\par 

'@bparm | szSection$ | | Section name\par 

'@bparm | szKey$ | | Key name\par 

'@bparm Optional | vDefaultValues | Variant | Default value if key is missing\par 

\par 

Function RegGetXLValue(szSection$, szKey$, Optional vDefaultValue As Variant) As Variant\par 

...\par 

End Function\par 

\par 

'@bfunc Get XL value from registry\par 

'@bparm Section name\par 

'@bparm Key name\par 

'@bparm Default value if key is missing\par 

\par 

Function RegGetXLValue(szSection$, szKey$, Optional vDefaultValue As Variant) As Variant\par 

...\par 

End Function\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Since Visual Basic does not allow inline comments within function 
or subroutine declarations, you'll need to place the {\b @bparm} tags in 
the body of the function/subroutine header.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bfunc}, {\b @bsub}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @bsub (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @bsub} topic tag documents a Visual Basic 
subroutine.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bsub} {\i Modifiers} | {\i Subroutine Name} | 
{\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples are equivalent:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 '@bsub Private | ExcelRegistryExamples | Sets and Retrieves values from the\par 

' Registry\par 

\par 

Private Sub ExcelRegistryExamples()\par 

...\par 

End Sub\par 

\par 

'@bsub Sets and Retrieves values from the Registry\par 

\par 

Private Sub ExcelRegistryExamples()\par 

...\par 

End Sub\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can extract all the tag fields (except the description) 
from the subroutine definition in the source file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bfunc}, {\b @bparm}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @btype (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Documents a Visual Basic user-defined type, or structure.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @btype} {\i Modifiers} | {\i Type Name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples are equivalent:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 '@btype | MyType | Example of User-Defined Type\par 

'@bfield i | Integer | An integer.\par 

'@bfield s | String | A string.\par 

'@bfield myString$ | | A string without explicit type name.\par 

'@bfield myInt | | An integer without explicit type name.\par 

\par 

Type MyType\par 

\tab i as Integer\par 

\tab s as String\par 

\tab myString$\par 

\tab myInt\par 

End Type\par 

\par 

'@btype Example of User-Defined Type\par 

Type MyType\par 

\tab i as Integer  '@bfield An integer.\par 

\tab s as String   '@bfield A string.\par 

\par 

\tab ' @bfield A string without explicit type name.\par 

\tab myString$\par 

\par 

\tab ' @bfield An integer without explicit type name.\par 

\tab myInt\par 

End Type\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Autoduck can extract all the tag fields (except the description) 
from the subroutine definition in the source file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @bfield}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @cb (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @cb} tag is a topic tag used to document C-language 
callback functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cb} {\i type} | {\i placeholder} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @rdesc} {\b @parm} {\b @comm} {\b @ex} {\b @xref} {\b @flag}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @func}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @class (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @class} tag is a topic tag used to document C++ 
classes.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @class} tag in use:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@class This class factory object creates Koala objects.\par 

//\par 

//@base public | IClassFactory\par 

\par 

class __far CKoalaClassFactory : public IClassFactory\par 

\tab \{\par 

\tab //@access Protected Members\par 

\par 

\tab protected:\par 

\tab \tab //@cmember Reference count.\par 

\par 

\tab \tab ULONG           m_cRef;\par 

\par 

\tab //@access Public Members\par 

\par 

\tab public:\par 

\tab \tab //@cmember Constructor.\par 

\par 

\tab \tab CKoalaClassFactory(void);\par 

\par 

\tab \tab //@cmember Destructor.\par 

\par 

\tab \tab ~CKoalaClassFactory(void);\par 

\tab .\par 

\tab .   // More definitions.\par 

\tab .\par 

\tab \}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of {\b @class} to document 
a template class:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @class Template class\par 

//\par 

// @tcarg class | T | A class to store in stack\par 

//\par 

// @tcarg int | i | Initial size of stack\par 

\par 

template<class T, int i> class MyStack\par 

\{\par 

\tab // @cmember Top of stack.\par 

\par 

\tab T*  pStack;\par 

\par 

\tab // @cmember Storage of stack items\par 

\par 

\tab T StackBuffer[i];\par 

\par 

\tab // @cmember Count of items in stack\par 

\par 

\tab int cItems = i * sizeof(T);\par 

\par 

public:\par 

\par 

\tab // @cmember Constructor for stack.\par 

\par 

\tab MyStack( void );\par 

\par 

\tab // @cmember Adds an item to the stack.\par 

\par 

\tab void push( const T item );\par 

\par 

\tab // @cmember Returns and removes the top item on the stack.\par 

\par 

\tab T& pop( void );\par 

\};\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the {\b @base} tag to specify base classes. You can use as 
many {\b @base} tags as necessary.\par 

To specify a template class, add {\b @tcarg} paragraph tags to identify 
the various class template arguments. The presence of {\b @tcarg} tags cause a 
template specifier to be printed as the topic title.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @access} {\b @base} {\b @cmember} {\b @tcarg}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @cmember (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @cmember} tag is used within the {\b @class} tag to 
provide a simple description of class cmembers. It replaces the 
earlier {\b @member} tag.\par 

The tag can parse the first three fields (type, name, and parameter 
list, if present) from the class member, assuming the tag 
immediately precedes the line on which the member is defined.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cmember} {\i type} | {\i name} | {\i parameter list} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @cmember} tag is used with in a {\b @class} topic 
block to provide brief descriptions of class members.\par 

For class data members, the {\i parameter list} field is optional.\par 

Use the {\b @mfunc} and {\b @mdata} tags to provide complete 
documentation for member functions and member data. If you define 
an {\b @mfunc} or {\b @mdata} topic matching one of the {\b @cmember} 
tags, Autoduck will create a hypertext link (assuming you are 
pre-building the log file and referencing it using the /C command-line 
argument.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @cmember} tag in use:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@class This class factory object creates Koala objects.\par 

//\par 

//@base public | IClassFactory\par 

\par 

class __far CKoalaClassFactory : public IClassFactory\par 

\tab \{\par 

\tab //@access Protected Members\par 

\par 

\tab protected:\par 

\tab \tab //@cmember Reference count.\par 

\par 

\tab \tab ULONG           m_cRef;\par 

\par 

\tab //@access Public Members\par 

\par 

\tab public:\par 

\tab \tab //@cmember Constructor.\par 

\par 

\tab \tab CKoalaClassFactory(void);\par 

\par 

\tab \tab //@cmember Destructor.\par 

\par 

\tab \tab ~CKoalaClassFactory(void);\par 

\tab .\par 

\tab .   // More definitions.\par 

\tab .\par 

\tab \}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class} {\b @mfunc} {\b @mdata}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @comm (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @comm} tag is used to add comments to any Autoduck topic. 
Unlike other comment tags, the text associated with this tag is 
included in external (user ed) builds.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @comm} {\i comments}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @comm} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @comm Makes a <c CRect> equal to the intersection of two\par 

// existing rectangles. The intersection is the largest rectangle\par 

// contained in both existing rectangles.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @todo} {\b @devnote}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @const (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @const} tag is a topic tag used to document 
c++ constants.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @const} {\i type} | {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @const} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @const int | iArraySize | Maximum array size.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can also omit the type and name, provided the comment 
immediately precedes the constant declaration:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @const Maximum array size.\par 

\par 

const int iArraySize;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @consumes (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @consumes} tag lists OLE interfaces consumed 
by an object. The tag is used within an {\b @object} topic block.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @consumes} {\i list of interface names}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows {\b @consumes} within an {\b @object} topic 
block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @object IgorToolPoolObjServer | This is the MS provided content\par 

// object for the tool pool. It is responsible for maintaining all\par 

// the lists associated with all the tool pool entries - both\par 

// groups and actual elements.\par 

//\par 

// @supint ISpecifyPropertyPages | Property page support\par 

//\par 

// @supint <i IToolPoolEntry> | The means to actually edit the\par 

// tool pool\par 

//\par 

// @supint <i IToolElemSite> | The means to have all the tool\par 

// pool elements update themselves\par 

//\par 

// @supint IDataObject | Drag/drop & advise support\par 

//\par 

// @supint IDispatch | OLE Automation support\par 

//\par 

// @consumes IMalloc IDispatch <i IEnumTPENTRY>\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @contents1 (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Creates a main contents page. You should only use one 
{\b @contents1} topic within your help file. This topic should sort to 
the top of the RTF file, to be used as the help table of contents.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @contents1} | {\i Contents Heading} | {\i Contents Paragraph}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example, part of the CONTENTS.D file included with 
Autoduck, creates a first-level contents page for the help file:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @contents1 Contents | To display a list of topics by category, click\par 

// any of the contents entries below. To display an alphabetical list of\par 

// topics, choose the Index button.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Use the {\b @contents2} and {\b @subindex} tags to create 
second-level contents pages and links.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @subindex} {\b @contents2}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @contents2 (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Creates a second-level contents page. To link to 
second-level contents pages from the main page, use the {\b @subindex} 
paragraph tag. See the CONTENTS.D file, included with Autoduck, for an 
example.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @contents2} | {\i Contents Heading} | {\i Contents Paragraph}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @subindex} {\b @contents1}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @devnote (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @devnote} tag is used to document developer 
implementation notes.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @devnote} {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 This tag is for developers and does not generate output 
for User-Ed Autoduck builds.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @todo}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @emem (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @emem} tag is used to document members of enumeration 
data types.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @emem} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i name} field if 
the comment block containing the {\b @emem} tag immediately follows on 
the same line as the member declaration.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows how to document enumeration types and 
members.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@enum Colors.\par 

\par 

enum Colors \{\par 

\tab blue,       /@emem The color Blue.\par 

\tab red,        /@emem The color Red.\par 

\};\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @enum}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @end (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Empty tag used to terminate the Autoduck section of a 
comment. Insert the {\b @end} tag at the end of the Autoduck tags, and 
any text following the tag will be ignored.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @end}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @enum (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @enum} tag is a topic tag used to document 
enumeration data types.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @enum} {\i enumeration_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows how to document enumeration types and 
members.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@enum Color values.\par 

\par 

enum Colors \{\par 

\tab blue,       //@emem The color Blue.\par 

\tab red,        //@emem The color Red.\par 

\};\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @emem}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @eve (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @eve} tag names an OLE event supported by an OLE 
object. The tag is used within an {\b @object} or {\b @interface} topic 
block. Use the {\i description} field to describe how the object supports 
the event.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @eve} {\i data type} | {\i event name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the tag used within a {\b @object} topic 
block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //MDA2DCanvasView object\par 

\par 

//@object MDA2DCanvasView |The 2D Canvas view object (allows execution of undo-able\par 

\par 

//commands on a 2D Canvas).\par 

\par 

//@prop Integer|CameraFitStyle|Determines how a camera view is displayed in a\par 

\par 

//canvas view window; one of  CameraOverridesView, StretchToFillView, ScaleToFillView,\par 

\par 

//StretchToViewWidth, StretchToViewHeight, ClipToView\par 

\par 

//@prop Boolean|CanCacheView|Determines whether the canvas can be cached to allow\par 

\par 

//faster redraw rates.\par 

\par 

//@meth HRESULT|CopySelection|Standard clipboard copy.\par 

\par 

//@meth HRESULT|CutSelection|Standard clipboard cut.\par 

\par 

//@eve Click|Occurs when the user presses and then releases a mouse button over an object.\par 

\par 

//@eve Deactivate |Occurs before a different canvas view is activated\par 

\par 

//@supint IMDA2DCanvasView|For more information, see <o MDA2DCanvasView>.\par 

\par 

//@supint IMDA2DGraphicView|Allows access to the view of a generic graphic content object.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @event (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @event} tag is a topic tag used to document OLE event.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @event} {\i interface name}|{\i event name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of the {\b @event} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@event IMDA2DCamera|Click|Occurs when the user presses and then releases a mouse button over\par 

// an object.  It may also occur when the value of a control is changed.\par 

//\par 

//@supby <o MDA2DGroupView>, <o MDA2DPaint>, <o MDA2DMetafile>,\par 

//<o MDA2DRectangle>, <o MDA2DLine>, <o MDA2DLayerView>, <o MDA2DCanvasView>,\par 

//<o MDA2DCamera>\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @ex (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @ex} tag is used to document example source code. Use 
the similar {\b @iex} tag to create an example continuation paragraph.\par 

The second field of the example tag is output as a monospaced paragraph 
that preserves the spaces and indents from the source file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @ex} {\i description} | {\i example}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Text in the {\i example} field can include special Autoduck 
characters such as |, <, and > without 
escaping the characters.\par 

If you use C++ inline comments (//), be sure to place them past the 
first text column, otherwise the entire line will be omitted from 
the topic.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example uses the {\b @ex} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @ex The following example adds two objects to a list: |\par 

//\par 

//  CObList list;\par 

//\par 

//  list.AddHead( new CAge( 21 ) );\par 

//  list.AddHead( new CAge( 40 ) ); // List now contains (40, 21);\par 

//  ASSERT( *(CAge*) list.GetTail() == CAge( 21 ) );\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @field (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @field} tag is used to document structure members.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @field} {\i data_type} | {\i member_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i data_type} and {\i member_name} fields if 
the comment block containing the {\b @field} tag immediately follows on 
the same line as the member declaration.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows both usages:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @struct POINT | This structure describes a point.\par 

//\par 

// @field int | x | Specifies the x-coordinate.\par 

//\par 

// @field int | y | Specifies the y-coordinate.\par 

\par 

typedef struct tagPOINT\par 

\{\par 

\tab int x;\par 

\tab int y;\par 

\} POINT;\par 

\par 

// @struct POINT | This structure describes a point.\par 

\par 

typedef struct tagPOINT\par 

\{\par 

\tab int x;    // @field Specifies the x-coordinate.\par 

\tab int y;    // @field Specifies the y-coordinate.\par 

\} POINT;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @flag} {\b @struct}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @flag (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @flag} tag is used to document constant flags 
for parameters,\tab return values, and structure fields.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @flag} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @flag} tag (this time used with 
the {\b @rdesc} tag):\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func This function compares two strings.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

int strcmp(\par 

\tab char *szStr1,  // @parm Specifies a pointer to the first string.\par 

\tab char *szStr2)  // @parm Specifies a pointer to the second string.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parm} {\b @field} {\b @rdesc}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @func (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @func} tag is a topic tag used to document C-language 
functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @func} {\i type} | {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following shows examples of an @func tag. The first variation 
shows all the information entered in the tag itself. The second 
variation lets Autoduck parse information from the function header.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func int | strcmp | This function compares two strings.\par 

//\par 

// @parm char *| szStr1 | Specifies a pointer to the first string.\par 

//\par 

// @parm char *| szStr2 | Specifies a pointer to the second string.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

\par 

int strcmp(char *szStr1, char *szStr2)\par 

\par 

// @func This function compares two strings.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

int strcmp(\par 

\tab char *szStr1,  // @parm Specifies a pointer to the first string.\par 

\tab char *szStr2)  // @parm Specifies a pointer to the second string.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\i type} and {\i name} fields can both be omitted if the 
function declaration immediately follows the comment block in which the 
{\b @func} tag was used.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @rdesc} {\b @parm} {\b @comm} {\b @ex} {\b @xref} {\b @flag}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cb}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @globalv (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @globalv} tag is used to document global 
variables and is generally used inside an {\b @module} topic.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @globalv} {\i type} {\i name} {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @globalv} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 /* @doc DKOALA\par 

*\par 

* @module DKOALA.CPP - Koala Object DLL Chapter 4 |\par 

*\par 

* Example object implemented in a DLL.  This object supports\par 

* IUnknown and IPersist interfaces, meaning it doesn't know\par 

* anything more than how to return its class ID, but it\par 

* demonstrates a component object in a DLL.\par 

*\par 

* Copyright (c)1993 Microsoft Corporation, All Rights Reserved\par 

*\par 

* @index | DKOALA\par 

*\par 

* @normal Kraig Brockschmidt, Software Design Engineer\par 

* Microsoft Systems Developer Relations\par 

*\par 

* Autoduck example by Eric Artzt (erica@microsoft.com)\par 

*/\par 

\par 

//Do this once in the entire build\par 

#define INITGUIDS\par 

\par 

#include "dkoala.h"\par 

\par 

\par 

//@globalv Count number of objects\par 

ULONG       g_cObj=0;\par 

\par 

//@globalv Count number of locks\par 

ULONG       g_cLock=0;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @group (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @group} tag is used to add a subheading within any 
Autoduck topic. You must follow the {\b @group} paragraph with a tag 
paragraph to reset the tag type; otherwise, all following paragraphs 
appear in bold.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @group} {\i group heading}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @todo} {\b @devnote}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @head1 (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a level 1 heading (style "Heading 1").\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @head1} {\i Heading Text} | {\i Paragraph text...}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @head2 (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a level 2 heading (style "Heading 2").\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @head2} {\i Heading Text} | {\i Paragraph text...}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @head3 (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a level 3 heading (style "Heading 3").\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @head3} {\i Heading Text} | {\i Paragraph text...}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @iex (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @iex} tag creates an example paragraph (a monospaced paragraph 
that preserves the spaces and indents from the source file).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @iex} {\i example}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Text in the {\i example} field can include special Autoduck 
characters such as |, <, and > without 
escaping the characters.\par 

If you use C++ inline comments (//), be sure to place them past the 
first text column, otherwise the entire line will be omitted from 
the topic.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example uses the {\b @iex} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @iex\par 

//  CObList list;\par 

//\par 

//  list.AddHead( new CAge( 21 ) );\par 

//  list.AddHead( new CAge( 40 ) ); // List now contains (40, 21);\par 

//  ASSERT( *(CAge*) list.GetTail() == CAge( 21 ) );\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @ilist (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @ilist} tag is used to list a series of interfaces supported 
by a property. Only the names of the supported interfaces appear; not 
a description of the interface.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @ilist} {\i interfaceName, interfaceName, ...}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of the {\b @ilist} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@ilist IPixelMap, IPersistStorage, IUnknown\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @prop}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @index (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a topic index. For more information on topic 
indexes, see \ldblquote Generating Topic Indexes\rdblquote 
.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @index} {\i tag-extract-expression} | {\i topic-extract-expression}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 For example, the following {\b @index} tag displays all {\b @class} 
and {\b @mfunc} topics appearing under the extraction flags PARSE or OUTPUT:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@index class mfunc | PARSE OUTPUT\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @contents1} {\b @contents2} {\b @index}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @interface (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @interface} tag is a topic tag used to document OLE 
interfaces.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @interface} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @meth} {\b @prop} {\b @supby} {\b @xref} {\b @comm}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @object}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @mdata (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @mdata} tag is a topic tag used to document class 
data members.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @mdata} {\i data_type} | {\i class_name} | {\i member_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @mdata} tag in use:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@mdata HWND | CWnd | m_hWnd | Contains the window handle for the\par 

// <c CWnd>.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class} {\b @mfunc} {\b @access}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @member (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @member} tag is used within the {\b @class} tag to 
provide a simple description of class members.\par 

NOTE: The {\b @cmember} tag is preferred for documenting class 
members; it can automatically parse the type, name, and parameter 
list from a class member variable or member function.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @member} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @member} tag can only be used within an {\b @class} topic 
block. Use the {\b @mfunc} and {\b @mdata} tags to provide complete 
documentation for member functions and member data.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cmember}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @menum (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @menum} tag is a topic tag used to document 
enumeration types defined as members of classes.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @menum} {\i class_name} | {\i enumeration_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples show the {\b @menum} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @class Example of class with nested constructs.\par 

\par 

class CMyClass\par 

\{\par 

public:\par 

\tab //@cmember,mstruct Parsing text structure\par 

\par 

\tab struct PARSETEXT\par 

\tab \{\par 

\tab char *szBase;\tab \tab //@@field Base of text to parse\par 

\tab char *szCur;\tab \tab //@@field Current parsing location\par 

\tab \};\par 

\par 

\par 

\tab //@cmember,menum Parsing types\par 

\par 

\tab enum PARSETYPES\par 

\tab \{\par 

\tab parseStruct = 1,\tab //@@emem C structure - gets struct tagname\par 

\tab parseClass,\tab \tab \tab //@@emem C++ class - gets class name\par 

\tab parseFunc,\tab \tab \tab //@@emem Function - gets return type and name\par 

\tab \};\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @emem}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cmember} {\b @class} {\b @emem} {\b @mstruct} \ldblquote Nesting Topics Inside Topics\rdblquote 
\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @meth (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @meth} tag names an OLE method supported by an OLE 
object. 
The tag is used within an {\b @object} topic 
block. Use the {\i description} field to describe how the object supports 
the method.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @meth} {\i return value}|{\i method name} | {\i description}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @method (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @method} tag is a topic tag used to document OLE interface methods.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @method} {\i return type} | {\i interface name} | {\i method name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of the {\b @method} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@method HRESULT|IMDA2DCanvasView| CopySelection |Standard clipboard copy.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @supby} {\b @parm} {\b @rvalue} {\b @ex}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @mfunc (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @mfunc} tag is a topic tag used to document class 
member functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @mfunc} {\i return_type} | {\i class_name} | {\i function_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows two variations of the {\b @mfunc} tag, 
one using full information typed in the tag fields, and the other using 
the source parsing feature:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@mfunc void | CString | MakeUpper | This function converts the\par 

// string text to uppercase.\par 

\par 

void CString::MakeUpper();\par 

\par 

//@mfunc This function converts the string text to uppercase.\par 

\par 

void CString::MakeUpper();\par 

\par 

//@mfunc Template example with class- and function-level template\par 

// args.\par 

//\par 

//@tfarg class | B | A class to pass\par 

//\par 

//@tcarg class | T | A class to store in stack\par 

//@tcarg int | i | Initial size of stack\par 

\par 

template< class T, int i >\par 

MyStack< T, i>::popperlink<class B>( void )\par 

\{\par 

\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\i return_type}, {\i class_name}, and {\i function_name} fields 
can all be omitted if the function declaration immediately follows the 
comment block in which the {\b @mfunc} tag was used.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class} {\b @mdata} {\b @access} {\b @tcarg} {\b @tfarg}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @module (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @module} tag is a topic tag used to document source 
code modules.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @module} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows a module comment:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 /* @doc DKOALA\par 

*\par 

* @module DKOALA.CPP - Koala Object DLL Chapter 4 |\par 

*\par 

* Example object implemented in a DLL.  This object supports\par 

* IUnknown and IPersist interfaces, meaning it doesn't know\par 

* anything more than how to return its class ID, but it\par 

* demonstrates a component object in a DLL.\par 

*\par 

* Copyright (c)1993 Microsoft Corporation, All Rights Reserved\par 

*\par 

* @index | DKOALA\par 

*\par 

* @normal Kraig Brockschmidt, Software Design Engineer\par 

* Microsoft Systems Developer Relations\par 

*\par 

* Autoduck example by Eric Artzt (erica@microsoft.com)\par 

*/\par 

\par 

//Do this once in the entire build\par 

#define INITGUIDS\par 

\par 

#include "dkoala.h"\par 

\par 

//@globalv Count number of objects\par 

ULONG       g_cObj=0;\par 

\par 

//@globalv Count number of locks\par 

ULONG       g_cLock=0;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 This tag is generally just used by developers to record 
comments for a code module.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @globalv}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @msg (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @msg} tag is a topic tag used to document Windows-style 
messages.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @msg} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @msg} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @msg WM_TIMER | This message notifies the window of a timer event.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @rdesc} {\b @parm} {\b @comm} {\b @ex} {\b @xref} {\b @flag}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @mstruct (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @mstruct} tag is a topic tag used to document 
data structures defined as members of classes.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @mstruct} {\i class_name} | {\i structure_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples show the {\b @mstruct} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @class Example of class with nested constructs.\par 

\par 

class CMyClass\par 

\{\par 

public:\par 

\tab //@cmember,mstruct Parsing text structure\par 

\par 

\tab struct PARSETEXT\par 

\tab \{\par 

\tab char *szBase;\tab \tab //@@field Base of text to parse\par 

\tab char *szCur;\tab \tab //@@field Current parsing location\par 

\tab \};\par 

\par 

\par 

\tab //@cmember,menum Parsing types\par 

\par 

\tab enum PARSETYPES\par 

\tab \{\par 

\tab parseStruct = 1,\tab //@@emem C structure - gets struct tagname\par 

\tab parseClass,\tab \tab \tab //@@emem C++ class - gets class name\par 

\tab parseFunc,\tab \tab \tab //@@emem Function - gets return type and name\par 

\tab \};\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @field} {\b @flag}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @cmember} {\b @class} {\b @field} {\b @mstruct} \ldblquote Nesting Topics Inside Topics\rdblquote 
\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @normal (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a body text paragraph (style "Normal").\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @normal} Paragraph text...\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @object (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @object} tag is a topic tag used to document OLE objects.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @object} {\i name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of the {\b @object} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // Point2D object\par 

//\par 

// @object   Point2D | Represents a two-dimensional coordinate.\par 

//\par 

// @prop     long | X | X-coordinate (read/write)\par 

//\par 

// @prop     long | Y | Y-coordinate (read/write)\par 

//\par 

// @supint   IPoint2D | Primary interface.\par 

//\par 

// @supint   DPoint2D | Exposes IPoint2D for OLE Automation.\par 

//\par 

// @supint   IDispatch | Equivalent to DPoint2D.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @meth} {\b @prop} {\b @supint} {\b @consumes}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @parm (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @parm} tag is used to document function and message 
parameters.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parm} {\i data_type} | {\i parameter_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i data_type} and {\i parameter_name} fields if 
the comment block containing the {\b @parm} tag immediately follows on 
the same line as the parameter declaration.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows both usages:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func int | strcmp | This function compares two strings.\par 

//\par 

// @parm char *| szStr1 | Specifies a pointer to the first string.\par 

//\par 

// @parm char *| szStr2 | Specifies a pointer to the second string.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

int strcmp(char *szStr1, char *szStr2)\par 

\par 

// @func This function compares two strings.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

int strcmp(\par 

\tab char *szStr1,  // @parm Specifies a pointer to the first string.\par 

\tab char *szStr2)  // @parm Specifies a pointer to the second string.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parmopt} {\b @flag} {\b @func} {\b @mfunc} {\b @method}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @parmopt (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @parmopt} tag is used to document optional 
parameters for functions and member functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parm} {\i data_type} | {\i parameter_name} | 
{\i default_value} {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit all fields except for {\i description} if the source 
declaration immediately precedes the {\b @parmopt} comment block, or if 
the function declaration follows the comment header.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples shows the various usages:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @mfunc void | MyClass | Foo | My Function Foo\par 

// @parmopt ULONG | a | 1 | [in] value of a\par 

// @parmopt ULONG | b | 2 | [in] value of b\par 

\par 

void MyClass::Foo(ULONG a=1,ULONG b=2 )\par 

\{ ;\}\par 

\par 

// @mfunc My Function Foo\par 

void MyClass::Foo(\par 

ULONG a=1,\tab // @parmopt [in] value of a\par 

ULONG b=2\tab // @parmopt [in] value of b\par 

)\par 

\{ ;\}\par 

\par 

// @mfunc My Function Foo\par 

// @parmopt [in] value of a\par 

// @parmopt [in] value of b\par 

\par 

void MyClass::Foo(ULONG a=1, ULONG b=2 )\par 

\{ ;\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parm} {\b @flag} {\b @func} {\b @mfunc} {\b @method}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @parmvar (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @parmvar} tag is used to document a variable 
arguments list.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parmvar} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows how the {\b @parmvar} tag used within 
a function block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func Prints a bunch of stuff to the console.\par 

//\par 

int strcmp(\par 

\tab char *szFormat,   // @parm Formatting string with one or more\par 

\tab \tab \tab \tab \tab   //   variable argument codes.\par 

\tab ...)              // @parmvar One or more parameters matching\par 

\tab \tab \tab \tab \tab   //   the argument codes in <p szFormat>.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @parm} {\b @func}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @prop (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @prop} tag names an OLE property supported by an OLE 
object. The tag is used within an 
{\b @object} topic 
block. Use the {\i description} field to describe how the object supports 
the property.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @prop} {\i data type} | {\i property name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the tag used within a {\b @object} topic 
block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // Point2D object\par 

//\par 

// @object   Point2D | Represents a two-dimensional coordinate.\par 

//\par 

// @prop     long | X | X-coordinate (read/write)\par 

//\par 

// @prop     long | Y | Y-coordinate (read/write)\par 

//\par 

// @supint   IPoint2D | Primary interface.\par 

//\par 

// @supint   IDispatch | Equivalent to DPoint2D.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @property (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @property} tag is a topic tag used to document OLE properties.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @property} {\i data type} | {\i interface name} |{\i property name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the use of the {\b @property} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // MDA2DLine property Endpoint1 (r/w)\par 

//\par 

// @property\tab Point2D | IMDA2DLine | Endpoint1 | Coordinate of starting endpoint of line relative to\par 

// the layer's origin,  in layer coordinate units. (read/write)\par 

//\par 

// @supby\tab \tab MDA2DLine\par 

//\par 

// @comm\tab \tab The coordinate value can be in the range -2147483648\par 

//              to 2147483647, inclusive, though some methods that\par 

//              accept Endpoint1 parameters may restrict the value to\par 

//              the range -32768 to 32767.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @supby}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @rdesc (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @rdesc} tag is used to document return values 
of functions and messages.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @rdesc} {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 For functions, the return value type is documented with the 
{\b @func} or {\b @mfunc} tag. For messages, the return value type is 
implicit\emdash it is the type of the function receiving the message.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @rdesc} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @func This function compares two strings.\par 

//\par 

// @rdesc Returns one of the following values:\par 

//\par 

// @flag -1 | If <p szStr1> is smaller.\par 

// @flag 1  | If <p szStr2> is smaller.\par 

// @flag 0  | If <p szStr1> and <p szStr2> are the same.\par 

\par 

int strcmp(\par 

\tab char *szStr1,  // @parm Specifies a pointer to the first string.\par 

\tab char *szStr2)  // @parm Specifies a pointer to the second string.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @rvalue (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @rvalue} tag is used to document the HRESULT status codes 
and their meanings.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @rvalue} {\i status code} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example uses the {\b @rvalue} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @rvalue S_OK | The operation succeeded.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @struct (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @struct} tag is a topic tag used to document data 
structures.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @struct} {\i structure_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following examples show the {\b @struct} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @struct POINT | This structure describes a point.\par 

//\par 

// @field int | x | Specifies the x-coordinate.\par 

//\par 

// @field int | y | Specifies the y-coordinate.\par 

\par 

typedef struct tagPOINT\par 

\{\par 

\tab int x;\par 

\tab int y;\par 

\} POINT;\par 

\par 

// @struct POINT | This structure describes a point.\par 

\par 

typedef struct tagPOINT\par 

\{\par 

\tab int x;    // @field Specifies the x-coordinate.\par 

\tab int y;    // @field Specifies the y-coordinate.\par 

\} POINT;\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Paragraph Tags\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @field} {\b @flag}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @field} {\b @mstruct}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @subindex (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a link to a second-level index page. Use the 
{\b @contents2} tag to create a second-level index page.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @subindex} | {\i Subindex Title}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following tag creates a link to a subindex called "COM 
Elements":\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@subindex COM Elements\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @contents1} {\b @contents2} {\b @index}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @supby (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @supby} tag lists OLE objects or interfaces that 
support a method or property. The tag is used within a {\b @method} or 
{\b @property} topic block.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @supby} {\i list of objects}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows {\b @supby} within a {\b @property} topic 
block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //\par 

// @property\tab Point2D | IMDA2DLine | Endpoint1 | Coordinate of starting endpoint of line relative to\par 

// the layer's origin,  in layer coordinate units. (read/write)\par 

//\par 

// @supby\tab \tab MDA2DLine\par 

//\par 

// @comm\tab \tab The coordinate value can be in the range -2147483648\par 

//              to 2147483647, inclusive, though some methods that\par 

//              accept Endpoint1 parameters may restrict the value to\par 

//              the range -32768 to 32767.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @supint (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @supint} tag names an OLE interface supported 
by an OLE object. The tag is used within an {\b @object} topic block. 
Use the {\i description} field to describe how the object supports the 
interface.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @supint} {\i interface name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the tag used within a {\b @object} topic 
block:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // Point2D object\par 

//\par 

// @object   Point2D | Represents a two-dimensional coordinate.\par 

//\par 

// @prop     long | X | X-coordinate (read/write)\par 

//\par 

// @prop     long | Y | Y-coordinate (read/write)\par 

//\par 

// @supint   IPoint2D | Primary interface.\par 

//\par 

// @supint   DPoint2D | Exposes IPoint2D for OLE Automation.\par 

//\par 

// @supint   IDispatch | Equivalent to DPoint2D.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @syntax (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @syntax} tag is used to document syntax for 
overloaded C++ member functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @syntax} {\i syntax_statement}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 If this tag is present in a {\b @func} or {\b @mfunc} topic block, the 
automatically-generated syntax statement is omitted and replaced by the 
text specified in {\i syntax_statement}.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @syntax} tag in use:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @mfunc | CString | CString | Constructs a <mf CString>.\par 

//\par 

// @syntax CString();\par 

// @syntax CString(const CString& stringSrc);\par 

// @syntax CString(char ch, int nRepeat = 1);\par 

// @syntax CString(const char* psz);\par 

// @syntax CString(const char* pch, int nLength);\par 

//\par 

// @parm const CString&| stringSrc | Specifies ...\par 

// @parm char | ch | Specifies..\par 

// @parm int | nRepeat | Specifies...\par 

//\par 

// etc etc.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @mfunc}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @tcarg (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @tcarg} tag is used to document template arguments 
for C++ class templates.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @tcarg} {\i data_type} | {\i argument_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @tcarg} tag used within class 
and member function definitions:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@class Template class\par 

//@tcarg class | T | A class to store in stack\par 

//@tcarg int | i | Initial size of stack\par 

\par 

template<class T, int i> class MyStack\par 

\{ ... \}\par 

\par 

//@mfunc Template constructor function\par 

//@tcarg class | T | A class to store in stack\par 

//@tcarg int | i | Initial size of stack\par 

\par 

template< class T, int i >\par 

MyStack< T, i>::MyStack( void )\par 

\{\par 

\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @class} {\b @mfunc}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @tfarg (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @tfarg} tag is used to document template arguments 
for C++ member functions and for functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @tfarg} {\i data_type} | {\i argument_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @tfarg} tag used within function 
and member function definitions:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 //@func Template function test\par 

//@tfarg class | B | A class.\par 

//@tfarg class | C | Another class.\par 

\par 

template<class B, class C>\par 

int TemplateFunc(\par 

\tab B foo,                 //@parm A Foo\par 

\tab C bar)                 //@parm A Bar\par 

\{\par 

\}\par 

\par 

//@mfunc Function template args\par 

//@tfarg class | B | A class to pass\par 

//@tcarg class | T | A class to store in stack\par 

//@tcarg int | i | Initial size of stack\par 

\par 

template< class T, int i >\par 

MyStack< T, i>::popperlink<class B>( void )\par 

\{\par 

\par 

\}\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @func} {\b @mfunc}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @todo (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @todo} tag is used to document comments about 
programming work that is not complete or features that are not 
implemented.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @todo} {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 This tag is for developers and does not generate output 
for external (user ed) builds. Use the {\b @comm} tag to create 
comments that appear in external builds.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @devnote}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @topic (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Creates an overview topic. To create links to a contents 
topic, use the {\b <l} text tag.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @topic} {\i Topic Heading} | Topic Text\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <l}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @type (topic-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @type} tag is a topic tag used to document data 
types (generally typedefs).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @type} {\i type_name} | {\i description}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @type} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @type OLECLIPFORMAT | Standard clipboard format.\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @struct}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 @xref (paragraph-level)\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b @xref} tag is used to document cross references to other 
related topics.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @xref} {\i cross references}\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\i cross references} field is a block of text similar to the 
{\i description} field in topic tags. Usually this field consists 
of a whitespace-separated list of related topics. To properly generate 
hypertext links in Help, cross references must be properly type 
formatted.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following example shows the {\b @xref} tag:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 // @xref <c CRect> <c CPoint> <mf CRect.EqualRect>\par 

// <mf CRect.InflateRect>\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <bmp\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <bmp} tag lets you insert a bitmap file.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <bmp {\i bitmap filename}>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Example\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 The following paragraph includes the bitmap C:\\DOC\\CLASSD.DIB:\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 The following illustration shows the class hierarchy:\par 

\par 

<bmp c\\:/doc/classd\\.dib>\par 
\pard\plain \s28\sl-220\li720\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f17\fs16\lang1033 \par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 When specifying a full path name, use forward 
slashes instead of backslashes, and be sure to escape any periods 
or colons in the path name.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <c\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <c} tag is used to identify references to classes.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <c {\i class name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <cp\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <cp} tag is used to generate a copyright symbol (\'a9 ).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <cp>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <date\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts the date of the Autoduck build.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <date>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <e\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <e} tag is used to identify references to 
structure members.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <e {\i type name}.{\i member name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <em-\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <em-} tag is used to generate an em dash character 
(\emdash ).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <em->\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <en-}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <en-\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <en-} tag is used to generate an en dash character 
(\endash ).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <en->\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <em-}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <f\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <f} tag is used to identify references to functions 
and macros.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <f {\i function name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <filename\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts the source filename.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <filename>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <filepath\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts the source file path.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <filepath>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <gt\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <gt} tag is used to generate a greater-than symbol 
(>).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <gt>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <lt}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <i\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <i} tag is used to identify OLE interface names.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <i {\i interface name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <im\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <im} tag is used to identify references to 
interface methods.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <im {\i interface method}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <l\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a hypertext link to an overview topic.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <l {\i overview topic title}>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 Be sure to duplicate the overview topic exactly as it appeared 
in the {\b @topic} tag, including embedded spaces and punctuation.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b @topic}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <lq\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a left quote.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <lq>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <rq}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <lt\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <lt} tag is used to generate a less-than symbol (<).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <lt>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <gt}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <m\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <m} tag is used to identify references to messages.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <m {\i message name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <md\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <md} tag is used to identify references to class 
member data.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <md {\i class name}::{\i member name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <mf\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <mf} tag is used to identify references to class 
member functions.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <mf {\i class name}::{\i member function name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <nl\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <nl} tag is used to generate a new line character.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <nl>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <o\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <o} tag is used to identify references to OLE COM 
objects.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <o {\i object name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <oe\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <oe} tag is used to identify references to OLE2 
object events.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <om {\i interface name}.{\i event name}>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i interface name} if the event belongs to the 
same interface as the method, property, or event being described. You must 
still include the period before the {\i event name}.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <om\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <om} tag is used to identify references to 
methods in OLE COM object interfaces.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <om {\i interface name}.{\i method name}>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i interface name} if the method belongs to the 
same interface as the method, property, or event being described. You must 
still include the period before the {\i method name}.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <op\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <op} tag is used to identify references to 
properties defined for OLE2 COM objects.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <op  {\i interface name}.{\i property name} >\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Comments\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 You can omit the {\i interface name} if the property belongs to the 
same interface as the method, property, or event being described. You must 
still include the period before the {\i property name}.\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <p\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <p} tag is used to identify references to 
parameters.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <p {\i parameter name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <rq\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a right quote.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <rq>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <lq}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <rtm\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <rtm} tag is used to generate a registered trademark 
symbol (\'ae ).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <rtm>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <tm}\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <t\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <t} tag is used to identify references to 
structure and enumeration types.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <t {\i type name}>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <tab\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 Inserts a tab symbol.\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <tab>\par 
\pard\plain \s57\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s45\sa180\sl-440\keepn\tx0 \b\f16\fs40\up8\lang1033 <tm\par 
\pard\plain \sa160\sl-240\li720 \fs21\lang1033 The {\b <tm} tag is used to generate a trademark symbol (\'99 ).\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 Syntax\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 <tm>\par 
\pard\plain \s46\li720\sb20\sa40\sl-220\keepn \b\f16\fs21\lang1033 See Also\par \pard\plain \sa160\sl-240\li720 \fs21\lang1033 {\b <rtm}\par 
}
