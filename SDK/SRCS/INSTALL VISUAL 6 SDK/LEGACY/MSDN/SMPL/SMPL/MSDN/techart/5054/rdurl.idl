// ReadUrl.idl : IDL source for ReadUrl.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (ReadUrl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

	[
		object,
		uuid(511A6700-9EEE-11D0-BD88-00A0C90F282F),
		dual,
		helpstring("IUrlReader Interface"),
		pointer_default(unique)
	]
	interface IUrlReader : IDispatch
	{
		[id(1), helpstring("method ReadUrl")] HRESULT ReadUrl(BSTR sURL, BSTR sOutputSpec);
	};

	[
		object,
		dual,
		uuid(723B5B11-9EEF-11d0-BD88-00A0C90F282F),
		helpstring("IUrlReaderEvent Interface"),
		version(1.0)
	]
	interface IUrlReaderEvents : IDispatch {
		HRESULT ReadUrlFinished(long lFlags);
		HRESULT ReadUrlError(long lErrorCode);
	};

[
	uuid(511A66F3-9EEE-11D0-BD88-00A0C90F282F),
	version(1.0),
	helpstring("ReadUrl 1.0 Type Library")
]
library READURLLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(723B5B10-9EEF-11d0-BD88-00A0C90F282F),
		nonextensible,
		helpstring("DIUrlReaderEvents Interface")
	]
	dispinterface DIUrlReaderEvents
	{
		properties:
		methods:
			[id(1), helpstring("method ReadUrlFinished")] void ReadUrlFinished(long lFlags);
			[id(2), helpstring("method ReadUrlError")] void ReadUrlError(long lErrorCode);
	};

	[
		uuid(511A6703-9EEE-11D0-BD88-00A0C90F282F),
		helpstring("UrlReader Class")
	]
	coclass UrlReader
	{
		[default] interface IUrlReader;
		interface IUrlReaderEvents;
		[default, source] dispinterface DIUrlReaderEvents;
	};
};
